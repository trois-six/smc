openapi: 3.0.1
info:
  contact:
    name: labo-smc@stormshield.eu
  description: |
    Management API for every SMC resources
  title: SMC HTTP API
  version: 1.0.0
paths:
  /api/accounts:
    get:
      description: Return a list of accounts
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  result:
                    items:
                      $ref: '#/components/schemas/definitions_accounts_AccountPropertiesWithoutPassword'
                    type: array
                  success:
                    example: true
                    type: boolean
                type: object
          description: Success
        "401":
          description: Unauthorized access
      summary: Get accounts list
      tags:
        - accounts
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/definitions_accounts_AccountCreateRequest'
        description: The user description to add
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                properties:
                  result:
                    $ref: '#/components/schemas/definitions_accounts_AccountPropertiesWithoutPassword'
                  success:
                    example: true
                    type: boolean
                type: object
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` may have:
            - EACCALREADYEXISTS: Login already exists
            - ELOGINISRESERVED: Login is reserved. It is already used as system account.
            - ELOGINMANDATORY: Login is mandatory
            - EINVALIDLOGIN: A valid identifier is mandatory for local authentication
            - ENAMEMANDATORY: Name is mandatory
            - ENOPASSWORDFORGROUPS: A group cannot have a password
            - EPASSWORDMANDATORY: Password is mandatory
            - EFORBIDDENCHAR: Invalid login: "${user.login}" (forbidden char: "${forbiddenCharMatch}")
        "401":
          description: Unauthorized access
        "409":
          description: Account already exists in database with the same login
      summary: Create a new account
      tags:
        - accounts
  /api/accounts/{uuid}:
    delete:
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  result:
                    $ref: '#/components/schemas/definitions_accounts_AccountPropertiesWithoutPassword'
                  success:
                    example: true
                    type: boolean
                type: object
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` may have:
            - EINVAL: Miss uuid
        "401":
          description: Unauthorized access
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` may have:
            - EUSERNOTREMOVABLE: The specified account cannot be removed
            - EFORBIDDENRIGHT: The specified permission cannot be given to the specified account
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` may have:
            - EUSERDOESNOTEXIST: Account "${uuid}" does not exist
      summary: Delete a user/group
      tags:
        - accounts
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_accounts_AccountPropertiesWithoutPassword'
          description: Success
        "401":
          description: Unauthorized access
        "403":
          description: |
            `code` may have:
            - ECANNOTGETUSER: Only 'admin' can get different user
      summary: Fetch account
      tags:
        - accounts
    parameters:
      - description: Account uuid
        in: path
        name: uuid
        required: true
        schema:
          type: string
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/definitions_accounts_AccountUpdateRequest'
        description: Account description
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  result:
                    $ref: '#/components/schemas/definitions_accounts_AccountPropertiesWithoutPassword'
                  success:
                    example: true
                    type: boolean
                type: object
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` may have:
            - ELOGINMANDATORY: Login is mandatory
            - ENAMEMANDATORY: Name is mandatory
            - ELOGINREADONLY: Account "${users[uuid].login}" login is readonly
            - ECANNOTMODIFYADMINRIGHTS: Admin rights cannot be changed
            - EMISSINGCURRENTPASSWORD: You must provide the current password in order to modify it
            - ENOPASSWORDFORGROUPS: A group cannot have a password
            - EWRONGCURRENTPASSWORD: You must provide the current password in order to modify it
            - EMISSINGPASSWORD: You must provide a password to allow local authentication
        "401":
          description: Unauthorized access
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` may have:
            - ECANNOTUPDATEUSER: Only "admin" can edit other users
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` may have:
            - EUSERDOESNOTEXIST: Account "${uuid}" does not exist
        "409":
          description: Account already exists in database with the same login
      summary: Update account
      tags:
        - accounts
  /api/accounts/apikeys:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/definitions_accounts_AccountApiKeyCreateRequest'
        description: The parameters of the API key to generate
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                properties:
                  result:
                    $ref: '#/components/schemas/definitions_accounts_CreateApiKeyResponse'
                  success:
                    example: true
                    type: boolean
                type: object
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` may have:
            - ELOGINREQUIRED: Login is mandatory
            - ELOGINTYPE: Login must be a string
            - ENAMEREQUIRED: Name is mandatory
            - ENAMETYPE: Name must be a string
            - EDATETYPE: Date must be a valid ISO date string
            - EINVALIDDATE: Date must be in the future
            - EBADKEYPERMS: Permissions are mandatory and cannot be wider than creator permissions
        "401":
          description: Unauthorized access
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` may have:
            - EFORBIDDEN: You are not allowed to create API keys
      summary: Generate and store a new API key
      tags:
        - accounts
  /api/accounts/apikeys/{uuid}:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_accounts_ApiKeyProperties'
          description: Success
        "403":
          description: |
            `code` may have:
            - EFORBIDDEN: The requester cannot access the API key with the given uuid
        "404":
          description: |
            `code` may have:
            - EKEYNOTFOUND: The given uuid is unknown
      summary: Fetch an API key
      tags:
        - accounts
    parameters:
      - description: API key uuid
        in: path
        name: uuid
        required: true
        schema:
          type: string
  /api/accounts/apikeys/revoke/{uuid}:
    post:
      parameters:
        - description: API key uuid
          in: path
          name: uuid
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  result:
                    $ref: '#/components/schemas/definitions_accounts_ApiKeyProperties'
                  success:
                    example: true
                    type: boolean
                type: object
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` may have:
            - ELOGINREQUIRED: Login is mandatory
            - EKEYNOTFOUND: The key does not exist
        "401":
          description: Unauthorized access
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` may have:
            - ECANTREVOKEAPIKEY: The user is not authorized to revoke this key
      summary: Revoke an API key.
      tags:
        - accounts
  /api/activeupdate:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  interfaces:
                    description: A list of listening network interfaces or an empty array if the service listens on every interface
                    example:
                      - eth0
                      - eth1
                    items:
                      type: string
                    type: array
                  port:
                    description: a simple port
                    type: number
                  state:
                    description: service state
                    type: boolean
                  syncAutoUpdatePeriod:
                    description: a CRON tab entry representing the sync periodicity
                    type: string
                  syncAutoUpdateState:
                    description: true if the autoupdate sync has been activated
                    type: boolean
                type: object
          description: Success
      summary: Retrieve activeupdate settings
      tags:
        - activeupdate
    put:
      requestBody:
        content:
          application/json:
            schema:
              properties:
                state:
                  description: service state
                  type: boolean
                syncAutoUpdateState:
                  description: true if the autoupdate sync must be activated
                  type: boolean
              type: object
        description: Some parts of the activeupdate settings
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  errors:
                    $ref: '#/components/schemas/definitions_common_ErrorsList'
                  success:
                    example: true
                    type: boolean
                type: object
          description: success
        "401":
          description: Unauthorized access
      summary: Updates the activeupdate settings
      tags:
        - activeupdate
  /api/activeupdate/certificate:
    get:
      responses:
        "200":
          content:
            application/x-x509-ca-cert:
              schema:
                format: binary
                type: string
          description: success
        "401":
          description: Unauthorized access
        "500":
          description: Internal technical error
      summary: Give the https server certificat file of the active update server
      tags:
        - activeupdate
  /api/activeupdate/import:
    post:
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                files:
                  format: binary
                  type: string
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  errors:
                    $ref: '#/components/schemas/definitions_common_ErrorsList'
                  success:
                    example: true
                    type: boolean
                type: object
          description: success
        "400":
          description: |
            `code` can be :
             - EFILEMISSING : When no archive was attached
             - EBADEXTNAME : When archive has a forbidden extension
            Example of accepted extension : .tgz, .gz
        "401":
          description: Unauthorized access
      summary: Allows to upload an archive for updating the server's filebase
      tags:
        - activeupdate
  /api/activeupdate/infos:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  certificateDn:
                    description: Server certificate DN
                    type: string
                  lastSyncEnd:
                    description: last synchronization end time
                    type: string
                  lastSyncError:
                    description: last synchronization error
                    type: string
                  lastSyncStart:
                    description: last synchronization start time
                    type: string
                type: object
          description: Success
      summary: Retrieve activeupdate infos
      tags:
        - activeupdate
  /api/activeupdate/script:
    get:
      responses:
        "200":
          content:
            application/x-sh:
              schema:
                format: binary
                type: string
          description: success
        "401":
          description: Unauthorized access
        "500":
          description: Internal technical error
      summary: Give a bash script that can download files-base from an active update server
      tags:
        - activeupdate
  /api/activeupdate/sync:
    post:
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  errors:
                    $ref: '#/components/schemas/definitions_common_ErrorsList'
                  success:
                    example: true
                    type: boolean
                type: object
          description: success
        "401":
          description: Unauthorized access
      summary: Force the activeupdate databases synchronization
      tags:
        - activeupdate
  /api/adminaccount:
    put:
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                password:
                  type: string
              required:
                - password
              type: object
        description: admin's password
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  result:
                    $ref: '#/components/schemas/definitions_adminaccount_AdminAccountResponse'
                  success:
                    example: true
                    type: boolean
                type: object
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: ""
      summary: reset admin's password
      tags:
        - adminaccount
  /api/apipolicy:
    get:
      description: Return the active api key policy
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_auth-policy_ApiKeyPolicyResult'
          description: Success
        "401":
          description: Unauthorized access
      summary: Get api's key policy
      tags:
        - api-policy
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/definitions_auth-policy_ApiKeyPolicy'
        description: The new api's key policy
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_auth-policy_ApiKeyPolicyResult'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` may have:
            - EDURATIONTYPE: key duration must be a number
            - EPERIODTYPE: key period must be hours or days or months or years.
            - EPERIODTOOSHORT: period should be above 1 hour.
        "401":
          description: Unauthorized access
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` may have:
            - ECANTUPDATEAPIPOLICY: Only "admin" can edit api key policy
      summary: Update the api's key policy
      tags:
        - api-policy
  /api/appconfig:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_appconfig_AppConfigResponse'
          description: Success
        "401":
          description: Unauthorized access
      summary: Get server configuration environment keys
  /api/auth/login:
    post:
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                force:
                  default: false
                  type: boolean
                password:
                  type: string
                username:
                  type: string
              required:
                - username
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_auth_AuthResponse'
          description: Authentication succeeded
        "401":
          content:
            application/json:
              schema:
                properties:
                  success:
                    default: false
                    description: False in case of a bad login / pwd
                    type: boolean
                required:
                  - success
                type: object
          description: Unauthorized access (in case of a bad user/login)
        "403":
          content:
            application/json:
              schema:
                properties:
                  delay:
                    description: duration in seconds of the ban time
                    example: 120
                    type: number
                  success:
                    default: false
                    description: False in case of a banned IP
                    type: boolean
                required:
                  - success
                  - delay
                type: object
          description: Forbidden access (in case of a banned IP)
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_auth_ConflictErrorResponse'
          description: Authentication conflict
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: Internal server error
      summary: Authenticate a user
      tags:
        - auth
  /api/auth/logout:
    post:
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  success:
                    example: true
                    type: boolean
                type: object
          description: Logout succeedeed
        "401":
          description: Unauthorized access
      summary: Logout the current user
      tags:
        - auth
  /api/authpolicy:
    get:
      description: Return the active password policy
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_auth-policy_PolicyResult'
          description: Success
        "401":
          description: Unauthorized access
      summary: Get users' password policy
      tags:
        - auth-policy
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/definitions_auth-policy_Policy'
        description: The new users' password policy
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_auth-policy_PolicyResult'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` may have:
            - ECANNOTUPDATEPOLICY: Only "admin" can edit password policy
            - EINVALIDLOGINLENGTH: Login should have a length lower than 128 characters
            - EINVALIDMINLENGTH: Length should be a number greater than 0 and lower than 128
            - EINVALIDNAMELENGTH: Name should have a length lower than 128 characters
            - EINVALIDMANDATORYTYPE: Mandatory type should be one of "None", "Alphanumeric" or "Alphabetic and special"
        "401":
          description: Unauthorized access
      summary: Update the users' password policy
      tags:
        - auth-policy
  /api/autobackup:
    get:
      description: Retrieve the autobackup activation state
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  enabled:
                    example: false
                    type: boolean
                  success:
                    example: true
                    type: boolean
                type: object
          description: success
        "401":
          description: Unauthorized access
      summary: Retrieve the autobackup activation state
      tags:
        - autobackup
    post:
      requestBody:
        content:
          application/json:
            schema:
              properties:
                enabled:
                  type: boolean
              required:
                - enabled
        description: autobackup activation state
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_SuccessResponse'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: Unauthorized access
      summary: Set the autobackup activation state
      tags:
        - autobackup
  /api/autobackup/{date}/{uuid-firewall}/backup:
    get:
      description: Retrieve the backup for a given backup and firewall
      parameters:
        - description: Backup date as ISO string (see /autobackup/results)
          in: path
          name: date
          required: true
          schema:
            type: string
        - description: Firewall uuid
          in: path
          name: uuid-firewall
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/gzip:
              schema:
                format: binary
                type: string
          description: success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: Unauthorized access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: Backup does not exist
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: Internal server error
      summary: Retrieve the backup for a given backup and firewall
      tags:
        - autobackup
  /api/autobackup/{date}/archive:
    get:
      description: Retrieve an archive for a given backup
      parameters:
        - description: Backup date as ISO string (see /autobackup/results)
          in: path
          name: date
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/zip:
              schema:
                format: binary
                type: string
          description: success
        "401":
          description: Unauthorized access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: Backup does not exist
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: Internal server error
      summary: Retrieve an archive for a given backup
      tags:
        - autobackup
  /api/autobackup/results:
    get:
      description: Retrieve the autobackup results
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  result:
                    items:
                      $ref: '#/components/schemas/definitions_autobackup_AutoBackupResult'
                    type: array
                  success:
                    example: true
                    type: boolean
                type: object
          description: success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: Unauthorized access
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: Internal server error
      summary: Retrieve the autobackup results
      tags:
        - autobackup
  /api/autobackup/smc/backup/{date}:
    get:
      description: Retrieve the smc backup for a given backup
      parameters:
        - description: Backup date as ISO string (see /autobackup/results)
          in: path
          name: date
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/gzip:
              schema:
                format: binary
                type: string
          description: success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: Unauthorized access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: Backup does not exist
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: Internal server error
      summary: Retrieve the smc backup for a given backup
      tags:
        - autobackup
  /api/backup:
    post:
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                backupArchive:
                  format: binary
                  type: string
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  confirmationToken:
                    description: md5 hash of the archive
                    example: 1873e9b72d5819f1a2b8e1bb793bad31
                    type: string
                  newIp:
                    description: info ip address
                    example: 192.168.3.10
                    type: string
                  success:
                    example: true
                    type: boolean
                type: object
          description: Uploaded backup successfully
        "401":
          description: Unauthorized access
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: Internal server error
      summary: Upload a backup
      tags:
        - backup
  /api/backup/{hash}:
    parameters:
      - description: The backup hash
        in: path
        name: hash
        required: true
        schema:
          type: string
    post:
      requestBody:
        content:
          application/json:
            schema:
              properties:
                password:
                  example: Iw76$k6!o#LtLmbs
                  type: string
              type: object
        description: Encryption password, leave blank if you don't want to encrypt the archive
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  success:
                    example: true
                    type: boolean
                type: object
          description: Restored server configuration
        "400":
          description: Bad Request
        "401":
          description: Unauthorized access
      summary: Confirm backup upload and restore
      tags:
        - backup
  /api/backup/download:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/definitions_backup_BackupDownloadBody'
      responses:
        "200":
          content:
            application/zip:
              schema:
                format: binary
                type: string
          description: success
        "401":
          description: Unauthorized access
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: Internal server error
      summary: Download a backup
      tags:
        - backup
  /api/certificates:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  result:
                    $ref: '#/components/schemas/definitions_certificates_CertificatesList'
                  success:
                    example: true
                    type: boolean
                type: object
          description: Success
        "401":
          description: Unauthorized
      summary: Retrieve all certificates
      tags:
        - certificates
    post:
      parameters:
        - description: the firewall uuid to link the certificate with
          in: query
          name: destFwUuid
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/definitions_certificates_CertificateCreateScep'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/definitions_certificates_CertificateUpload'
      responses:
        "201":
          content:
            application/json:
              schema:
                properties:
                  result:
                    properties:
                      output:
                        description: output of the serverd commands triggered by the API call
                        items:
                          type: string
                        type: array
                      secured:
                        description: whether the certificate has been installed on firewall's TPM
                        type: boolean
                    type: object
                  success:
                    type: boolean
                type: object
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` might be :
            - EDATAMISSING : No file nor certificate information provided
            - EDUPLICATE : Certificate already exists on firewall
            - ENOTFOUND : Unable to find firewall ID
            - EISSUERUNKNOWN : The issuer of the certificate is unknown.
            - EBADEXTNAME : Bad file extension
            - ENOTACERTIFICATE: File is detected as a CA, not a plain certificate
            - EINVALIDBINDADDR: The bindAddr value does not refer to a valid firewall interface host object
        "401":
          description: Unauthorized
        "409":
          description: |
            `code` might be :
            - EDUPLICATE : certificate with same subject already exists on the firewall
      summary: Upload a certificate
      tags:
        - certificates
  /api/certificates/{uuid}:
    delete:
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  result:
                    $ref: '#/components/schemas/definitions_certificates_Certificate'
                  success:
                    example: true
                    type: boolean
                type: object
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` might be :
            - EINVAL : the uuid parameter is empty
        "401":
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` might be :
            - ENOTFOUND : the certificate could not be found
        "423":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` might be :
            - ELOCK : if the certificate is a default certificate on a firewall that is used in PKI topology
      summary: Delete a certificate
      tags:
        - certificates
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  result:
                    $ref: '#/components/schemas/definitions_certificates_Certificate'
                  success:
                    type: boolean
                type: object
          description: Success
        "401":
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` might be :
            - ENOTFOUND : the certificate could not be found
      summary: Retrieve a single certificate
      tags:
        - certificates
    parameters:
      - description: The certificate's uuid
        in: path
        name: uuid
        required: true
        schema:
          type: string
    post:
      description: The new uploaded certificate must match the existing certificate subject
      parameters:
        - description: the firewall uuid to link the certificate with
          in: query
          name: destFwUuid
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/definitions_certificates_CertificateCreateScep'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/definitions_certificates_CertificateUpload'
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  result:
                    $ref: '#/components/schemas/definitions_certificates_Certificate'
                  success:
                    example: true
                    type: boolean
                type: object
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` might be :
            - EINVAL : the uuid parameter is empty
            - ENONMATCHINGCERTSUBJECT : the new certificate does not match the existing certificate subject
            - ENONMATCHINGCERTTYPE : the new certificate does not match the existing certificate type
            - ENOTACERTIFICATE: File is detected as a CA, not a plain certificate
        "401":
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` might be :
            - ENOTFOUND : the certificate could not be found
      summary: Update a file certificate
      tags:
        - certificates
    put:
      description: Used to update reference certificate and additional properties
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/definitions_certificates_CertificatePropertiesUpdate'
        description: The certificate properties
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  result:
                    $ref: '#/components/schemas/definitions_certificates_Certificate'
                  success:
                    example: true
                    type: boolean
                type: object
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` might be :
            - EINVAL : the uuid parameter is empty
            - ENONMATCHINGCERTSUBJECT : the new certificate does not match the existing certificate subject
            - ENONMATCHINGCERTTYPE : the new certificate does not match the existing certificate type
            - EINVALIDBINDADDR: The bindAddr value does not refer to a valid firewall interface host object
        "401":
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` might be :
            - ENOTFOUND : the certificate could not be found
      summary: Update certificate additional properties
      tags:
        - certificates
  /api/certificates/authorities:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  result:
                    $ref: '#/components/schemas/definitions_certification-authorities_CertificationAuthoritiesList'
                  success:
                    example: true
                    type: boolean
                type: object
          description: Success
        "401":
          description: Unauthorized
      summary: Retrieve all Certification Authorities
      tags:
        - certification authorities
    post:
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                ca:
                  format: binary
                  type: string
              type: object
        description: CA file in PEM, CER, CRT or DER format
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                  uuids:
                    description: All the CAs persisted in the unified config. The first uuid of this array is the leaf of the trust chain (lowest ca)
                    example:
                      - some-ca-uuid-1
                      - some-ca-uuid-2
                    items:
                      type: string
                    type: array
                type: object
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` might be :
            - EINVAL : the file is not a CA
            - EBADEXTNAME : Bad extension (expected .pem, .cer, .crt or .der)
            - EFILEMISSING : CA not provided
            - EFILEEMPTY : CA is empty.
            - EFILETOOBIG : File too big
            - EUNSIGNEDCHAIN : Unable to validate certificate chain signature
            - EINVALIDBUNDLEFILE : Cannot parse PEM bundle file
            - EINVALIDCERTCHAIN : The trust chain in certificate bundle is not valid (not continuous)
            - EINVALIDEMPTYSTRING : Some required fields in the certificate are empty.
            - ENOTACA : CA certificate flag is not set therefore not a valid CA
            - EISSUERUNKNOWN : The issuer of the CA is unknown.
            - EKEYCHECKFAILED : Unable to get the certificate"s public key
            - EOPENSSLCONVERTIONFAILED : OpenSSL failed to convert DER file into PEM
        "401":
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` might be :
            - ENOTFOUND : the CA could not be found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` might be :
            - EDUPLICATE : The certificate authority already exists
      summary: Upload a Certification Authority file
      tags:
        - certification authorities
  /api/certificates/authorities/{caUuid}:
    delete:
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  success:
                    example: true
                    type: boolean
                type: object
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` might be :
            - EINVAL : the uuid parameter is empty
        "401":
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` might be :
            - ENOTFOUND : the CA could not be found
      summary: Delete a Certification Authority
      tags:
        - certification authorities
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  result:
                    $ref: '#/components/schemas/definitions_certification-authorities_CertificationAuthority'
                  success:
                    type: boolean
                type: object
          description: Success
        "401":
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` might be :
            - ENOTFOUND : the CA could not be found
      summary: Retrieve a single Certification Authority
      tags:
        - certification authorities
    parameters:
      - description: CA\"s UUID
        in: path
        name: caUuid
        required: true
        schema:
          type: string
    post:
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                ca:
                  format: binary
                  type: string
              type: object
        description: CA file in PEM, CER, CRT or DER format
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  success:
                    example: true
                    type: boolean
                  uuid:
                    example: some-ca-uuid
                    type: string
                type: object
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` might be :
            - EINVAL : the file is not a CA
            - EBADEXTNAME : Bad extension (expected .pem, .cer, .crt or .der)
            - EFILEMISSING : CA not provided
            - EFILEEMPTY : CA is empty.
            - EFILETOOBIG : File too big
            - EINVALIDEMPTYSTRING : Some required fields in the certificate are empty.
            - EWRONGFILEFORMAT : The file is not a CA file or contains multiple files
            - ENOTCOMPLIANTKEY : The CA has not been updated because the given key does not match the current one.
            - ECAMISMATCH : The CA has not been updated because the given file describes another certification authority.
            - EKEYCHECKFAILED : Unable to get the certificate"s public key
            - EOPENSSLCONVERTIONFAILED : OpenSSL failed to convert DER file into PEM
        "401":
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` might be :
            - ENOTFOUND : the CA could not be found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` might be :
            - EDUPLICATE : The certificate authority already exists
      summary: Upload a new certification authority file
      tags:
        - certification authorities
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/definitions_certification-authorities_CertificationAuthorityWriteableProps'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  success:
                    example: true
                    type: boolean
                type: object
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` might be :
            - EINVAL : the uuid parameter is empty
            - EINVALIDCAENROLLMENTCONFIG:
              - The server URL has not been defined
              - The server protocol is invalid (must be HTTP for SCEP or HTTPS for EST)
              - The enrollment protocol is EST and no server CA name has been defined
              - A scepMethod has been defined while enrollment protocol is EST
              - An estAlias has been defined while enrollment protocol is SCEP
            - EINVALIDCAENROLLMENTCONFIGURL:
              - The enrollment protocol is EST and server URL contains a path, a query or a fragment
              - The enrollment protocol is SCEP and server URL contains a query or a fragment
        "401":
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` might be :
            - ENOTFOUND : the CA could not be found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` might be :
            - EDUPLICATE : A CA with the same name already exists
      summary: Update a certification authority"s name or comment
      tags:
        - certification authorities
  /api/certificates/authorities/{caUuid}.crl:
    get:
      description: This route is meant to be called from SNS only. The port number is the same as the one used by SNS to contact SMC.
      parameters:
        - description: CA"s uuid
          in: path
          name: caUuid
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                description: The CA"s CRL in PEM format
                format: binary
                type: string
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` might be :
            - EINVAL : the caName parameter is empty
        "401":
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` might be :
            - ENOTFOUND : the CA could not be found
      summary: Retrieve a Certification Authority"s Revocation List.
      tags:
        - certification authorities
  /api/certificates/authorities/crl:
    post:
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                crl:
                  format: binary
                  type: string
              type: object
        description: CRL file in PEM format
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  result:
                    items:
                      $ref: '#/components/schemas/definitions_misc_CrlProperty'
                    type: array
                  success:
                    example: true
                    type: boolean
                type: object
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` might be :
            - EUNABLETOLOADCRL : Unable to load CRL
        "401":
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` might be :
            - ENOTFOUND : No CA matches the issuer extracted from the given CRL file
      summary: Import a Certificate Revocation List for a CA, trying to deduce the CA from the given CRL issuer. This endpoint API does not require ReadWrite privileges.
      tags:
        - certification authorities
  /api/certificates/authorities/crl/{caUuid}:
    post:
      parameters:
        - description: CA's UUID
          in: path
          name: caUuid
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                crl:
                  format: binary
                  type: string
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  result:
                    $ref: '#/components/schemas/definitions_misc_CrlProperty'
                  success:
                    example: true
                    type: boolean
                type: object
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` might be :
            - ECERTISSUERMISMATCH: CRL issuer mismatch
            - EUNABLETOLOADCRL : Unable to load CRL
        "401":
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` might be :
            - ENOTFOUND : CA not found
      summary: Import a Certificate Revocation List for an existing CA.
      tags:
        - certification authorities
  /api/certificates/authorities/root:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  result:
                    $ref: '#/components/schemas/definitions_certification-authorities_CertificationAuthoritiesTree'
                  success:
                    example: true
                    type: boolean
                type: object
          description: Success
        "401":
          description: Unauthorized
      summary: Return Certification Authorities and certificates tree
      tags:
        - certification authorities
  /api/certificates/get:
    post:
      description: Retrieve a list of certificates
      requestBody:
        content:
          application/json:
            schema:
              properties:
                uuids:
                  items:
                    type: string
                  type: array
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_certificates_Certificate'
          description: Success
        "401":
          description: Unauthorized
      summary: Retrieve a list of certificates by uuids
      tags:
        - certificates
  /api/certificates/renew:
    post:
      description: Send SCEP certificates renew requests
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/definitions_certificates_CertificatesRenewList'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_certificates_CertificatesRenewRequestResults'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` might be :
            - EINVAL : Wrong parameters (certificates id).
            - ETOOMANYITEMS : Too many certificates to renew at once.
        "401":
          description: Unauthorized
      summary: Renew some certificates
      tags:
        - certificates
  /api/cfgcheck/activation/{domainName}:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: boolean
                  success:
                    example: true
                    type: boolean
                type: object
          description: success
        "401":
          description: Unauthorized access
        "403":
          description: Object is read-only (EREADONLY)
      summary: get one check domain activation status
      tags:
        - cfgcheck
        - ipsec-dr
    parameters:
      - description: domain name
        in: path
        name: domainName
        required: true
        schema:
          enum:
            - GROUP
            - ROUTER
            - RULE
            - CERTIFICATE
            - NETWORK_INTERFACE
            - FIREWALL
            - TOPOLOGY
            - IPSECDR
          type: string
    put:
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  success:
                    example: true
                    type: boolean
                type: object
          description: success
        "401":
          description: Unauthorized access
        "403":
          description: Object is read-only (EREADONLY)
      summary: toggle one check domain
      tags:
        - cfgcheck
        - ipsec-dr
  /api/cfgcheck/incoherencies:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_cfgcheck_Incoherencies'
          description: Success
        "401":
          description: Unauthorized access
      summary: Retrieve all the incoherencies found by the configuration control
      tags:
        - cfgcheck
  /api/cfgcheck/status/:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  running:
                    example: true
                    type: boolean
                  success:
                    example: true
                    type: boolean
                type: object
          description: success
      summary: get the state of the coherency check
      tags:
        - cfgcheck
  /api/cfgdiff/archive/{uuid}:
    get:
      parameters:
        - description: Firewall uuid
          in: path
          name: uuid
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/x-compressed-tar:
              schema:
                format: binary
                type: string
          description: The requested na file
        "401":
          description: Unauthorized access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: Archive file does not exist
      summary: Retrieve generated tgz archive (not ciphered) file for given firewall
      tags:
        - cfgdiff
  /api/cfgdiff/diff/{uuid}:
    get:
      parameters:
        - description: Firewall uuid
          in: path
          name: uuid
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_cfgdiff_CfgDiffResult'
          description: Success
        "401":
          description: Unauthorized access
        "423":
          description: Locked Access
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` might be :
            - EDIFFGENERATIONFAILED: Configuration file cannot be generated
      summary: Retrieve configuration differences for given firewall
      tags:
        - cfgdiff
  /api/cfgdiff/na/{uuid}:
    get:
      parameters:
        - description: Firewall uuid
          in: path
          name: uuid
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/x-compressed-tar:
              schema:
                format: binary
                type: string
          description: The requested na file
        "401":
          description: Unauthorized access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: Firewall does not exist
      summary: Retrieve generated na (ciphered) file for given firewall
      tags:
        - cfgdiff
  /api/cfgdiff/status:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_cfgdiff_CfgDiffStatusResult'
          description: Success
        "401":
          description: Unauthorized access
      summary: Retrieve the differential configuration status for all the firewalls
      tags:
        - cfgdiff
  /api/config/dr:
    get:
      description: SMC DR activation value as a boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_config_DRActivation'
          description: Success
        "500":
          description: Internal Server Error
      summary: Retrieve DR mode value
      tags:
        - config
    post:
      description: Updates the DR mode value
      requestBody:
        content:
          application/json:
            schema:
              properties:
                dr:
                  type: boolean
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_config_DRActivation'
          description: Success
        "400":
          description: |
            `code` can be : - EINVAL : Request body is invalid
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
      summary: Enable or disable DR mode
      tags:
        - config
  /api/config/initial:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_config_Initial'
          description: Success
        "403":
          description: Forbidden
      summary: Retrieve system network configuration (dns, hostname and interfaces)
      tags:
        - config
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/definitions_config_InitialConfiguration'
        description: The intial configuration
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  success:
                    example: true
                    type: boolean
                type: object
          description: Success
        "400":
          description: |
            `code` can be :
              - EINVALIDPARAM : status parameter is missing
              - EINVALIDPASSWORD : admin or root password doesn't match password policy
        "403":
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                properties:
                  success:
                    example: false
                    type: boolean
                type: object
          description: Internal Server Error
      summary: Initialize system configuration (network, admin and root password, etc.)
      tags:
        - config
  /api/config/initial/cloud/{cloudName}:
    post:
      parameters:
        - description: Cloud Name
          in: path
          name: cloudName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/definitions_config_InitialCloudConfiguration'
        description: The intial configuration
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  success:
                    example: true
                    type: boolean
                type: object
          description: Success
        "400":
          description: |
            `code` can be :
              - EINVALIDPASSWORD : admin password doesn't match password policy
        "401":
          description: Unauthorized, if cloudInstanceId doesn't match actual InstanceId
        "403":
          description: Forbidden, if calling this route in non cloud env
      summary: Initialize system configuration in cloud like aws or outscale
      tags:
        - config
  /api/config/initialized:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_config_InitializedState'
          description: Success
        "500":
          description: Internal Server Error
      summary: Fetch initialization state
      tags:
        - config
  /api/config/interfaces:
    get:
      description: Return a list of configured values for each active network interface
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_config_NetworkInterfacesListResponse'
          description: Success
        "401":
          description: Unauthorized access
      summary: Retrieve system network interfaces information
      tags:
        - network
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/definitions_config_NetworkInterfacesUpdateList'
        description: The new configuration of the interfaces
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  result:
                    $ref: '#/components/schemas/definitions_config_NetworkInterfacesUpdateList'
                  success:
                    example: true
                    type: boolean
                type: object
          description: Success
        "400":
          description: |
            `code` can be :
              - EINVALIDPARAM : Given dhcp interface can't have ip address, mask or gateway parameters
              - EFAILEDBACKUP : Backup creation failed
        "401":
          description: Unauthorized access
        "500":
          description: Internal Server Error
      summary: Updates the configuration files of a list of interfaces
      tags:
        - network
  /api/config/license:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  clientContact:
                    description: customer contact name
                    type: string
                  clientEmail:
                    description: customer contact email
                    type: string
                  clientOrganization:
                    description: customer company name
                    type: string
                  comment:
                    description: comment on license from ERP
                    type: string
                  dateNotAfter:
                    description: end validity date of license (ISO 8601 format, "YYYY-MM-DD")
                    type: string
                  dateNotBefore:
                    description: start validity date of license (ISO 8601 format, "YYYY-MM-DD")
                    type: string
                  dateUpdate:
                    description: validity date of maintenance contract (ISO 8601 format, "YYYY-MM-DD")
                    type: string
                  firewallsMax:
                    description: maximum numbers of firewalls allowed
                    type: string
                  serial:
                    description: unique number generated by ERP to identify the license ("SMC" followed by 8 random hexa digits)
                    type: string
                  version:
                    description: version number of licensing system in SMC
                    type: string
                type: object
          description: Success
        "400":
          description: |
            `code` can be :
              - EFILEEMPTY : License file is empty
              - EGROUPMISSING : A group is missing in the license file
              - EITEMMISSING : An item is missing in the license file
              - EINVALIDITEMFORMAT : An item has an invalid format in the license file
              - EINVALIDLICENSE : License is invalid (decryption has failed)
        "401":
          description: Unauthorized access
      summary: Retrieve current license information
      tags:
        - license
    post:
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                license:
                  format: binary
                  type: string
              type: object
        description: the license file to install
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  errors:
                    $ref: '#/components/schemas/definitions_common_ErrorsList'
                  success:
                    example: true
                    type: boolean
                type: object
          description: Réussite
        "400":
          description: |
            `code` can be :
              - EFILEEMPTY : License file is empty
              - EGROUPMISSING : A group is missing in the license file
              - EITEMMISSING : An item is missing in the license file
              - EINVALIDITEMFORMAT : An item has an invalid format in the license file
        "401":
          description: Unauthorized access
        "413":
          description: File is too big (max size is 1 Mb)
      summary: Install new license
      tags:
        - license
  /api/config/license/verify:
    post:
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  success:
                    example: true
                    type: boolean
                type: object
          description: Réussite
        "400":
          description: |
            `code` can be :
              - EFILEEMPTY : License file is empty
              - EGROUPMISSING : A group is missing in the license file
              - EITEMMISSING : An item is missing in the license file
              - EINVALIDITEMFORMAT : An item has an invalid format in the license file
              - EINVALIDLICENSE : License is invalid (decryption has failed)
              - EINVALIDLICENSE : The date of the license is invalid.
        "401":
          description: Unauthorized access
      summary: checks the license validity for maintenance date & expiration date
      tags:
        - license
  /api/config/network:
    get:
      description: Return an object with the dns, hostname and a list of configured values for each active network interface
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_config_NetworkConfiguration'
          description: Success
        "401":
          description: Unauthorized access
      summary: Retrieve system network configuration (dns, hostname and interfaces)
      tags:
        - network
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/definitions_config_NetworkConfiguration'
        description: The new network configuration
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  success:
                    example: true
                    type: boolean
                type: object
          description: Success
        "400":
          description: |
            `code` can be :
              - EINVALIDPARAM : Given dhcp can't have ip address, mask or gateway parameters
        "401":
          description: Unauthorized access
      summary: Updates the network configuration
      tags:
        - network
  /api/config/papi:
    get:
      description: SMC Public API feature activation value as a boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_config_PAPIActivation'
          description: Success
        "500":
          description: Internal Server Error
      summary: Retrieve PAPI activation value
      tags:
        - config
    put:
      description: Enable or disable the SMC Public API feature
      requestBody:
        content:
          application/json:
            schema:
              properties:
                isPapiActive:
                  type: boolean
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_config_PAPIActivation'
          description: Success
        "400":
          description: |
            `code` can be : - EINVAL : isPapiActive must be a boolean
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      summary: Enable or disable PAPI feature
      tags:
        - config
  /api/config/sls:
    get:
      description: SMC SLS url value as a string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_config_Sls'
          description: Success
        "500":
          description: Internal Server Error
      summary: Retrieve SLS url value
      tags:
        - config
    put:
      description: Update SLS url value
      requestBody:
        content:
          application/json:
            schema:
              properties:
                slsUrl:
                  type: string
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_config_Sls'
          description: Success
        "400":
          description: |
            EINVALIDPARAM : IP address or FQDN invalid value
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
      summary: Update SLS url
      tags:
        - config
  /api/config/vpncrlrequired:
    get:
      description: SMC VPN CRL REQUIRED value as a boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_config_VpnCrlRequired'
          description: Success
        "500":
          description: Internal Server Error
      summary: Retrieve VPN CRL REQUIRED value
      tags:
        - config
    put:
      description: Update VPN CRL REQUIRED value
      requestBody:
        content:
          application/json:
            schema:
              properties:
                vpnCrlRequired:
                  type: boolean
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_config_VpnCrlRequired'
          description: Success
        "400":
          description: |
            `code` can be : - EINVALIDBOOLEAN : Not a boolean
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
      summary: Update VPN CRL REQUIRED
      tags:
        - config
  /api/customproperties:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_custom-properties_MultipleCustomPropertiesResponse'
          description: Success
        "401":
          description: Unauthorized
      summary: Get all custom properties
      tags:
        - custom properties
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/definitions_custom-properties_CustomPropertyWithoutUuid'
        description: the custom property
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_custom-properties_SingleCustomPropertyResponse'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` may have :
            - EEMPTYNAME : Custom property name is empty
            - EFORBIDDENCHAR : Forbidden char into the custom property name: '...'
        "401":
          description: Unauthorized
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` might be :
            - EDUPLICATE : A custom property named "..." already exists
            - ETOOMANYITEMS : Max custom properties reached (20)
      summary: Create a custom property
      tags:
        - custom properties
  /api/customproperties/{uuid}:
    delete:
      parameters:
        - description: Custom Property UUID
          in: path
          name: uuid
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  success:
                    example: true
                    type: boolean
                type: object
          description: Success
        "401":
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: Custom property was not found
      summary: Remove one custom property
      tags:
        - custom properties
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_custom-properties_SingleCustomPropertyResponse'
          description: Success
        "401":
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: Custom property was not found
      summary: Get one custom property
      tags:
        - custom properties
    parameters:
      - description: Custom Property uuid
        in: path
        name: uuid
        required: true
        schema:
          type: string
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/definitions_custom-properties_CustomPropertyWithoutUuid'
        description: the custom property
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_custom-properties_SingleCustomPropertyResponse'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` may have :
            - EEMPTYNAME : Custom property name is empty
            - EFORBIDDENCHAR : Forbidden char into the custom property name: '...'
        "401":
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` may have :
              - ENOTFOUND : Custom property not found with id "..."
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` might be :
            - EDUPLICATE : A custom property named "..." already exists
      summary: Update one custom property
      tags:
        - custom properties
  /api/definitions/ethernetprotocols:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  result:
                    items:
                      properties:
                        name:
                          description: ethernet protocol name
                          example:
                            - profinet-rt
                          type: string
                      type: object
                    type: array
                  success:
                    example: true
                    type: boolean
                type: object
          description: Success
      summary: get the supported ethernet protocol list for filtering
      tags:
        - misc
  /api/definitions/icmpcodes:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  result:
                    items:
                      properties:
                        data:
                          properties:
                            all:
                              description: available only for "all_icmp_codes" or "all_icmpv6_codes" messages
                              enum:
                                - true
                              type: boolean
                            code:
                              description: icmp message code number
                              type: number
                            type:
                              description: icmp message type number
                              type: number
                          type: object
                        name:
                          example:
                            - network_unreachable
                            - host_unreachable
                            - no_route_to_destination
                          type: string
                        type:
                          description: icmp version the code belongs to
                          enum:
                            - icmp
                            - icmpv6
                          type: string
                      type: object
                    type: array
                  success:
                    example: true
                    type: boolean
                type: object
          description: Success
      summary: get the supported icmp codes for filtering
      tags:
        - misc
  /api/definitions/ipprotocols:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  result:
                    items:
                      properties:
                        name:
                          description: ip protocol name
                          example:
                            - tcp
                            - udp
                            - gre
                          type: string
                      type: object
                    type: array
                  success:
                    example: true
                    type: boolean
                type: object
          description: Success
      summary: get the supported ip protocol list for filtering
      tags:
        - misc
  /api/definitions/protocols:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  result:
                    $ref: '#/components/schemas/definitions_misc_ProtocolList'
                  success:
                    example: true
                    type: boolean
                type: object
          description: Success
      summary: get the supported applicative protocol list for filtering
      tags:
        - misc
  /api/deployment-warnings/editors:
    get:
      description: Get all administrators (editors) that made a modification on deployable configuration, except the user that is making the api request
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  result:
                    items:
                      $ref: '#/components/schemas/definitions_deployment-warnings_ConfigEditors'
                    type: array
                  success:
                    example: true
                    type: boolean
                type: object
          description: Success
        "401":
          description: Unauthorized access
      summary: Get all administrators (editors) that has made a non deployed modification, with 1 exception
      tags:
        - deployment-warnings
  /api/diag:
    get:
      parameters:
        - description: Specifies if sensitive informations must be hidden in report
          in: query
          name: isConfidential
          schema:
            type: boolean
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                description: The report archive in tar.gz format
                format: binary
                type: string
          description: Success
        "401":
          description: Unauthorized access
      summary: Download server diag report
  /api/disclaimer:
    get:
      responses:
        "200":
          content:
            text/html:
              schema:
                format: binary
                type: string
          description: The disclaimer file
        "404":
          description: Disclaimer file does not exist
      summary: Retrieve the disclaimer file
      tags:
        - disclaimer
  /api/export/customproperties:
    get:
      responses:
        "200":
          content:
            text/csv:
              schema:
                description: The custom properties export file in csv format
                type: string
          description: Success
        "401":
          description: Unauthorized access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: The custom properties export file does not exist
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: Internal server error
      summary: Download the export of the custom properties data
      tags:
        - custom properties
        - export
  /api/export/objects:
    get:
      responses:
        "200":
          content:
            text/csv:
              schema:
                description: The object export file in csv format
                type: string
          description: Success
        "401":
          description: Unauthorized access
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: Internal server error
      summary: Download the export of the objects database data
      tags:
        - export
  /api/export/sdwansupervision:
    get:
      parameters:
        - description: An ExtJS filters JSON array
          in: query
          name: filter
          schema:
            example: '[{"property":"name","value":"gatewayA"}]'
            type: string
      responses:
        "200":
          content:
            text/csv:
              schema:
                description: A CSV file with the filtered supervision data
                type: string
          description: Success
        "401":
          description: Unauthorized access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: The supervision export file does not exist
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: Internal server error
      summary: Export of the sdwan supervision data
      tags:
        - export
  /api/export/supervision:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/definitions_export_FilteredIds'
        description: The filtered uuids of the firewalls to export
      responses:
        "200":
          content:
            text/csv:
              schema:
                description: The supervision export file in csv format
                type: string
          description: Success
        "401":
          description: Unauthorized access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: The supervision export file does not exist
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: Internal server error
      summary: Download the export of the supervision data
      tags:
        - export
  /api/export/variables:
    get:
      responses:
        "200":
          content:
            text/csv:
              schema:
                description: The variables export file in csv format
                type: string
          description: Success
        "401":
          description: Unauthorized access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: The variables export file does not exist
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: Internal server error
      summary: Download the export of the variables data
      tags:
        - variables
        - export
  /api/feature-toggling:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  result:
                    description: Feature toggles statuses
                    items:
                      properties:
                        isEnabled:
                          type: boolean
                        name:
                          type: string
                      type: object
                    type: array
                  success:
                    example: true
                    type: boolean
                type: object
          description: Success
      summary: Get statuses of all feature toggles
      tags:
        - feature-toggling
  /api/firewalls:
    get:
      description: Retourne la liste des firewalls et base-stations (à plat)
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_firewalls_FirewallsListResponse'
          description: Réussite
        "401":
          description: Accès non autorisé
      summary: Récupération de la liste des firewalls et base-stations
      tags:
        - firewalls
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/definitions_firewalls_FirewallPropertiesWithoutUuid'
        description: la description du firewall ou la base-station à rajouter
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                properties:
                  result:
                    $ref: '#/components/schemas/definitions_firewalls_FirewallPropertiesWithUuid'
                  success:
                    example: true
                    type: boolean
                type: object
          description: Réussite
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` peut valoir :
            - EREFNOTFOUND : Si un certificat référencé dans refCertificates n"existe pas
            - EINVAL : Si un paramètre obligatoire n"est pas fourni
        "401":
          description: Accès non autorisé
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` peut valoir :
            - EINVALIDVERSIONDR : Si le mode DR est activé et que la version du firewall est < 4.2.0
            - EBASESTATIONDR : Si le mode DR est activé et que l'on créé une base station
        "409":
          description: Firewall or object already exists in database with the same name
      summary: Création d'un nouveau Firewall
      tags:
        - firewalls
  /api/firewalls/{uuid}:
    delete:
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  success:
                    example: true
                    type: boolean
                type: object
          description: Réussite
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` peut valoir :
            - EINVAL : l"UUID est manquant
        "401":
          description: Accès non autorisé
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` peut valoir :
            - ENOTFOUND : Le firewall référencé par son UUID est introuvable
        "423":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` peut valoir :
            - ELOCK : Si le firewall est utilisé (dans une conf VPN, ...)
      summary: Supprime un Firewall
      tags:
        - firewalls
    get:
      description: Return a firewall object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_firewalls_FirewallPropertiesWithStatusInformation'
          description: Success
        "401":
          description: Unauthorized access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` can be:
            - ENOTFOUND : The firewall has not been found
      summary: Retrieving a specific firewall regarding its uuid
      tags:
        - firewalls
    parameters:
      - description: The firewall's uuid
        in: path
        name: uuid
        required: true
        schema:
          type: string
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/definitions_firewalls_FirewallPropertiesWithUuid'
        description: The firewall or base station to modify
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  result:
                    $ref: '#/components/schemas/definitions_firewalls_FirewallPropertiesWithUuid'
                  success:
                    example: true
                    type: boolean
                type: object
          description: Réussite
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` peut valoir :
            - EREFNOTFOUND : Si un certificat référencé dans refCertificates n"existe pas
            - EINVAL : Si un paramètre obligatoire n"est pas fourni
        "401":
          description: Accès non autorisé
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` peut valoir :
            - ENOTFOUND : Le firewall référencé par son UUID est introuvable
        "409":
          description: Firewall or object already exists in database with the same name
      summary: Mise à jour d'un Firewall
      tags:
        - firewalls
  /api/firewalls/{uuid}/ha-info:
    get:
      parameters:
        - description: Firewall UUID
          in: path
          name: uuid
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_firewalls_FirewallHaInfoResponse'
          description: Success
        "401":
          description: Unauthorized
        "404":
          description: Not found
      summary: Get firewall HA information
      tags:
        - firewalls
  /api/firewalls/{uuid}/network/refresh:
    post:
      parameters:
        - description: Firewall UUID
          in: path
          name: uuid
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  success:
                    example: true
                    type: boolean
                type: object
          description: Success
        "404":
          description: Firewall does not exist
        "500":
          description: Internal server error
        "503":
          description: Firewall is not connected
      summary: Force the recover of firewall's network configuration (interfaces and routes)
      tags:
        - firewalls
        - networkInterfaces
        - routing
  /api/firewalls/{uuid}/objects:
    get:
      parameters:
        - description: Firewall UUID
          in: path
          name: uuid
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  result:
                    $ref: '#/components/schemas/definitions_objects_ObjectsListResponse'
                  success:
                    example: true
                    type: boolean
                type: object
          description: Success
        "401":
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: Firewall does not exist
      summary: Fetch objects for a given firewall
      tags:
        - firewalls
  /api/firewalls/{uuid}/package:
    post:
      parameters:
        - description: Firewall UUID
          in: path
          name: uuid
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/definitions_misc_InitializationPackageProperties'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                properties:
                  success:
                    example: true
                    type: boolean
                type: object
          description: Success
        "400":
          description: Bad request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: Firewall does not exist
        "500":
          content:
            application/json:
              schema:
                properties:
                  success:
                    example: true
                    type: boolean
                type: object
          description: Internal server error
      summary: Generate an init package for a given firewall
      tags:
        - firewalls
        - package
  /api/firewalls/{uuid}/qos/refresh:
    post:
      parameters:
        - description: Firewall UUID
          in: path
          name: uuid
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  success:
                    example: true
                    type: boolean
                type: object
          description: Success
        "404":
          description: Firewall does not exist
        "409":
          content:
            application/json:
              schema:
                properties:
                  errors:
                    items:
                      properties:
                        code:
                          enum:
                            - ECONFLICTECQOS
                          type: string
                        ctx:
                          items:
                            properties:
                              name:
                                example: PRIQ_1
                                type: string
                              type:
                                enum:
                                  - queue
                                  - trafficShaper
                                type: string
                              uuid:
                                example: 7937f12e-222f-48a1-bdcc-4af09718de42
                                type: string
                            type: object
                          type: array
                        message:
                          enum:
                            - Cannot recover QoS configuration
                          type: string
                      required:
                        - code
                        - message
                        - ctx
                      type: object
                    type: array
                  success:
                    enum:
                      - false
                    type: boolean
                required:
                  - errors
                  - success
                type: object
          description: ECQOS Conflict
        "500":
          description: Internal server error
        "503":
          description: Firewall is not connected
      summary: Force the recover of Qos configuration and firewall's network configuration (interfaces and routes)
      tags:
        - QoS
        - firewalls
  /api/firewalls/{uuid}/routing:
    get:
      parameters:
        - description: Firewall UUID
          in: path
          name: uuid
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_routing_Routing'
          description: Success
        "401":
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: Firewall does not exist
      summary: Fetch the routing policy for a firewall
      tags:
        - firewalls
        - routing
    post:
      parameters:
        - description: Firewall UUID
          in: path
          name: uuid
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/definitions_routing_RouteAddUpdateBody'
        description: the routing properties
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_routing_Routing'
          description: Success
        "401":
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` can be:
            - EREFUSED : Cannot add a dynamic routing configuration
            - EREFUSED : Cannot add a route on a "Never Seen" firewall
            - EREFUSED : Cannot add a default route
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` can be:
            - ENOTFOUND : The firewall has not been found
      summary: Create a route on the firewall
      tags:
        - firewalls
        - routing
  /api/firewalls/{uuid}/routing/local:
    get:
      parameters:
        - description: Firewall UUID
          in: path
          name: uuid
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  result:
                    properties:
                      isReadOnly:
                        example: true
                        type: boolean
                      objects:
                        items:
                          $ref: '#/components/schemas/definitions_objects_ObjectProperties'
                        type: array
                      routes:
                        items:
                          $ref: '#/components/schemas/definitions_routing_RouteInfo'
                        type: array
                    type: object
                  success:
                    example: true
                    type: boolean
                type: object
          description: Success
        "404":
          description: Firewall does not exist
        "500":
          description: Internal server error
        "503":
          description: Firewall is not connected
      summary: Fetch the firewall's routing configuration, in the case of SMC handling only Read-Only on routing configuration
      tags:
        - firewalls
        - routing
  /api/firewalls/{uuid}/supervision/refresh:
    post:
      parameters:
        - description: Firewall UUID
          in: path
          name: uuid
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  success:
                    example: true
                    type: boolean
                type: object
          description: Success
        "400":
          description: Firewall is not connected
        "404":
          description: Firewall does not exist
        "500":
          description: Internal server error
      summary: Force the update of firewall's informations
      tags:
        - firewalls
  /api/firewalls/{uuid}/topologies:
    get:
      parameters:
        - description: Firewall UUID
          in: path
          name: uuid
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  result:
                    $ref: '#/components/schemas/definitions_topologies_TopologiesListResponse'
                  success:
                    example: true
                    type: boolean
                type: object
          description: Success
        "401":
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: Firewall does not exist
      summary: Fetch VPN topologies for a given firewall
      tags:
        - firewalls
        - topologies
  /api/firewalls/byname/{name}:
    get:
      description: Return a firewall object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_firewalls_FirewallPropertiesWithStatusInformation'
          description: Success
        "401":
          description: Unauthorized access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` peut valoir :
            - ENOTFOUND : The firewall has not been found
      summary: Retrieving a specific firewall regarding its name
      tags:
        - firewalls
    parameters:
      - description: The firewall's name
        in: path
        name: name
        required: true
        schema:
          type: string
  /api/firewalls/dyna-info:
    get:
      parameters:
        - description: timestamp limit for dyna-info retrieval
          in: query
          name: since
          required: true
          schema:
            example: 10
            type: number
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  result:
                    $ref: '#/components/schemas/definitions_firewalls_FirewallDynaInfoResponse'
                  success:
                    example: true
                    type: boolean
                  timestamp:
                    type: string
                type: object
          description: Success
        "401":
          description: Unauthorized
      summary: Get firewall dynamic information
      tags:
        - firewalls
    post:
      requestBody:
        content:
          application/json:
            schema:
              properties:
                fwIds:
                  description: firewalls uuid
                  example:
                    - sns-uuid-1
                    - sns-uuid-2
                  items:
                    type: string
                  type: array
                since:
                  example: 10
                  type: number
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  result:
                    $ref: '#/components/schemas/definitions_firewalls_FirewallDynaInfoResponse'
                  success:
                    example: true
                    type: boolean
                  timestamp:
                    type: string
                type: object
          description: Success
        "401":
          description: Unauthorized
      summary: Get firewall dynamic information
      tags:
        - firewalls
  /api/firewalls/get:
    post:
      description: Retourne la liste des firewalls et base-stations (à plat)
      requestBody:
        content:
          application/json:
            schema:
              properties:
                fwids:
                  example:
                    - sns-uuid-1
                    - sns-uuid-2
                  items:
                    type: string
                  type: array
              type: object
        description: Une liste d'ID de firewalls
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_firewalls_FirewallsListResponse'
          description: Réussite
        "401":
          description: Accès non autorisé
      summary: Récupération de la liste des firewalls et base-stations selon les IDs passés en paramètre
      tags:
        - firewalls
  /api/firewalls/import:
    post:
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                appliances:
                  description: File containing appliances (only Firewalls or only VPN Gateways)
                  format: binary
                  type: string
                editAppliances:
                  description: Set to true to create/edit appliances (not required if generatePackages is enabled)
                  type: boolean
                generatePackages:
                  description: Set to true to generate packages (not required if editAppliances is enabled)
                  type: boolean
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                result:
                  generate:
                    error: 3
                    packOutdir: /tmp/import-firewalls-2020-08-25_13-27-32
                    success: 0
                  import:
                    created: 1
                    error: 4
                    updated: 1
                  logs:
                    - ctx:
                        lineNumber: 2
                      level: warn
                      message: Parent folder is mandatory
                success: true
              schema:
                $ref: '#/components/schemas/definitions_firewalls_FirewallsImportSuccess'
          description: Success
        "201":
          content:
            application/json:
              example:
                result:
                  generate:
                    error: 1
                    packOutdir: /tmp/import-firewalls-2020-08-25_13-27-32
                    success: 5
                  import:
                    created: 6
                    error: 1
                    updated: 0
                  logs:
                    - ctx:
                        lineNumber: 42
                      level: warn
                      message: Non empty string required
                  packagesArchiveUuid: 87b763db-dfcf-485c-bf82-3d80834bbd44
                success: true
              schema:
                $ref: '#/components/schemas/definitions_firewalls_FirewallsImportSuccessWithPackGen'
          description: Success with an uuid that needs to be provided to retrieve/remove generated packages
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: Unauthorized access
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_firewalls_FirewallImportErrorResponse'
          description: Internal server error
      summary: Import an appliances CSV file, create/edit the appliances and/or generate related packages.
      tags:
        - firewalls
  /api/firewalls/import/{uuid}:
    delete:
      parameters:
        - description: The firewall's uuid
          in: path
          name: uuid
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_SuccessResponse'
          description: Deletion success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: Unauthorized access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: Rattachment packages not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_firewalls_FirewallImportErrorResponse'
          description: Internal server error
      summary: Remove generated packages for a given firewalls import
      tags:
        - firewalls
    get:
      description: Download a zip file containing connecting packages from a given import
      parameters:
        - description: The firewall's uuid
          in: path
          name: uuid
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_SuccessResponse'
          description: Download success
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: Unauthorized access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: Connecting packages not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_firewalls_FirewallImportErrorResponse'
          description: Internal server error
      summary: Download generated packages for a given firewalls' import
      tags:
        - firewalls
  /api/firewalls/monitor-route/export:
    get:
      parameters:
        - description: An ExtJS filters JSON array
          in: query
          name: filter
          schema:
            example: '[{"property":"name","value":"gatewayA"}]'
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_firewalls_FirewallMonitorRouteExportResponse'
          description: Success
        "401":
          description: Unauthorized
      summary: Export flat MONITOR ROUTE data
      tags:
        - firewalls
  /api/firewalls/monitor-route/root:
    get:
      parameters:
        - description: The index of the first record to get
          in: query
          name: start
          schema:
            example: 0
            type: number
        - description: The maximum count of records to get
          in: query
          name: limit
          schema:
            example: 10
            type: number
        - description: An ExtJS filters JSON array
          in: query
          name: filter
          schema:
            example: '[{"property":"name","value":"gatewayA"}]'
            type: string
        - description: An ExtJS sorters JSON array
          in: query
          name: sort
          schema:
            example: '[{"property":"name","direction":"ASC"}]'
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_firewalls_FirewallMonitorRouteResponse'
          description: Success
        "401":
          description: Unauthorized
      summary: Get MONITOR ROUTE information
      tags:
        - firewalls
  /api/firewalls/reboot:
    post:
      requestBody:
        content:
          application/json:
            schema:
              properties:
                targets:
                  example:
                    - sns-uuid-1
                    - sns-uuid-2
                  items:
                    type: string
                  type: array
              type: object
        description: Une liste d'ID de firewalls
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  success:
                    example: true
                    type: boolean
                type: object
          description: Success
        "401":
          description: Accès non autorisé
      summary: Redémarrage des firewalls selon les IDs passés en paramètre
      tags:
        - firewalls
  /api/folders:
    get:
      description: Retourne toute l\"arborescence des sous-dossiers en partant du dossier My SMC
      parameters:
        - description: Indicate if output is nested or flat
          in: query
          name: nested
          schema:
            type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_folders_FoldersTreeResponse'
          description: Success with nested param true
        "401":
          description: Accès non autorisé
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_folders_FoldersListResponse'
          description: Success with nested param false or no param
      summary: Récupération de l\"arborescence des dossiers
      tags:
        - folders
    post:
      description: |
        Attention : L"IHM envoie des propriétés ignorées par le serveur : uuid, leaf
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/definitions_folders_FolderPropertiesWithoutUuid'
        description: la description du dossier à rajouter
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                properties:
                  result:
                    $ref: '#/components/schemas/definitions_folders_RawFolderProperties'
                  success:
                    example: true
                    type: boolean
                required:
                  - success
                  - result
                type: object
          description: Réussite
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` peut valoir :
            - EMAXDEPTH : le dossier ne peut pas être créé car il atteint une profondeur supérieure à celle autorisée (4)
            - EINVAL : un mauvais UUID a été renseigné pour un de ses firewalls ou pour le dossier parent
        "401":
          description: Accès non autorisé
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` peut valoir :
            - EPARENTFOLDERNOTFOUND : le dossier parent n"est pas trouvé
        "409":
          description: Folder already exists in database with the same name
      summary: Ajoute un nouveau sous-dossier
      tags:
        - folders
  /api/folders/{uuid}:
    delete:
      parameters:
        - description: Folder uuid where firewalls and folders will be moved
          in: query
          name: destinationFolder
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  result:
                    example:
                      uuid: deleteted-folder-uuid
                    type: object
                  success:
                    example: true
                    type: boolean
                required:
                  - success
                type: object
          description: Réussite
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` peut valoir :
            - EMAXDEPTH : le dossier de destination ne peut pas être utilisé car il génère un arbre dont la profondeur est supérieure à celle autorisée (4)
        "401":
          description: Accès non autorisé
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` peut valoir :
            - ENOTFOUND : le dossier à supprimer n"est pas trouvé
            - EDESTFOLDERNOTFOUND : le dossier de destination des folders enfants et firewalls n"est pas trouvé
      summary: Delete a folder
      tags:
        - folders
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  result:
                    $ref: '#/components/schemas/definitions_folders_RawFolderProperties'
                  success:
                    example: true
                    type: boolean
                required:
                  - success
                  - result
                type: object
          description: Success
        "401":
          description: Unauthorized access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` can be:
            - ENOTFOUND : The folder has not been found
      summary: Retrieving a specific folder regarding its uuid
      tags:
        - folders
    parameters:
      - description: the folder"s uuid
        in: path
        name: uuid
        required: true
        schema:
          type: string
    put:
      description: |
        Attention : L"IHM envoie des propriétés ignorées par le serveur : parentId, leaf, children, subFolders, rules
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/definitions_folders_FolderProperties'
        description: Folder description to edit
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  result:
                    $ref: '#/components/schemas/definitions_folders_RawFolderProperties'
                  success:
                    example: true
                    type: boolean
                required:
                  - success
                  - result
                type: object
          description: Réussite
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` peut valoir :
            - EMAXDEPTH : le dossier ne peut pas être créé car il atteint une profondeur supérieure à celle autorisée (4)
            #- EINVAL : un mauvais UUID a été renseigné pour le dossier à éditer, pour un de ses firewalls ou pour le dossier parent, ou si on tente de déplacer e dossier dans un de ses propres descendants
            - EPROPFORBIDDEN : la liste des sous-dossiers a changé
        "401":
          description: Accès non autorisé
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` peut valoir :
            - ENOTFOUND : le dossier n"est pas trouvé
            - EPARENTFOLDERNOTFOUND : le dossier parent n"est pas trouvé
            - EORPHANS : l"opération va produire des firewalls orphelins
      summary: Edit a folder
      tags:
        - folders
  /api/folders/accountFolders:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_folders_AccountFoldersProps'
          description: Success
        "401":
          description: |
            `code` may have:
            - Unauthorized: if not logged in
      summary: Get folders uuids linked to the user account of the current session
      tags:
        - folders
  /api/folders/byname/{name}:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  result:
                    $ref: '#/components/schemas/definitions_folders_RawFolderProperties'
                  success:
                    example: true
                    type: boolean
                required:
                  - success
                  - result
                type: object
          description: Success
        "401":
          description: Unauthorized access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` can be:
            - ENOTFOUND : The folder has not been found
      summary: Retrieving a specific folder regarding its name
      tags:
        - folders
    parameters:
      - description: the folder"s name
        in: path
        name: name
        required: true
        schema:
          type: string
  /api/keepalive:
    get:
      responses:
        "200":
          description: Success
        "401":
          description: Unauthorized access
      summary: Keep connection to SMC server alive
  /api/ldap:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_ldap_ldapResponse'
          description: Success
        "401":
          description: Unauthorized
      summary: Get Ldap server configuration
      tags:
        - ldap
    post:
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/definitions_ldap_ldap'
        description: Ldap configuration
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_ldap_ldapResponse'
          description: Success
        "401":
          description: Unauthorized
        "404":
          description: |
            `code` might be :
            -  EINVALIDPARAM : Invalid LDAP configuration
        "500":
          description: |
            "internal server error"
      summary: Update Ldap server configuration
      tags:
        - ldap
  /api/lock:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_lock_LockResponse'
          description: success
        "401":
          description: Unauthorized
      summary: Acquire lock
      tags:
        - lock
  /api/logs/audit/last:
    get:
      description: Return an array of log objects
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_auditlogs_LogsResponse'
          description: success
        "401":
          description: Unauthorized
      summary: Return the last audit log lines
      tags:
        - logs
  /api/logs/last:
    get:
      description: Return an array of log objects
      parameters:
        - description: Minimum log level name
          in: query
          name: minlevel
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_logs_LogsResponse'
          description: success
        "401":
          description: Unauthorized
      summary: Return the last log lines
      tags:
        - logs
  /api/message-boxes:
    get:
      description: Retrieve the messages contained by all SMC"s message boxes
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  properties:
                    body:
                      description: The message"s body
                      type: string
                    date:
                      description: Message\"s datetime (ISO 8601 format, \"YYYY-MM-DD\")
                      type: string
                    fwid:
                      description: The UUID of the firewall concerned by this message
                      type: string
                    sendAttemptsCount:
                      description: Send attempts count
                      type: number
                    type:
                      description: Message"s type
                      type: string
                    user:
                      description: The user responsible of the creation of this message
                      type: string
                  type: object
                type: array
          description: success
        "401":
          description: Unauthorized
      summary: Retrieve the messages contained by all SMC"s message boxes
      tags:
        - message-boxes
  /api/network/interfaces:
    get:
      parameters:
        - description: Firewall UUID
          in: query
          name: fwid
          schema:
            type: string
        - description: The interface types of the records
          in: query
          name: types
          schema:
            example: '["VTI", "Ethernet"]'
            type: string
        - description: The index of the first record to get
          in: query
          name: start
          schema:
            example: 0
            type: number
        - description: The maximum count of records to get
          in: query
          name: limit
          schema:
            example: 10
            type: number
        - description: An ExtJS filters JSON array
          in: query
          name: filter
          schema:
            example: '[{"property":"any","value":"VTI_"}]'
            type: string
        - description: An ExtJS sorters JSON array
          in: query
          name: sort
          schema:
            example: '[{"property":"name","direction":"ASC"}]'
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_network-interfaces_NetworkInterfacesListResponse'
          description: Success
        "401":
          description: Unauthorized
      summary: Fetch network interfaces
      tags:
        - networkInterfaces
    post:
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/definitions_network-interfaces_VlanInterfaceProperties'
                - $ref: '#/components/schemas/definitions_network-interfaces_AggInterfaceProperties'
                - $ref: '#/components/schemas/definitions_network-interfaces_BridgeInterfaceProperties'
        description: the network interface properties
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/definitions_network-interfaces_VlanInterfaceProperties'
                  - $ref: '#/components/schemas/definitions_network-interfaces_AggInterfaceProperties'
                  - $ref: '#/components/schemas/definitions_network-interfaces_BridgeInterfaceProperties'
          description: Success
        "401":
          description: Unauthorized
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` might be :
            - EDUPLICATE : A network interface with the same name for the same firewall already exists
      summary: Create one network interface
      tags:
        - networkInterfaces
  /api/network/interfaces/{uuid}:
    delete:
      parameters:
        - description: network interface UUID
          in: path
          name: uuid
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  result:
                    oneOf:
                      - $ref: '#/components/schemas/definitions_network-interfaces_VlanInterfaceProperties'
                      - $ref: '#/components/schemas/definitions_network-interfaces_AggInterfaceProperties'
                      - $ref: '#/components/schemas/definitions_network-interfaces_BridgeInterfaceProperties'
                      - $ref: '#/components/schemas/definitions_network-interfaces_VirtualInterfaceProperties'
                    type: object
                  success:
                    type: boolean
                type: object
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` may have :
            - EINVAL : Ethernet interface "interface-name" cannot be deleted`
        "401":
          description: Unauthorized
        "403":
          description: |
            `code` may have :
            - ENETWORKUNHANDLED : Unable to update a network interface for a firewall with the network configuration unhandled.`
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: NetworkInterface was not found
        "423":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` might be :
            - ELOCK : if the network interface is being used
      summary: Remove a network interface of any type
      tags:
        - networkInterfaces
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/definitions_network-interfaces_EthernetInterfaceProperties'
                  - $ref: '#/components/schemas/definitions_network-interfaces_VlanInterfaceProperties'
                  - $ref: '#/components/schemas/definitions_network-interfaces_AggInterfaceProperties'
                  - $ref: '#/components/schemas/definitions_network-interfaces_BridgeInterfaceProperties'
          description: Success
        "401":
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: NetworkInterface was not found
      summary: Fetch one network interface of any type
      tags:
        - networkInterfaces
    parameters:
      - description: NetworkInterface uuid
        in: path
        name: uuid
        required: true
        schema:
          type: string
    put:
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/definitions_network-interfaces_EthernetInterfaceProperties'
                - $ref: '#/components/schemas/definitions_network-interfaces_VlanInterfaceProperties'
                - $ref: '#/components/schemas/definitions_network-interfaces_AggInterfaceProperties'
                - $ref: '#/components/schemas/definitions_network-interfaces_BridgeInterfaceProperties'
        description: the network interface properties
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/definitions_network-interfaces_EthernetInterfaceProperties'
                  - $ref: '#/components/schemas/definitions_network-interfaces_VlanInterfaceProperties'
                  - $ref: '#/components/schemas/definitions_network-interfaces_AggInterfaceProperties'
                  - $ref: '#/components/schemas/definitions_network-interfaces_BridgeInterfaceProperties'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` may have :
            - EINVAL : Network Interface cannot be updated with a new firewall id.
        "401":
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: NetworkInterface was not found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` might be :
            - EDUPLICATE : A network interface with the same name for the same firewall already exists
        "423":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` might be :
            - ELOCK : if the network interface is being used
      summary: Update one network interface of any type
      tags:
        - networkInterfaces
  /api/network/interfaces/{uuid}/members:
    parameters:
      - description: NetworkInterface uuid
        in: path
        name: uuid
        required: true
        schema:
          type: string
    put:
      requestBody:
        content:
          application/json:
            schema:
              properties:
                members:
                  description: list of the interface's members
                  items:
                    description: NetworkInterface uuid
                    example: 75532250-c878-42f1-8871-bafa68e944d4
                    type: string
                  type: array
              type: object
        description: the network interface properties
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  membersAdded:
                    description: list of the members uuid added to the parent interface
                    items:
                      description: NetworkInterface uuid
                      example: 75532250-c878-42f1-8871-bafa68e944d4
                      type: string
                    type: array
                  membersRemoved:
                    description: list of the members uuid removed from the parent interface
                    items:
                      description: NetworkInterface uuid
                      example: 75532250-c878-42f1-8871-bafa68e944d4
                      type: string
                    type: array
                type: object
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` may have :
            - EINVAL : Network Interface member cannot be in a network interface from a different firewall.
            - EINVAL : Member must be an aggregate, a VLAN or an ethernet interface for a bridge.
            - EINVAL : Member must be an ethernet interface for an aggregate.
        "401":
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: NetworkInterface was not found
        "423":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` might be :
            - ELOCK : if the network interface is being used
      summary: Update the members of a bridge or aggregate
      tags:
        - networkInterfaces
  /api/network/interfaces/bulk:
    delete:
      requestBody:
        content:
          application/json:
            schema:
              items:
                oneOf:
                  - $ref: '#/components/schemas/definitions_network-interfaces_VlanInterfaceProperties'
                  - $ref: '#/components/schemas/definitions_network-interfaces_AggInterfaceProperties'
                  - $ref: '#/components/schemas/definitions_network-interfaces_BridgeInterfaceProperties'
                  - $ref: '#/components/schemas/definitions_network-interfaces_VirtualInterfaceProperties'
              type: array
        description: the network interfaces to delete
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  result:
                    items:
                      oneOf:
                        - $ref: '#/components/schemas/definitions_network-interfaces_VlanInterfaceProperties'
                        - $ref: '#/components/schemas/definitions_network-interfaces_AggInterfaceProperties'
                        - $ref: '#/components/schemas/definitions_network-interfaces_BridgeInterfaceProperties'
                        - $ref: '#/components/schemas/definitions_network-interfaces_VirtualInterfaceProperties'
                    type: array
                  success:
                    type: boolean
                type: object
          description: Success
        "400":
          description: |
            `code` may have :
            - EINVAL : Ethernet interface "interface-name" cannot be deleted`
        "401":
          description: Unauthorized
        "404":
          description: NetworkInterface was not found
      summary: Delete multiple network interfaces of any types
      tags:
        - networkInterfaces
  /api/network/interfaces/root:
    get:
      parameters:
        - description: Firewall UUID
          in: query
          name: fwid
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_network-interfaces_NetworkInterfacesTree'
          description: Success
        "401":
          description: Unauthorized
      summary: Fetch all network interfaces as tree or for a given firewall
      tags:
        - networkInterfaces
  /api/nsrpc/archive:
    get:
      responses:
        "200":
          content:
            application/x-compressed-tar:
              schema:
                format: binary
                type: string
          description: A tar.gz file containing output.log and generated.txt within folders for each firewalls
      summary: Return an archive containing all firewalls NSRPC logs
      tags:
        - nsrpc
  /api/nsrpc/archive/{fwid}:
    get:
      parameters:
        - description: Firewall\'s UUID
          in: path
          name: fwid
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/x-compressed-tar:
              schema:
                format: binary
                type: string
          description: A tar.gz file containing output.log and generated.txt for this firewall
        "400":
          description: |
            `code` can be :
              - EINVALIDPARAM when fwid does not correspond to a firewall
      summary: Return an archive containing specified firewall's NSRPC logs
      tags:
        - nsrpc
  /api/nsrpc/attach:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_nsrpc_NsrpcAttachmentResponse'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` can be :
             - ENOENT : File is missing
      summary: Get all files attached to a NSRPC script
      tags:
        - nsrpc
    post:
      description: |
        It's possible to attach many file as long at they don't exceed 100 MIB
        If attached file already exists it'll be replaced
      requestBody:
        content:
          multipart/form-data:
            schema:
              format: binary
              type: string
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_nsrpc_NsrpcResponse'
          description: Success
        "400":
          description: |
            `code` can be :
             - EFILEMISSING : When nsrpcAttachments is missing
        "413":
          description: |
            Occurs when the uploaded file exceed 100 MIB
            `code` can be:
             - EFILETOOBIG
        "423":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            Occurs when another file (NSRPC script or attachment) is being uplodaded
            `code` can be :
             - ELOCK
      summary: Attach a file needed to execute a NSRPC script
      tags:
        - nsrpc
  /api/nsrpc/csv/{scriptname}:
    post:
      description: |
        It's not possible to attach a file if a NSRPC script hasn't been posted before by calling /nsrpc/script API
        If attached csv file already exists it'll be replaced
      parameters:
        - description: CLI script to execute
          in: path
          name: scriptname
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                csvFile:
                  format: binary
                  type: string
                target:
                  description: Firewall's UUIDs on which to run the script, if not defined, use UUIDs defined in the CSV file
                  items:
                    type: string
                  type: array
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  success:
                    example: true
                    type: boolean
                type: object
          description: success
        "400":
          description: |
            `code` can be :
             - EFILEMISSING : When NSRPC script or csvFile is missing
             - EFILEEMPTY : The csvFile is empty
             - EINVALIDCSV : When the CSV is not in the right format or is empty
        "413":
          description: |
            Occurs when the uploaded file exceed SNS_CLI_CSV_MAX_UPLOAD_SIZE
            `code` can be :
             - EFILETOOBIG
        "423":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            Occurs when another file (NSRPC script or attachment) is being uploaded
            `code` can be :
             - ELOCK
      summary: Execute a previously uploaded NSRPC script with a CSV file
      tags:
        - nsrpc
  /api/nsrpc/csv/dry-run/{scriptname}:
    post:
      parameters:
        - description: CLI script to execute
          in: path
          name: scriptname
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                csvFile:
                  format: binary
                  type: string
                target:
                  description: Firewall's UUIDs on which to run the script, if not defined, use UUIDs defined in the CSV file
                  items:
                    type: string
                  type: array
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  result:
                    items:
                      properties:
                        content:
                          description: Nsrpc script content with CSV data applied for this firewall
                          type: string
                        fwid:
                          description: Firewall's UUID
                          type: string
                        fwname:
                          description: Firewall's name
                          type: string
                      type: object
                    type: array
                  success:
                    example: true
                    type: boolean
                type: object
          description: Success
        "400":
          description: |
            `code` can be :
             - EFILEMISSING : When NSRPC script or csvFile is missing
             - EFILEEMPTY : The csvFile is empty
             - EINVALIDCSV : When the CSV is not in the right format or is empty
        "413":
          description: |
            Occurs when the uploaded file exceed SNS_CLI_CSV_MAX_UPLOAD_SIZE
            `code` can be :
             - EFILETOOBIG
        "423":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            Occurs when another file (NSRPC script or attachment) is being uploaded
            `code` can be :
             - ELOCK
      summary: Visualize preprocessed script with CSV data for each firewalls
      tags:
        - nsrpc
  /api/nsrpc/dry-run/{scriptname}:
    post:
      parameters:
        - description: CLI script to execute
          in: path
          name: scriptname
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/definitions_nsrpc_NsrpcExecuteBody'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  result:
                    items:
                      properties:
                        content:
                          description: Nsrpc script content with CSV data applied for this firewall
                          type: string
                        fwid:
                          description: Firewall\'s UUID
                          type: string
                        fwname:
                          description: Firewall\'s name
                          type: string
                      type: object
                    type: array
                type: object
          description: Success
        "404":
          description: Script not found
      summary: Visualize preprocessed script for each given firewalls
      tags:
        - nsrpc
  /api/nsrpc/execute/{scriptname}:
    post:
      parameters:
        - description: CLI script to execute
          in: path
          name: scriptname
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/definitions_nsrpc_NsrpcExecuteBody'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  success:
                    enum:
                      - true
                    type: boolean
                type: object
          description: success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` can be :
             - EMISSINGSCRIPT when no nsrpcScript has been previously uploaded
             - EMISSINGFIREWALL when no target is given
             - EUNKNOWNFW when one of the given target does not correspond to an existing Firewall's UUID
        "423":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            Occurs when another NSRPC script execution or a deployment is ongoing or postponed
            `code` can be :
             - ELOCK
      summary: Execute a previously uploaded Nsrpc Script on specified Firewalls
      tags:
        - nsrpc
  /api/nsrpc/log/{fwid}:
    get:
      parameters:
        - description: Firewall's UUID
          in: path
          name: fwid
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  result:
                    properties:
                      content:
                        description: NSRPC execution's logs
                        type: string
                    type: object
                  success:
                    enum:
                      - true
                    type: boolean
                type: object
          description: success
        "400":
          description: |
            `code` can be :
              - EINVALIDPARAM when fwid does not correspond to a firewall
      summary: Return NSRPC execution's logs for a given firewall
      tags:
        - nsrpc
  /api/nsrpc/pending:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  result:
                    properties:
                      schedule:
                        description: (optional) The scheduled date
                        example: "2037-12-31T00:00:00Z"
                        type: string
                      script:
                        description: script's name
                        type: string
                      target:
                        description: Firewalls UUIDs on which a script is pending
                        items:
                          type: string
                        type: array
                      user:
                        description: the login of the user who scheduled the script
                        type: string
                    type: object
                  success:
                    enum:
                      - true
                    type: boolean
                type: object
          description: success
        "204":
          description: No pending script
      summary: Return the pending Nsrpc script
      tags:
        - nsrpc
  /api/nsrpc/pending/cancel:
    post:
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  success:
                    enum:
                      - true
                    type: boolean
                type: object
          description: success
        "404":
          description: |
            `code` might be :
            - ENOPENDING : No script is pending
      summary: Cancel the pending Nsrpc Script
      tags:
        - nsrpc
  /api/nsrpc/progress:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_nsrpc_NsrpcStateExecutionResponse'
          description: success
      summary: Current state of NSRPC script execution
      tags:
        - nsrpc
  /api/nsrpc/schedule/{scriptname}:
    put:
      parameters:
        - description: CLI script to execute
          in: path
          name: scriptname
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/definitions_nsrpc_NsrpcScheduleBody'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  success:
                    enum:
                      - true
                    type: boolean
                type: object
          description: success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` can be :
             - EMISSINGSCRIPT when no nsrpcScript has been previously uploaded
             - EMISSINGFIREWALL when no target is given
             - EFIREWALLNOTFOUND when one of the given target does not correspond to an existing Firewall's UUID
             - EINVALIDDATE invalid date
        "423":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            Occurs when another NSRPC script execution or a deployment is ongoing
            Or when some firewall are not connected
            `code` can be :
             - ELOCK
      summary: Schedule a previously uploaded Nsrpc Script on specified Firewalls
      tags:
        - nsrpc
  /api/nsrpc/script:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_nsrpc_NsrpcListResponse'
          description: success
      summary: Script files list uploaded on SMC
      tags:
        - nsrpc
  /api/nsrpc/script/{scriptname}:
    post:
      parameters:
        - description: CLI script to execute
          in: path
          name: scriptname
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                force:
                  description: set to true to overwrite file with the same on the server
                  type: boolean
                nsrpcScript:
                  description: Must have a .script extension and a proper caracter encoding
                  format: binary
                  type: string
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_nsrpc_NsrpcResponse'
          description: success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` can be :
              - EUNKNOWNENCODING : The NSRPC script is in a unknown encoding
              - EBADEXTNAME : The NSRPC script doesn't have a .script extension
              - EFILEEMPTY : The NSRPC script is empty
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            Occurs when a script already exists on the server and the force option is not set
            `code` can be :
            - `EDUPLICATE`
        "413":
          description: |
            Occurs when the uploaded file exceed SNS_CLI_SCRIPT_MAX_UPLOAD_SIZE
            `code` can be :
             - EFILETOOBIG
        "423":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            Occurs when another NSRPC script is already being uploaded
            `code` can be :
             - ELOCK
      summary: Send a script to prepare its execution on a firewall.
      tags:
        - nsrpc
    delete:
      parameters:
        - description: CLI script to delete
          in: path
          name: scriptname
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_nsrpc_NsrpcDeleteResponse'
          description: success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            Occurs when the requested scriptname to delete has not been previously uploaded
            `code` can be :
              - EMISSINGSCRIPT
      summary: Delete an uploaded nsrpc file from SMC
      tags:
        - nsrpc
    get:
      parameters:
        - description: CLI script to execute
          in: path
          name: scriptname
          required: true
          schema:
            type: string
        - description: if passed, the response will be the raw asked script file
          in: query
          name: download
          schema:
            type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  result:
                    properties:
                      content:
                        description: The nsrpcScript content
                        type: string
                    type: object
                  success:
                    enum:
                      - true
                    type: boolean
                type: object
          description: success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` can be :
              - EMISSINGSCRIPT when no nsrpcScript has been previously uploaded
      summary: Return the previously uploaded nsrpcScript content
      tags:
        - cli
        - nsrpc
  /api/nsrpc/script/{scriptname}/{fwid}:
    get:
      parameters:
        - description: CLI script to execute
          in: path
          name: scriptname
          required: true
          schema:
            type: string
        - description: Firewall's UUID
          in: path
          name: fwid
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_nsrpc_NsrpcScriptContentResponse'
          description: success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` can be :
              - EMISSINGSCRIPT when no nsrpcScript has been previously uploaded
              - EINVALIDPARAM when fwid does not correspond to a firewall
      summary: Return the previously uploaded nsrpcScript content preprocessed for a specified firewall
      tags:
        - nsrpc
  /api/nsrpc/usebackupscript:
    post:
      requestBody:
        content:
          application/json:
            schema:
              properties:
                password:
                  description: Password that will be use to encrypt the SNS backup
                  example: Iw76$k6!o#LtLmbs
                  type: string
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_nsrpc_NsrpcResponse'
          description: success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` can be :
              - EUNKNOWNENCODING : The NSRPC script is in a unknown encoding
              - EBADEXTNAME : The NSRPC script doesn't have a .script extension
              - EFILEEMPTY : The NSRPC script is empty
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            Occurs when a script already exists on the server and the force option is not set
            `code` can be :
            - `EDUPLICATE`
        "413":
          description: |
            Occurs when the uploaded file exceed SNS_CLI_SCRIPT_MAX_UPLOAD_SIZE
            `code` can be :
             - EFILETOOBIG
        "423":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            Occurs when another NSRPC script is already being uploaded
            `code` can be :
             - ELOCK
      summary: Prepare the manual backup script to be execute on a firewall.
      tags:
        - nsrpc
  /api/objectdb:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_objects_ObjectsListResponse'
          description: Success
        "401":
          description: Unauthorized access
      summary: Retrieve list of objects
      tags:
        - objects
    post:
      description: Only one parameter can be provided. Return the created object.
      requestBody:
        content:
          application/json:
            example:
              _type: fqdn
              comment: created from swagger API
              deployment:
                mode: DEFAULT
              ipv4Address: 1.2.3.4
              name: fqdnObjExample
            schema:
              $ref: '#/components/schemas/definitions_objects_ObjectsProperties'
        description: object data to add
      responses:
        "201":
          content:
            application/json:
              schema:
                properties:
                  result:
                    $ref: '#/components/schemas/definitions_objects_ObjectProperties'
                  success:
                    example: true
                    type: boolean
                type: object
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` can be :
            - EMISSINGIP: Object need at least one ip provided
            - EMISSINGIPWITHPREFIX: Object need at least one ip with prefix provided
            - EINVALIDIPV4: The ipV4 provided is invalid
            - EINVALIDIPV6: The ipV6 provided is invalid
            - EINVALIDCIDR: Invalid IP with CIDR
            - EINVALIDRESOLUTIONTYPE: Invalid resolution type (Host object)
            - EINVALIDOBJECTTYPE: Invalid group type
            - EREFCOMPAT: Group members are incompatible
            - EREFDUPLICATE: Duplicate in group members
            - EINCOMPLETERANGE: Incomplete range (Ip-Range)
            - EINVALIDRANGE: Invalid range (Ip-range)
            - EINVALIDPORT: Invalid Port
            - EINVALIDINTEGER: Invalid integer (protocol number or router custom gateway threshold)
            - EINVALIDBOOLEAN: Invalid boolean (router activate all backups)
            - EINVALIDARRAY: Invalid array (router principals)
            - EINVALIDNONEMPTYARRAY: Empty array (router principals)
            - EMISSINGTIME: Missing time data
            - EINVALIDTIMESLOT: Invalid timeslot (time)
            - EINVALIDWEEKDAY: Invalid weekday (time)
            - EINVALIDYEARDAY: Invalid yearday (time)
            - EINVALIDPERIOD: Invalid period (time)
        "401":
          description: Accès non autorisé
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` can be :
            - EHANDLERNOTFOUND: Unknown object type
        "409":
          description: Object with same name already exists within its namespace (EDUPLICATE)
      summary: Create a new object
      tags:
        - objects
  /api/objectdb/{uuid}:
    delete:
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  success:
                    example: true
                    type: boolean
                type: object
          description: Success
        "401":
          description: Unauthorized access
        "403":
          description: Object is read-only (EREADONLY)
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` can be :
            - ENOTFOUND : Object not found
        "423":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` can be :
            - ELOCK : If the object is used somewhere (group, topology, rule)
      summary: Delete an object
      tags:
        - objects
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  result:
                    $ref: '#/components/schemas/definitions_objects_ObjectProperties'
                  success:
                    example: true
                    type: boolean
                type: object
          description: Success
        "401":
          description: Unauthorized access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` can be :
            - EOBJECTNOTFOUND: Unabled to find object
      summary: Get a specific object
      tags:
        - objects
    parameters:
      - description: Object uuid
        in: path
        name: uuid
        required: true
        schema:
          type: string
    put:
      description: Only one parameter can be provided. Return the updated object.
      requestBody:
        content:
          application/json:
            example:
              _type: fqdn
              comment: updated from Swagger
              deployment:
                mode: DEFAULT
              ipv4Address: 5.6.7.8
              name: fqdnObjExample
            schema:
              $ref: '#/components/schemas/definitions_objects_ObjectProperties'
        description: object data to add
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  result:
                    $ref: '#/components/schemas/definitions_objects_ObjectProperties'
                  success:
                    example: true
                    type: boolean
                type: object
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` can be :
            - EMISSINGIP: Object need at least one ip provided
            - EMISSINGIPWITHPREFIX: Object need at least one ip with prefix provided
            - EINVALIDIPV4: The ipV4 provided is invalid
            - EINVALIDIPV6: The ipV6 provided is invalid
            - EINVALIDCIDR: Invalid IP with CIDR
            - EINVALIDRESOLUTIONTYPE: Invalid resolution type (Host object)
            - EINVALIDOBJECTTYPE: Invalid group type
            - EREFCOMPAT: Group members are incompatible
            - EREFDUPLICATE: Duplicate in group members
            - EREFSELFINCLUSION: Group includes itself
            - EINVALIDGROUPWITHRESERVEDOBJECTINTOPO: Group is used in a topology and cannot contain a reserved object
            - EINCOMPLETERANGE: Incomplete range (Ip-Range)
            - EINVALIDRANGE: Invalid range (Ip-range)
            - EINVALIDPORT: Invalid Port
            - EINVALIDINTEGER: Invalid integer (protocol number or router custom gateway threshold)
            - EINVALIDBOOLEAN: Invalid boolean (router activate all backups)
            - EINVALIDARRAY: Invalid array (router principals)
            - EINVALIDNONEMPTYARRAY: Empty array (router principals)
            - EMISSINGTIME: Missing time data
            - EINVALIDTIMESLOT: Invalid timeslot (time)
            - EINVALIDWEEKDAY: Invalid weekday (time)
            - EINVALIDYEARDAY: Invalid yearday (time)
            - EINVALIDPERIOD: Invalid period (time)
            - EINVALIDLATENCY: Invalid latency (sla)
            - EINVALIDJITTER: Invalid jitter (sla)
            - EINVALIDLOSS: Invalid loss (sla)
            - EINVALIDUNREACHABLE: Invalid unreachable (sla)
        "401":
          description: Unauthorized access
        "403":
          description: Object is read-only (EREADONLY)
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` can be :
            - EHANDLERNOTFOUND: Unknown object type
            - ENOTFOUND: Unabled to find object
        "409":
          description: Object with same name already exists within its namespace (EDUPLICATE)
      summary: Object update
      tags:
        - objects
  /api/objectdb/{uuid}/isInScope:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  result:
                    properties:
                      isInFolderAdminScope:
                        example: true
                        type: boolean
                    type: object
                  success:
                    example: true
                    type: boolean
                type: object
          description: Success
        "401":
          description: Unauthorized access
      summary: Returns a result with isInFolderAdminScope equal to true if the object is in folder admin scope
      tags:
        - objects
    parameters:
      - description: Object uuid
        in: path
        name: uuid
        required: true
        schema:
          type: string
  /api/objectdb/import:
    post:
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                filters:
                  description: Import only the given type (e.g host, fqdn, range...) of the objects described inside the file
                  example:
                    - time
                    - network
                  type: string
                objects:
                  description: A raw CSV file containing objects
                  format: binary
                  type: string
                update:
                  description: Update existing objects
                  type: boolean
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_misc_ImportResponse'
          description: Import response
        "401":
          description: Unauthorized
      summary: Import some objects in a firewall
      tags:
        - objects
  /api/objectdb/type/{type}:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_objects_ObjectsListResponse'
          description: Success
        "401":
          description: Unauthorized access
      summary: Retrieve list of objects by type
      tags:
        - objects
    parameters:
      - description: Object type
        in: path
        name: type
        required: true
        schema:
          type: string
  /api/qos/ifaces-assignations:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_ifaces-assignations_MultipleIfacesAssignationsResponse'
          description: Success
        "401":
          content:
            application/json:
              schema:
                properties:
                  success:
                    example: false
                    type: boolean
                required:
                  - success
                type: object
          description: Unauthorized
      summary: Get all the ifaces assignations
      tags:
        - QoS
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/definitions_ifaces-assignations_IfaceAssignation'
        description: the iface assignation properties
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_ifaces-assignations_SingleIfaceAssignationResponse'
          description: Success
        "400":
          content:
            application/json:
              schema:
                properties:
                  errors:
                    items:
                      properties:
                        code:
                          example: EWRONGIFACETYPE
                          type: string
                        message:
                          example: ""
                          type: string
                      required:
                        - code
                      type: object
                    type: array
                  success:
                    example: false
                    type: boolean
                required:
                  - success
                  - errors
                type: object
          description: |
            `code` may have :
            - EUNKNOWNBODYPARAMS
            - EINVAL
            - EWRONGIFACETYPE
        "401":
          content:
            application/json:
              schema:
                properties:
                  success:
                    example: false
                    type: boolean
                required:
                  - success
                type: object
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` may have :
            - ENETWORKUNHANDLED : Unable to update a iface assignation for a firewall with the network configuration unhandled.`
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` can be :
            - ENOTFOUND: Unabled to find iface assignation
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` can be :
              - EDUPLICATE : Iface assignation already exists in database for this iface
      summary: Create an iface assignation
      tags:
        - QoS
  /api/qos/ifaces-assignations/{uuid}:
    delete:
      parameters:
        - description: Iface assignation UUID
          in: path
          name: uuid
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
        "401":
          content:
            application/json:
              schema:
                properties:
                  success:
                    example: false
                    type: boolean
                required:
                  - success
                type: object
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` may have :
            - ENETWORKUNHANDLED : Unable to update a iface assignation for a firewall with the network configuration unhandled.`
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` can be :
            - ENOTFOUND: Unabled to find iface assignation
      summary: Remove one iface assignation
      tags:
        - QoS
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_ifaces-assignations_SingleIfaceAssignationResponse'
          description: Success
        "401":
          content:
            application/json:
              schema:
                properties:
                  success:
                    example: false
                    type: boolean
                required:
                  - success
                type: object
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` can be :
            - ENOTFOUND: Unabled to find iface assignation
      summary: Get one iface assignation
      tags:
        - QoS
    parameters:
      - description: Iface assignation uuid
        in: path
        name: uuid
        required: true
        schema:
          type: string
    put:
      parameters:
        - description: Iface assignation uuid
          in: path
          name: uuid
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/definitions_ifaces-assignations_IfaceAssignationWithoutIface'
        description: the iface assignation properties
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_ifaces-assignations_SingleIfaceAssignationResponse'
          description: Success
        "400":
          content:
            application/json:
              schema:
                properties:
                  errors:
                    items:
                      properties:
                        code:
                          example: EINVAL
                          type: string
                        message:
                          example: ""
                          type: string
                      required:
                        - code
                      type: object
                    type: array
                  success:
                    example: false
                    type: boolean
                required:
                  - success
                  - errors
                type: object
          description: |
            `code` may have :
            - EUNKNOWNBODYPARAMS
            - EINVAL
        "401":
          content:
            application/json:
              schema:
                properties:
                  success:
                    example: false
                    type: boolean
                required:
                  - success
                type: object
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` may have :
            - ENETWORKUNHANDLED : Unable to update a iface assignation for a firewall with the network configuration unhandled.`
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` can be :
            - ENOTFOUND: Unabled to find iface assignation
      tags:
        - QoS
  /api/qos/ifaces-assignations/bulk:
    delete:
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/definitions_ifaces-assignations_IfaceAssignation'
              type: array
        description: The list of ifaces assignations to delete
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  success:
                    example: true
                    type: boolean
                type: object
          description: Success
        "401":
          content:
            application/json:
              schema:
                properties:
                  success:
                    example: false
                    type: boolean
                required:
                  - success
                type: object
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` may have :
            - ENETWORKUNHANDLED : Unable to update a iface assignation for a firewall with the network configuration unhandled.`
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` can be :
            - ENOTFOUND: Unabled to find iface assignation
      summary: Delete multiple ifaces assignations
      tags:
        - QoS
  /api/qos/queues:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_queue_MultipleQueuesResponse'
          description: Success
        "401":
          content:
            application/json:
              schema:
                properties:
                  success:
                    example: false
                    type: boolean
                required:
                  - success
                type: object
          description: Unauthorized
      summary: Get all the queues
      tags:
        - QoS
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/definitions_queue_QueueWithoutUuid'
        description: the queue properties
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_queue_SingleQueueResponse'
          description: Success
        "400":
          content:
            application/json:
              schema:
                properties:
                  errors:
                    items:
                      properties:
                        code:
                          example: EINVALIDRANGE
                          type: string
                        message:
                          example: ""
                          type: string
                      required:
                        - code
                      type: object
                    type: array
                  success:
                    example: false
                    type: boolean
                required:
                  - success
                  - errors
                type: object
          description: |
            `code` may have :
            - ERESERVEDNAME
            - EFORBIDDENCHAR
            - ECBQEMPTYBANDWIDTH
            - EUNKNOWNBODYPARAMS
            - EINVAL
            - EINVALIDRANGE
        "401":
          content:
            application/json:
              schema:
                properties:
                  success:
                    example: false
                    type: boolean
                required:
                  - success
                type: object
          description: Unauthorized
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` can be :
              - EDUPLICATE : Queue already exists in database with the same name
      summary: Create a queue
      tags:
        - QoS
  /api/qos/queues/{uuid}:
    delete:
      parameters:
        - description: Queue UUID
          in: path
          name: uuid
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
        "401":
          content:
            application/json:
              schema:
                properties:
                  success:
                    example: false
                    type: boolean
                required:
                  - success
                type: object
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` can be :
            - ENOTFOUND: Unabled to find queue
        "423":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` might be :
            - ELOCK : if the queue is being used
      summary: Remove one queue
      tags:
        - QoS
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_queue_SingleQueueResponse'
          description: Success
        "401":
          content:
            application/json:
              schema:
                properties:
                  success:
                    example: false
                    type: boolean
                required:
                  - success
                type: object
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` can be :
            - ENOTFOUND: Unabled to find queue
      summary: Get one queue
      tags:
        - QoS
    parameters:
      - description: Queue uuid
        in: path
        name: uuid
        required: true
        schema:
          type: string
    put:
      parameters:
        - description: Queue uuid
          in: path
          name: uuid
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/definitions_queue_QueueWithoutUuid'
        description: the queue properties
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_queue_SingleQueueResponse'
          description: Success
        "400":
          content:
            application/json:
              schema:
                properties:
                  errors:
                    items:
                      properties:
                        code:
                          example: EINVALIDRANGE
                          type: string
                        message:
                          example: ""
                          type: string
                      required:
                        - code
                      type: object
                    type: array
                  success:
                    example: false
                    type: boolean
                required:
                  - success
                  - errors
                type: object
          description: |
            `code` may have :
            - ERESERVEDNAME
            - EFORBIDDENCHAR
            - ECBQEMPTYBANDWIDTH
            - EUNKNOWNBODYPARAMS
            - EINVAL
            - EINVALIDRANGE
        "401":
          content:
            application/json:
              schema:
                properties:
                  success:
                    example: false
                    type: boolean
                required:
                  - success
                type: object
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` can be :
            - ENOTFOUND: Unabled to find queue
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` can be :
              - EDUPLICATE : Queue already exists in database with the same name
      tags:
        - QoS
  /api/qos/queues/bulk:
    delete:
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/definitions_queue_Queue'
              type: array
        description: The list of queues to delete
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  success:
                    example: true
                    type: boolean
                type: object
          description: Success
        "401":
          content:
            application/json:
              schema:
                properties:
                  success:
                    example: false
                    type: boolean
                required:
                  - success
                type: object
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` can be :
            - ENOTFOUND: Unabled to find queue
        "423":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` might be :
            - ELOCK : if at least one queue is being used
      summary: Delete multiple queues
      tags:
        - QoS
  /api/qos/traffic-shapers:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_traffic-shaper_MultipleTrafficShapersResponse'
          description: Success
        "401":
          content:
            application/json:
              schema:
                properties:
                  success:
                    example: false
                    type: boolean
                required:
                  - success
                type: object
          description: Unauthorized
      summary: Get all the traffic shapers
      tags:
        - QoS
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/definitions_traffic-shaper_TrafficShaperWithoutUuid'
        description: the traffic shaper properties
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_traffic-shaper_SingleTrafficShaperResponse'
          description: Success
        "400":
          content:
            application/json:
              schema:
                properties:
                  errors:
                    items:
                      properties:
                        code:
                          example: EINVAL
                          type: string
                        message:
                          example: ""
                          type: string
                      required:
                        - code
                      type: object
                    type: array
                  success:
                    example: false
                    type: boolean
                required:
                  - success
                  - errors
                type: object
          description: |
            `code` may have :
            - ERESERVEDNAME
            - EFORBIDDENCHAR
            - EUNKNOWNBODYPARAMS
            - EINVAL
        "401":
          content:
            application/json:
              schema:
                properties:
                  success:
                    example: false
                    type: boolean
                required:
                  - success
                type: object
          description: Unauthorized
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` can be :
              - EDUPLICATE : Traffic shaper already exists in database with the same name
      summary: Create a traffic shaper
      tags:
        - QoS
  /api/qos/traffic-shapers/{uuid}:
    delete:
      parameters:
        - description: TrafficShaper UUID
          in: path
          name: uuid
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
        "401":
          content:
            application/json:
              schema:
                properties:
                  success:
                    example: false
                    type: boolean
                required:
                  - success
                type: object
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` can be :
            - ENOTFOUND: Unabled to find traffic shaper
        "423":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` might be :
            - ELOCK : if the traffic shaper is being used
      summary: Remove one traffic shaper
      tags:
        - QoS
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_traffic-shaper_SingleTrafficShaperResponse'
          description: Success
        "401":
          content:
            application/json:
              schema:
                properties:
                  success:
                    example: false
                    type: boolean
                required:
                  - success
                type: object
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` can be :
            - ENOTFOUND: Unabled to find traffic shaper
      summary: Get one traffic shaper
      tags:
        - QoS
    parameters:
      - description: TrafficShaper uuid
        in: path
        name: uuid
        required: true
        schema:
          type: string
    put:
      parameters:
        - description: TrafficShaper uuid
          in: path
          name: uuid
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/definitions_traffic-shaper_TrafficShaperWithoutUuid'
        description: the traffic shaper properties
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_traffic-shaper_SingleTrafficShaperResponse'
          description: Success
        "400":
          content:
            application/json:
              schema:
                properties:
                  errors:
                    items:
                      properties:
                        code:
                          example: EUNKNOWNBODYPARAMS
                          type: string
                        message:
                          example: ""
                          type: string
                      required:
                        - code
                      type: object
                    type: array
                  success:
                    example: false
                    type: boolean
                required:
                  - success
                  - errors
                type: object
          description: |
            `code` may have :
            - ERESERVEDNAME
            - EFORBIDDENCHAR
            - EUNKNOWNBODYPARAMS
            - EINVAL
        "401":
          content:
            application/json:
              schema:
                properties:
                  success:
                    example: false
                    type: boolean
                required:
                  - success
                type: object
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` can be :
            - ENOTFOUND: Unabled to find traffic shaper
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` can be :
              - EDUPLICATE : Traffic shaper already exists in database with the same name
      tags:
        - QoS
  /api/qos/traffic-shapers/bulk:
    delete:
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/definitions_traffic-shaper_TrafficShaper'
              type: array
        description: The list of traffic shapers to delete
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  success:
                    example: true
                    type: boolean
                type: object
          description: Success
        "401":
          content:
            application/json:
              schema:
                properties:
                  success:
                    example: false
                    type: boolean
                required:
                  - success
                type: object
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` can be :
            - ENOTFOUND: Unabled to find traffic shaper
        "423":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` might be :
            - ELOCK : if at least one traffic shaper is being used
      summary: Delete multiple traffic shapers
      tags:
        - QoS
  /api/radius:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_radius_radiusResponse'
          description: Success
        "401":
          description: Unauthorized
      summary: Get Radius server configuration
      tags:
        - radius
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/definitions_radius_radius'
        description: Radius configuration
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_radius_radiusPostResponse'
          description: Success
        "401":
          description: Unauthorized
        "404":
          description: |
            `code` might be :
            -  EINVALIDPARAM : Invalid Radius configuration
        "500":
          description: |
            "internal server error"
      summary: Update radius server configuration
      tags:
        - radius
  /api/routing/{uuid}:
    delete:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_routing_Routing'
          description: Success
        "401":
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: Cannot remove the default route
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` can be:
            - ENOTFOUND : The firewall has not been found
      summary: Remove a route on the firewall
      tags:
        - routing
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_routing_RouteInfo'
          description: Success
        "401":
          description: Unauthorized
      summary: Get a specific route
      tags:
        - routing
    parameters:
      - description: The uuid of the route
        in: path
        name: uuid
        required: true
        schema:
          type: string
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/definitions_routing_RouteAddUpdateBody'
        description: Route description
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_routing_RouteInfo'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            Bad request.
            - RouteType is not valid
            - Dynamic routeType and bird config is invalid
        "401":
          description: Unauthorized
        "404":
          description: |
            Not Found.
            - uuid is not in db
            - routeType in db does not match routeType in the PUT request
      summary: Update a route
      tags:
        - routing
  /api/routing/getbirdconfigerror:
    post:
      requestBody:
        content:
          application/json:
            schema:
              properties:
                bird:
                  description: The bird config file content
                  type: string
                birdVersion:
                  description: Bird version (allowed values are "v1" and "v2")
                  example: v2
                  type: string
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  error:
                    description: present only if success = false
                    example: 'bird: /dev/stdin:20:1 syntax error'
                    type: string
                  success:
                    example: true
                    type: boolean
                type: object
          description: Success
      summary: Return the possible error of a bird configuration
      tags:
        - routing
  /api/routing/import:
    post:
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                routes:
                  format: binary
                  type: string
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  result:
                    properties:
                      importSummary:
                        properties:
                          routes:
                            description: number of routes created
                            type: number
                        type: object
                      logs:
                        items:
                          properties:
                            level:
                              description: log level
                              enum:
                                - info
                                - warning
                                - error
                              type: string
                            message:
                              description: log message
                              example: File is missing
                              type: string
                          type: object
                        type: array
                    type: object
                  success:
                    type: boolean
                type: object
          description: success
        "400":
          description: |
            `code` can be :
             - EFILEMISSING : When no csv file was attached
             - EBADEXTNAME : When csv has a unexpected extension (allow: .csv)
             - EFILEEMPTY : When file appears to be empty
        "403":
          description: Forbidden operation like adding two default routes in one firewall
      summary: Import routes from a CSV file
      tags:
        - routing
  /api/rules:
    get:
      description: Return an array of flat rules found in unified config
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_rules_RulesListResponse'
          description: Success
        "401":
          description: Unauthorized
      summary: Retrieve all rules
      tags:
        - rules
    post:
      description: Create a rule and associate it with a parent at some position
      parameters:
        - description: The index of the rule in the parent
          in: query
          name: index
          schema:
            $ref: '#/components/schemas/definitions_rules_RuleIndex'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/definitions_rules_RuleAddRequestBody'
        description: The properties of the rule with information about parents
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_rules_RuleAddResponse'
          description: Success
        "401":
          description: Unauthorized
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` might be :
            - EDUPLICATE : A rule with the same name already exists
      summary: Create a rule within a parent
      tags:
        - rules
  /api/rules/{uuid}:
    delete:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/definitions_rules_RuleParentProperties'
        description: The properties to delete the rule
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_rules_RuleDeleteResponse'
          description: Success
        "401":
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` might be :
            - ENOTFOUND : the rule could not be found
      tags:
        - rules
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_rules_RuleGetResponse'
          description: Success
        "401":
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` might be :
            - ERULENOTFOUND : the rule could not be found
      tags:
        - rules
    parameters:
      - description: The uuid of the rule
        in: path
        name: uuid
        required: true
        schema:
          type: string
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/definitions_rules_RulePropertiesWithoutParent'
        description: The properties to update in the rule
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_rules_RuleUpdateResponse'
          description: Success
        "401":
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` might be :
            - ENOTFOUND : the rule could not be found
      tags:
        - rules
  /api/rules/bulk:
    delete:
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/definitions_rules_BulkRuleParentProperties'
              type: array
        description: The list of rules with uuids and parent properties
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_rules_BulkRuleDeleteResponse'
          description: Success
        "401":
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` might be :
            - ENOTFOUND : the rule could not be found
      tags:
        - rules
    post:
      description: Create multiple rules and associate them with a parent at some position
      parameters:
        - description: The index of the rule in the parent
          in: query
          name: index
          schema:
            $ref: '#/components/schemas/definitions_rules_RuleIndex'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/definitions_rules_RuleBulkAddRequestBody'
        description: An array of properties of the rules with information about parents
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_rules_RuleBulkAddResponse'
          description: Success
        "401":
          description: Unauthorized
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` might be :
            - EDUPLICATE : A rule with the same name already exists
      summary: Create multiple rules within a parent
      tags:
        - rules
  /api/rules/by-parent/{parentUuid}:
    get:
      description: For a folder, return all rules (high and low priorities). For a firewall, return whole rules hierarchy.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_rules_RulesListResponse'
          description: Success
        "401":
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` might be :
            - ENOTFOUND: the parent could not be found
      summary: Get parent rules for export service
      tags:
        - rules
    parameters:
      - description: The uuid of the parent
        in: path
        name: parentUuid
        required: true
        schema:
          $ref: '#/components/schemas/definitions_common_Uuid'
      - description: The parent type, necessary to specify the priority of the rules to export from a folder
        in: query
        name: parentType
        schema:
          $ref: '#/components/schemas/definitions_rules_ParentType'
  /api/rules/export:
    get:
      parameters:
        - description: the parent's uuid
          in: query
          name: parent
          required: true
          schema:
            $ref: '#/components/schemas/definitions_common_Uuid'
      responses:
        "200":
          content:
            text/csv:
              schema:
                description: The rules export file in CSV format
                type: string
          description: Success
        "401":
          description: Unauthorized access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: The parent does not exist (wrong uuid for instance)
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: Internal server error
      summary: Export rules into a CSV file
      tags:
        - rules
  /api/rules/import:
    post:
      parameters:
        - description: Parent uuid
          example: 75532250-c878-42f1-8871-bafa68e944d4
          in: query
          name: parent
          required: true
          schema:
            type: string
        - description: The parent type. If the parent is a folder, specifies the default priority of the rules to import. Is overwritten by "smc_folder_prio" field.
          in: query
          name: parentType
          required: true
          schema:
            $ref: '#/components/schemas/definitions_rules_ParentType'
      requestBody:
        content:
          multipart/form-data:
            schema:
              allOf:
                - properties:
                    objects:
                      description: A raw CSV file containing objects
                      format: binary
                      type: string
                    replace:
                      default: false
                      description: true to replace existing rules, or false to add rules after the existing ones
                      type: boolean
                    rules:
                      description: A raw CSV file containing rules
                      format: binary
                      type: string
                    update:
                      default: false
                      description: Update existing objects
                      type: boolean
                  required:
                    - rules
                  type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_misc_ImportResponse'
          description: Import response
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: Bad request (error in CSV file for instance)
        "401":
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` might be :
            - ENOTFOUND : the parent could not be found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: Internal server error
      summary: Import rules from a CSV file
      tags:
        - rules
  /api/rules/import-from-fw/{uuid}/{slotSpecifier}:
    post:
      parameters:
        - description: Firewall UUID
          in: path
          name: uuid
          required: true
          schema:
            type: string
        - description: Specify the slot context
          in: path
          name: slotSpecifier
          required: true
          schema:
            enum:
              - global
              - local
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_rules_RulesImportListResponse'
          description: Success
        "401":
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: Firewall does not exist
      summary: Import local or global rules from a firewall
      tags:
        - firewalls
        - rules
  /api/rules/local/{uuid}:
    get:
      parameters:
        - description: Firewall UUID
          in: path
          name: uuid
          required: true
          schema:
            type: string
        - description: The type of the requested rules (nat or filter)
          in: query
          name: type
          required: true
          schema:
            enum:
              - nat
              - filter
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_rules_RulesFetchListResponse'
          description: Success
        "401":
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: Firewall does not exist
      summary: Returns local rules from a firewall
      tags:
        - firewalls
        - rules
        - objects
  /api/rules/refs/{parentUuid}:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_rules_RefsParentResponse'
          description: Success
        "401":
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` might be :
            - ENOTFOUND: the parent could not be found
      tags:
        - rules
    parameters:
      - description: The uuid of the parent
        in: path
        name: parentUuid
        required: true
        schema:
          $ref: '#/components/schemas/definitions_common_Uuid'
      - description: The type of the parent
        in: query
        name: parentType
        required: true
        schema:
          $ref: '#/components/schemas/definitions_rules_ParentType'
  /api/rules/refs/{parentUuid}/bulk:
    parameters:
      - description: The uuid of the parent
        in: path
        name: parentUuid
        required: true
        schema:
          $ref: '#/components/schemas/definitions_common_Uuid'
      - description: The type of the parent
        in: query
        name: parentType
        required: true
        schema:
          $ref: '#/components/schemas/definitions_rules_ParentType'
    post:
      parameters:
        - description: Where it should be inserted in the given parent
          in: query
          name: insertionIndex
          schema:
            $ref: '#/components/schemas/definitions_rules_RuleIndex'
        - description: The id of the parent from where the rules are moved
          in: query
          name: originalParentUuid
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/definitions_rules_BulkMoveToParentRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_rules_BulkMoveToParentResponse'
          description: Success
        "401":
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` might be :
            - ERULENOTFOUND : the rule could not be found
            - ENOTFOUND: the parent could not be found
      tags:
        - rules
  /api/rulesets:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_rule-sets_MultipleRuleSetsResponse'
          description: Success
        "401":
          description: Unauthorized
      summary: Get all the rule sets
      tags:
        - rule-sets
    post:
      parameters:
        - description: an integer or last or first
          in: query
          name: position
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/definitions_rule-sets_RuleSetWithoutUuid'
        description: the rule set properties
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_rule-sets_SingleRuleSetResponse'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` may have :
            - EINVAL                    : Invalid index "<your position>", it must be a positive integer
            - EEMPTYNAME                : Name can not be empty
            - EINVALIDRULESETASSIGNMENT : The rule set cannot be assigned to a base station
            - EFIREWALLNOTFOUND         : Rule set can only contain existing firewalls
            - ERULESETINFOLDER          : Rule set can not be contained in folders
        "401":
          description: Unauthorized
        "404":
          description: Couldn't find rule
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` might be :
            - EDUPLICATE : A rule set named "<rule set name>" already exists
      summary: Create a rule set
      tags:
        - rule-sets
  /api/rulesets/{uuid}:
    delete:
      parameters:
        - description: Rule set UUID
          in: path
          name: uuid
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_rule-sets_SingleRuleSetResponse'
          description: Success
        "401":
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: Rule set was not found
      summary: Remove one rule set
      tags:
        - rule-sets
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_rule-sets_SingleRuleSetResponse'
          description: Success
        "401":
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: Rule set was not found
      summary: Get one rule set
      tags:
        - rule-sets
    parameters:
      - description: Rule set uuid
        in: path
        name: uuid
        required: true
        schema:
          type: string
    put:
      parameters:
        - description: an integer or last or first
          in: query
          name: position
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/definitions_rule-sets_RuleSetWithoutUuid'
        description: the rule set properties
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_rule-sets_SingleRuleSetResponse'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` may have :
            - EINVAL                 : Invalid index "<your position>", it must be a positive integer
            - EEMPTYNAME             : Name can not be empty
            - ERULESETINFOLDER       : Rule set can not be contained in folders
        "401":
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` may have :
            - ENOTFOUND             : Rule set was not found
            - ERULENOTFOUND         : Rule was not found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` might be :
            - EDUPLICATE : A rule set named "<rule set name>" already exists
      summary: |
        Update one rule set (manage "first" and "last" position value).
        Rule set color is managed through the header.
      tags:
        - rule-sets
  /api/rulesets/export:
    get:
      parameters:
        - description: The type of ruleset
          in: query
          name: rulesType
          required: true
          schema:
            enum:
              - filter
              - nat
            type: string
      responses:
        "200":
          content:
            text/csv:
              schema:
                description: The rules within each rules set
                type: string
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: The rulesType does not exist
        "401":
          description: Unauthorized access
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: Internal server error
      summary: Export the rules from each ruleSet into a CSV file
      tags:
        - rule-sets
  /api/rulesets/import:
    post:
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                rulesType:
                  description: Type of rule set
                  enum:
                    - nat
                    - filter
                  type: string
                update:
                  default: false
                  description: Indicates if existing rule sets must be overwritten
                  type: boolean
              required:
                - rulesType
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_rule-sets_ImportResult'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` might be:
            - EINVAL: not a valid rulesType
            - EFILEMISSING : file is missing
            - EBADEXTNAME : bad file extension (expected ".csv")
        "401":
          description: Unauthorized access
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: Internal server error
      summary: Import some rule sets from a CSV file
      tags:
        - rule-sets
  /api/rulesets/rules:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_rules_RulesListResponse'
          description: Success
        "401":
          description: Unauthorized
      summary: Get rulesets rules for export service
      tags:
        - rule-sets
    parameters:
      - description: The type of ruleset
        in: query
        name: rulesType
        required: true
        schema:
          enum:
            - filter
            - nat
          type: string
  /api/snsdiff/diff/{uuid}:
    get:
      parameters:
        - description: Firewall uuid
          in: path
          name: uuid
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_snsdiff_SnsDiffResult'
          description: Success
        "401":
          description: Unauthorized access
        "423":
          description: Locked Access
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` might be :
            - EDIFFGENERATIONFAILED: Configuration file cannot be generated
      summary: Retrieve configuration differences for given firewall
      tags:
        - snsdiff
  /api/unifiedconfig/config:
    get:
      parameters:
        - description: The revision number to retrieve
          in: query
          name: revision
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  result:
                    $ref: '#/components/schemas/definitions_unifiedconfig_UnifiedConfigResponse'
                  success:
                    example: true
                    type: boolean
                type: object
          description: Success
        "401":
          description: Unauthorized access
        "404":
          description: code EREVISIONNOTFOUND when the given revision number is not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: Internal server error
      summary: Retrieve the unified configuration at a specific revision. Retrieve the latest configuration if no given revision number
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  success:
                    example: true
                    type: boolean
                type: object
          description: Success
        "401":
          description: Unauthorized access
      summary: Set unified configuration
  /api/unifiedconfig/contacts:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  result:
                    $ref: '#/components/schemas/definitions_misc_ContactAddresses'
                  success:
                    example: true
                    type: boolean
                type: object
          description: Success
        "401":
          description: Unauthorized access
      summary: Retrieve server contacts adresses
  /api/unifiedconfig/deploy:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_deploy_DeploymentMonitoringResponse'
          description: the state of the current deployment
        "401":
          description: Unauthorized access
      summary: get the state of the current deployment
      tags:
        - deployment
    post:
      requestBody:
        content:
          application/json:
            example:
              byNames: true
              comment: deployment launched from Swagger
              target:
                - sns-1
            schema:
              $ref: '#/components/schemas/definitions_deploy_DeployBody'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  success:
                    enum:
                      - true
                    type: boolean
                type: object
          description: success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` can be :
             - EFIREWALLNOTFOUND when at least one SNS name is unknown
             - ENOFW when no target is given
             - EUNKNOWNFW when one of the given target does not correspond to an existing Firewall"s UUID
             - EINVALIDPARAM when more than one firewall are specified on redeployment
        "401":
          description: Unauthorized access
        "423":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            Occurs when another deployment or a NSRPC script execution is ongoing or postponed
            `code` can be :
             - ELOCK
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: internal error
      summary: launch a deployment operation
      tags:
        - deployment
  /api/unifiedconfig/history:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  result:
                    items:
                      properties:
                        admin:
                          description: deployment author
                          type: string
                        comment:
                          description: some comments
                          type: string
                        date:
                          description: the deployment date
                          type: string
                        revision:
                          description: the revision id
                          type: string
                      type: object
                    type: array
                  success:
                    example: true
                    type: boolean
                type: object
          description: Success
        "401":
          description: Unauthorized access
      summary: Retrieve deployment history
  /api/unifiedconfig/history/{revision}/restore:
    post:
      parameters:
        - description: revision number
          in: path
          name: revision
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  success:
                    example: true
                    type: boolean
                type: object
          description: success
        "401":
          description: Unauthorized access
        "404":
          description: Revision not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: Internal server error
      summary: Restore History
  /api/unifiedconfig/info:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  result:
                    properties:
                      lastDeployableModification:
                        description: Last time a modification that needed a deployment has been made
                        format: date
                        type: string
                      lastDeployment:
                        description: Last time a deployment has been made
                        format: date
                        type: string
                      lastModification:
                        description: Last time unifiedconfig has been modified
                        format: date
                        type: string
                      version:
                        description: SMC version number
                        type: string
                    type: object
                  success:
                    example: true
                    type: boolean
                type: object
          description: Success
        "401":
          description: Unauthorized access
      summary: Retrieve unifiedconfig modification and deployment date info as well as SMC version
  /api/update:
    post:
      description: Upload an SMC update file. Return an error when no file is sent, or the file is either the wrong type (anything but .upd) or empty.
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                updateFile:
                  format: binary
                  type: string
              type: object
        description: Update file (.upd)
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  success:
                    example: true
                    type: boolean
                type: object
          description: success
        "400":
          content:
            application/json:
              schema:
                properties:
                  errors:
                    items:
                      properties:
                        code:
                          example: EBADEXTNAME
                          type: string
                        message:
                          example: The update file should be of type UPD (.upd).
                          type: string
                      type: object
                    type: array
                  success:
                    example: false
                    type: boolean
                type: object
          description: Bad request
        "401":
          description: Unauthorized access
        "423":
          content:
            application/json:
              schema:
                properties:
                  errors:
                    items:
                      properties:
                        code:
                          example: ELOCK
                          type: string
                        message:
                          example: An update is already processing.
                          type: string
                      type: object
                    type: array
                  success:
                    example: false
                    type: boolean
                type: object
          description: Locked
      summary: Upload an SMC update file
      tags:
        - update
  /api/update/launch:
    get:
      description: Launch the upload process after an update file was uploaded. Return an error if no update file was uploaded or if an upload is already processing.
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  success:
                    example: true
                    type: boolean
                type: object
          description: success
        "400":
          content:
            application/json:
              schema:
                properties:
                  errors:
                    items:
                      properties:
                        code:
                          example: EFILEMISSING
                          type: string
                        message:
                          example: An update file must be uploaded before launching update process.
                          type: string
                      type: object
                    type: array
                  success:
                    example: false
                    type: boolean
                type: object
          description: Bad request
        "401":
          description: Unauthorized access
        "423":
          content:
            application/json:
              schema:
                properties:
                  errors:
                    items:
                      properties:
                        code:
                          example: ELOCK
                          type: string
                        message:
                          example: An update is already processing.
                          type: string
                      type: object
                    type: array
                  success:
                    example: false
                    type: boolean
                type: object
          description: Locked
        "500":
          content:
            application/json:
              schema:
                properties:
                  errors:
                    items:
                      properties:
                        code:
                          example: INTERNAL_SERVER_ERROR
                          type: string
                        message:
                          example: An error occurred during the update process.
                          type: string
                      type: object
                    type: array
                  success:
                    example: false
                    type: boolean
                type: object
          description: Internal error
      summary: Launch the upload process
      tags:
        - update
  /api/update/status:
    get:
      description: Get the update status (locked or not)
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  locked:
                    example: true
                    type: boolean
                  success:
                    example: true
                    type: boolean
                type: object
          description: success
      summary: Get the update status
      tags:
        - update
  /api/usage/{uuid}:
    get:
      description: Get a list of items (object, firewall, interface, encryption profile, variable, certificate or certificate authority) that use the object
      parameters:
        - description: Object, firewall, queue, traffic shaper, encryption profile, variable, certificate or certificate authority UUID
          in: path
          name: uuid
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_objects_CheckUsageResponse'
          description: Success
        "401":
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: Unable to find object, firewall, encryption profile, variable, route-based topology, certificate or certificate authority.
      summary: Fetch object usage
      tags:
        - usage
  /api/variables:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_variables_MultipleVariablesResponse'
          description: Success
        "401":
          description: Unauthorized
      summary: Get all firewalls custom variables
      tags:
        - variables
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/definitions_variables_VariableWithoutUuid'
        description: the variable properties
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_variables_SingleVariableResponse'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` may have :
            - EEMPTYNAME : Name can not be empty
            - EFORBIDDENCHAR : Name contains forbidden character
        "401":
          description: Unauthorized
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` might be :
            - EDUPLICATE : A variable with the same name already exists
      summary: Create a firewall's custom variable
      tags:
        - variables
  /api/variables/{uuid}:
    delete:
      parameters:
        - description: Variable UUID
          in: path
          name: uuid
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  success:
                    example: true
                    type: boolean
                type: object
          description: Success
        "401":
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: Variable was not found
      summary: Remove one firewalls custom variable
      tags:
        - variables
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_variables_SingleVariableResponse'
          description: Success
        "401":
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: Variable was not found
      summary: Get one firewalls custom variable
      tags:
        - variables
    parameters:
      - description: Variable uuid
        in: path
        name: uuid
        required: true
        schema:
          type: string
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/definitions_variables_VariableWithoutUuid'
        description: the variable properties
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_variables_SingleVariableResponse'
          description: Success
        "401":
          description: Unauthorized
      summary: Update one firewalls custom variable
      tags:
        - variables
  /api/variables/import:
    post:
      requestBody:
        content:
          multipart/form-data:
            encoding:
              variables:
                contentType: text/csv
            schema:
              properties:
                variables:
                  format: binary
                  type: string
              type: object
        description: A CSV file
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_variables_VariablesImportListResponse'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            Bad request but `code` might be :
            - EIMPORTFAIL : the import failed
        "401":
          description: Unauthorized
      summary: Import variables from a CSV file
      tags:
        - variables
  /api/vpn/algorithms/auth:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_algorithms_AuthAlgorithmsList'
          description: Success
        "401":
          description: Unauthorized
      summary: Get all auth algorithms
      tags:
        - algorithms
  /api/vpn/algorithms/enc:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_algorithms_EncAlgorithmsList'
          description: Success
      summary: Get all enc algorithms
      tags:
        - algorithms
  /api/vpn/defaultAddressPool:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  result:
                    $ref: '#/components/schemas/definitions_topologies_DefaultAddressPool'
                  success:
                    type: boolean
                type: object
          description: Success
        "401":
          description: Unauthorized
      summary: Get default address pool
      tags:
        - topologies
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/definitions_topologies_DefaultAddressPool'
        description: Default address pool
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  result:
                    $ref: '#/components/schemas/definitions_topologies_DefaultAddressPool'
                  success:
                    type: boolean
                type: object
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` can be:
              - EINVALIDSUBNET : Address pool must be in a private subnet
              - ENOADDRESSESAVAILABLE: No addresses available in pool
        "401":
          description: Unauthorized
      summary: Set default address pool
      tags:
        - topologies
  /api/vpn/encryptionProfiles:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_encryptionProfiles_EncryptionProfileList'
          description: Success
        "401":
          description: Unauthorized
      summary: Get the list of encryption profiles
      tags:
        - encryption profiles
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/definitions_encryptionProfiles_EncryptionProfilePropertiesWithoutUuid'
        description: Encryption profile's properties
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_encryptionProfiles_EncryptionProfileProperties'
          description: Success
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` can be :
              - EDUPLICATE : Encryption profile already exists in database with the same name
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` can be :
              - EINVAL : IPSec enc algorithm is not valid
              - EINVAL : IPSec auth algorithm is not valid
              - EINVAL : IPSec lifetime should be greater than 30
              - EINVAL : IPSec pfs is not valid
              - EINVAL : IKE lifetime should be greater than 40
              - EINVAL : IKE defaultdh is not valid
              - EINVAL : IKE enc algorithm is not valid
              - EINVAL : IKE auth algorithm is not valid
              - EBUILTIN : Unable to create builtin encryption profile.
      summary: Create an encryption profile
      tags:
        - encryption profiles
  /api/vpn/encryptionProfiles/{uuid}:
    delete:
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  success:
                    example: true
                    type: boolean
                type: object
          description: Success
        "401":
          description: Unauthorized access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` can be :
            - ENOTFOUND : Unable to find encryption profile
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` can be :
            - EBUILTIN : Unable to delete builtin encryption profile.
        "423":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` can be :
            - ELOCK : Unable to delete a used encryption profile
      summary: Delete an encryption profile
      tags:
        - encryption profiles
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  result:
                    $ref: '#/components/schemas/definitions_encryptionProfiles_EncryptionProfileProperties'
                  success:
                    example: true
                    type: boolean
                type: object
          description: Success
        "401":
          description: Unauthorized access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` can be :
            - ENOTFOUND : Unable to find encryption profile
      summary: Get an encryption profile by its UUID
      tags:
        - encryption profiles
    parameters:
      - description: EncryptionProfile UUID
        in: path
        name: uuid
        required: true
        schema:
          type: string
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/definitions_encryptionProfiles_EncryptionProfileProperties'
        description: encryption profile data to update
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  result:
                    $ref: '#/components/schemas/definitions_encryptionProfiles_EncryptionProfileProperties'
                  success:
                    example: true
                    type: boolean
                type: object
          description: Success
        "401":
          description: Unauthorized access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` can be :
            - ENOTFOUND : Unable to find encryption profile
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` can be :
              - EDUPLICATE : Encryption profile already exists in database with the same name
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` can be :
              - EINVAL : IPSec enc algorithm is not valid
              - EINVAL : IPSec auth algorithm is not valid
              - EINVAL : IPSec lifetime should be greater than 30
              - EINVAL : IPSec pfs is not valid
              - EINVAL : IKE lifetime should be greater than 40
              - EINVAL : IKE defaultdh is not valid
              - EINVAL : "foo" is not a valid defaultprf
              - EINVAL : IKE enc algorithm is not valid
              - EINVAL : IKE auth algorithm is not valid
              - EBUILTIN : Unable to update builtin encryption profile.
      summary: Encryption profile update
      tags:
        - encryption profiles
  /api/vpn/topologies:
    get:
      description: Return the list of topologies
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_topologies_TopologiesListResponse'
          description: Success
        "401":
          description: Unauthorized access
      summary: Retrieve the list of topologies
      tags:
        - topologies
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/definitions_topologies_TopologyPropertiesWithoutUuid'
        description: topology data for creation
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  result:
                    $ref: '#/components/schemas/definitions_topologies_TopologyPropertiesWithUuid'
                  success:
                    example: true
                    type: boolean
                type: object
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` can be : - EINVAL : Invalid topology type (= {"mesh", "site-to-site", "star"}) - EINVAL : Encryption profile does not exists - EINVAL : Exactly two endpoints must be provided to a link - EINVAL : A valid {object,peer} couple must be provided - EINVAL : A referenced object does no exist - EINVAL : Link peers must be instances of: ["Firewall", "Host"] - EINVAL : Link objects must be instances of: ["Host", "Group", "Network"] - EINVAL : Link peers must be different - EINVAL : At least one firewall must be set as link peer - EINVAL : At least one firewall has never been connected to SMC - EINVAL : Link objects cannot be service groups - EINVAL : Topology center is not a firewall - EINVAL : Topology center is not among links peers - EINVALIDNONEMPTYARRAY : Topology must contain at least one link - EDUPLICATELINK: Link already exists in another topology. The `ctx` property contains the `topology` uuid and the `endpoints` of the duplicate link - EDIFFERENTIKEVERSION: A firewall cannot have different IKE version from several topologies. The `ctx` property contains the `firewall` uuid - EINVALIDRESERVEDOBJECTINTOPO: A reserved object cannot be used in a topology - EINVALIDGROUPWITHRESERVEDOBJECTINTOPO: A group containing a reserved object cannot be used in a topology - EINVALIDSUBNET : Address pool must be in a private subnet - EUNSUFFICIENTADDRESSES: Not enough addresses available in the defined pool
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ForbiddenBecauseOfUserScopeResponse'
          description: Unauthorized action
        "409":
          description: Topology already exists in database with the same name
      summary: Create new topology
      tags:
        - topologies
  /api/vpn/topologies/{uuid}:
    delete:
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  success:
                    example: true
                    type: boolean
                type: object
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` can be :
            - EINVAL : Missing UUID
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ForbiddenBecauseOfUserScopeResponse'
          description: Unauthorized action
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` can be :
            - ENOTFOUND : Unable to find topology
      summary: Delete a topology
      tags:
        - topologies
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  result:
                    $ref: '#/components/schemas/definitions_topologies_TopologyPropertiesWithUuid'
                  success:
                    example: true
                    type: boolean
                type: object
          description: Success
        "401":
          description: Unauthorized access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` can be :
            - ENOTFOUND : Unable to find topology
      summary: Get a topology by its UUID
      tags:
        - topologies
    parameters:
      - description: Topology UUID
        in: path
        name: uuid
        required: true
        schema:
          type: string
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/definitions_topologies_TopologyPropertiesWithUuid'
        description: topology data to update
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  result:
                    $ref: '#/components/schemas/definitions_topologies_TopologyPropertiesWithUuid'
                  success:
                    example: true
                    type: boolean
                type: object
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` can be :
            - EINVAL : Invalid topology type (= {"mesh", "site-to-site", "star"})
            - EINVAL : Encryption profile does not exists
            - EINVAL : Exactly two endpoints must be provided to a link
            - EINVAL : A valid {object,peer} couple must be provided
            - EINVAL : A referenced object does no exist
            - EINVAL : Link peers must be instances of: ["Firewall", "Host"]
            - EINVAL : Link objects must be instances of: ["Host", "Group", "Network"]
            - EINVAL : Link peers must be different
            - EINVAL : At least one firewall must be set as link peer
            - EINVAL : At least one firewall has never been connected to SMC
            - EINVAL : Link objects cannot be service groups
            - EINVAL : Topology center is not a firewall
            - EINVAL : Topology center is not among links peers
            - EINVALIDNONEMPTYARRAY : Topology must contain at least one link
            - EDUPLICATELINK: Link already exists in another topology. The `ctx` property contains the `topology` uuid and the `endpoints` of the duplicate link
            - EDIFFERENTIKEVERSION: A firewall cannot have different IKE version from several topologies. The `ctx` property contains the `firewall` uuid
            - EINVALIDRESERVEDOBJECTINTOPO: A reserved object cannot be used in a topology
            - EINVALIDGROUPWITHRESERVEDOBJECTINTOPO: A group containing a reserved object cannot be used in a topology
            - EOBJECTSINUSE: Some of the removed peer's deduced objects are in use.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ForbiddenBecauseOfUserScopeResponse'
          description: Unauthorized action
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` can be :
            - ENOTFOUND : Unable to find topology
        "409":
          description: Topology already exists in database with the same name
      summary: Topology update
      tags:
        - topologies
  /api/vpn/topologies/{uuid}/export:
    get:
      parameters:
        - description: Topology UUID
          in: path
          name: uuid
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            text/csv:
              schema:
                description: The topology export file in CSV format
                type: string
          description: Success
        "401":
          description: Unauthorized access
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: The topology does not exist (wrong uuid for instance)
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_common_ErrorResponse'
          description: |
            `code` can be :
            - EONLYROUTEBASED : Only route based topology can be exported
      summary: Export a topology into a CSV file
      tags:
        - topologies
  /api/vpn/tunnels:
    get:
      description: Return the list of VPN tunnels
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/definitions_tunnels_TunnelsListResponse'
          description: Success
        "401":
          description: Unauthorized
      summary: Get the list of VPN tunnels
      tags:
        - tunnels
  /proxy/{uuid}/admin/{filename}:
    get:
      responses:
        "200":
          description: Request granted
        "202":
          description: Accepted the request and downloading the webui
        "303":
          description: Detected a firewall without manifest, continue at your peril
        "400":
          description: Bad request
        "401":
          description: Unauthorized access
        "403":
          description: Firewall sent an invalid manifest, cannot continue
        "404":
          description: Firewall not found
      summary: Retrieve SNS GUI files
      tags:
        - proxy
    parameters:
      - $ref: '#/components/parameters/definitions_proxy_parameters_ProxyFirewallUuid'
      - $ref: '#/components/parameters/definitions_proxy_parameters_ProxyAppName'
      - $ref: '#/components/parameters/definitions_proxy_parameters_ProxyUserId'
      - $ref: '#/components/parameters/definitions_proxy_parameters_ProxyManifestConsent'
      - $ref: '#/components/parameters/definitions_proxy_parameters_ProxyManifestRefuse'
  /proxy/{uuid}/admin/admin.html:
    get:
      responses:
        "200":
          description: Request granted
        "202":
          description: Accepted the request and downloading the webui
        "303":
          description: Detected a firewall without manifest, continue at your peril
        "400":
          description: Bad request
        "401":
          description: Unauthorized access
        "403":
          description: Firewall sent an invalid manifest, cannot continue
        "404":
          description: Firewall not found
      summary: Retrieve SNS GUI files
      tags:
        - proxy
    parameters:
      - $ref: '#/components/parameters/definitions_proxy_parameters_ProxyFirewallUuid'
      - $ref: '#/components/parameters/definitions_proxy_parameters_ProxyAppName'
      - $ref: '#/components/parameters/definitions_proxy_parameters_ProxyUserId'
      - $ref: '#/components/parameters/definitions_proxy_parameters_ProxyManifestConsent'
      - $ref: '#/components/parameters/definitions_proxy_parameters_ProxyManifestRefuse'
  /proxy/{uuid}/admin/report.html:
    get:
      responses:
        "200":
          description: Request granted
        "202":
          description: Accepted the request and downloading the webui
        "303":
          description: Detected a firewall without manifest, continue at your peril
        "400":
          description: Bad request
        "401":
          description: Unauthorized access
        "403":
          description: Firewall sent an invalid manifest, cannot continue
        "404":
          description: Firewall not found
      summary: Retrieve SNS GUI files
      tags:
        - proxy
    parameters:
      - $ref: '#/components/parameters/definitions_proxy_parameters_ProxyFirewallUuid'
      - $ref: '#/components/parameters/definitions_proxy_parameters_ProxyAppName'
      - $ref: '#/components/parameters/definitions_proxy_parameters_ProxyUserId'
      - $ref: '#/components/parameters/definitions_proxy_parameters_ProxyManifestConsent'
      - $ref: '#/components/parameters/definitions_proxy_parameters_ProxyManifestRefuse'
  /proxy/{uuid}/api/auth/login:
    parameters:
      - $ref: '#/components/parameters/definitions_proxy_parameters_ProxyFirewallUuid'
    post:
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: string
        description: Requested rights
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/definitions_proxy_ProxyUserLoginResponse'
          description: Success
      summary: Routed towards SNS Auth API
      tags:
        - proxy
  /proxy/{uuid}/api/auth/logout:
    parameters:
      - $ref: '#/components/parameters/definitions_proxy_parameters_ProxyFirewallUuid'
    post:
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/definitions_proxy_ProxyBodySessionId'
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/definitions_proxy_ProxyNwsResponse'
          description: Success
      summary: Routed towards SNS logout API
      tags:
        - proxy
  /proxy/{uuid}/api/base64:
    parameters:
      - $ref: '#/components/parameters/definitions_proxy_parameters_ProxyFirewallUuid'
    post:
      parameters:
        - $ref: '#/components/parameters/definitions_proxy_parameters_ProxyQuerySessionId'
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/definitions_proxy_ProxyUploadField'
      responses:
        "200":
          description: Request received
        "401":
          description: Unauthorized access
        "403":
          description: Forbidden
        "404":
          description: Firewall not found
      summary: File sending API routing
      tags:
        - proxy
  /proxy/{uuid}/api/command:
    get:
      parameters:
        - $ref: '#/components/parameters/definitions_proxy_parameters_ProxyQuerySessionId'
        - description: Command name
          in: query
          name: cmd
          required: true
          schema:
            type: string
        - description: Command id
          in: query
          name: id
          schema:
            type: string
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/definitions_proxy_ProxyCommandResponse'
          description: Request received
        "401":
          description: Unauthorized access
        "403":
          description: Forbidden
        "404":
          description: Firewall not found
      summary: Aggregated commands API routing
      tags:
        - proxy
    parameters:
      - $ref: '#/components/parameters/definitions_proxy_parameters_ProxyFirewallUuid'
    post:
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                cmd:
                  description: Command name
                  type: string
                dir:
                  description: Sort order
                  type: string
                id:
                  description: Command id
                  type: string
                limit:
                  description: Paging limit
                  type: number
                page:
                  description: Paging page
                  type: number
                refresh:
                  description: Force refresh
                  type: boolean
                search:
                  description: Search string
                  type: string
                searchfield:
                  description: Search field
                  type: string
                sessionId:
                  $ref: '#/components/schemas/definitions_proxy_ProxyBodySessionId'
                sort:
                  description: Sort column
                  type: string
                start:
                  description: Paging start
                  type: number
                stopOnError:
                  description: Should stop on error
                  type: boolean
              required:
                - sessionId
                - cmd
              type: object
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/definitions_proxy_ProxyCommandResponse'
          description: Request received
        "401":
          description: Unauthorized access
        "403":
          description: Forbidden
        "404":
          description: Firewall not found
      summary: Command API routing
      tags:
        - proxy
  /proxy/{uuid}/api/commands:
    parameters:
      - $ref: '#/components/parameters/definitions_proxy_parameters_ProxyFirewallUuid'
    post:
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                cmd1:
                  description: First command
                  type: string
                cmd2:
                  description: Second command
                  type: string
                cmd3:
                  description: Third command and so on...
                  type: string
                sessionId:
                  $ref: '#/components/schemas/definitions_proxy_ProxyBodySessionId'
              required:
                - sessionId
              type: object
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/definitions_proxy_ProxyCommandResponse'
          description: Request received
        "401":
          description: Unauthorized access
        "403":
          description: Forbidden
        "404":
          description: Firewall not found
      summary: Aggregated commands API routing
      tags:
        - proxy
  /proxy/{uuid}/api/download/{filename}:
    get:
      parameters:
        - $ref: '#/components/parameters/definitions_proxy_parameters_ProxyQuerySessionId'
      responses:
        "200":
          description: Request received
        "401":
          description: Unauthorized access
        "403":
          description: Forbidden
        "404":
          description: Firewall not found
      summary: Download API routing
      tags:
        - proxy
    parameters:
      - $ref: '#/components/parameters/definitions_proxy_parameters_ProxyFirewallUuid'
      - $ref: '#/components/parameters/definitions_proxy_parameters_ProxyFileNameField'
  /proxy/{uuid}/api/prefs:
    parameters:
      - $ref: '#/components/parameters/definitions_proxy_parameters_ProxyFirewallUuid'
    post:
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                key:
                  description: Action key
                  type: string
                section:
                  description: Section
                  type: string
                sessionId:
                  $ref: '#/components/schemas/definitions_proxy_ProxyBodySessionId'
                value:
                  description: Value
                  type: string
              type: object
        required: true
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/definitions_proxy_ProxyNwsResponse'
          description: Request received
        "400":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/definitions_proxy_ProxyNwsResponse'
          description: Bad request
        "401":
          description: Unauthorized access
        "403":
          description: Forbidden
        "404":
          description: Firewall not found
      summary: User preferences API routing
      tags:
        - proxy
  /proxy/{uuid}/api/stat:
    parameters:
      - $ref: '#/components/parameters/definitions_proxy_parameters_ProxyFirewallUuid'
    post:
      parameters:
        - $ref: '#/components/parameters/definitions_proxy_parameters_ProxyQuerySessionId'
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/definitions_proxy_ProxyStatResponse'
          description: Request received
        "401":
          description: Unauthorized access
        "403":
          description: Forbidden
        "404":
          description: Firewall not found
      summary: Stat (upload/download/commands progress) API routing
      tags:
        - proxy
  /proxy/{uuid}/api/upload:
    parameters:
      - $ref: '#/components/parameters/definitions_proxy_parameters_ProxyFirewallUuid'
    post:
      parameters:
        - $ref: '#/components/parameters/definitions_proxy_parameters_ProxyQuerySessionId'
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/definitions_proxy_ProxyUploadField'
      responses:
        "200":
          description: Request received
        "401":
          description: Unauthorized access
        "403":
          description: Forbidden
        "404":
          description: Firewall not found
      summary: Upload API routing
      tags:
        - proxy
  /status:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  status:
                    example: ok
                    type: string
                type: object
          description: status
      summary: Return ok when SMC is up
components:
  parameters:
    definitions_proxy_parameters_ProxyAppName:
      description: App name
      in: query
      name: app
      required: true
      schema:
        enum:
          - webreport
          - webadmin
        type: string
    definitions_proxy_parameters_ProxyFileNameField:
      description: File name
      in: path
      name: filename
      required: true
      schema:
        type: string
    definitions_proxy_parameters_ProxyFirewallUuid:
      description: Firewall uuid
      in: path
      name: uuid
      required: true
      schema:
        type: string
    definitions_proxy_parameters_ProxyManifestConsent:
      description: When provided, it allows to override a missing manifest
      in: query
      name: consent
      schema:
        type: boolean
    definitions_proxy_parameters_ProxyManifestRefuse:
      description: When provided, refuses the proxy mode and deletes files for the version
      in: query
      name: refuse
      schema:
        type: boolean
    definitions_proxy_parameters_ProxyQuerySessionId:
      description: Session Id
      in: query
      name: sessionid
      required: true
      schema:
        type: string
    definitions_proxy_parameters_ProxyUserId:
      description: base64 encoded username
      in: query
      name: uid
      required: true
      schema:
        type: string
  schemas:
    definitions_accounts_AccountApiKeyCreateRequest:
      properties:
        expiredAt:
          description: The timestamp of when the token expires
          example: "2030-01-01T00:00:00.000Z"
          type: string
        name:
          description: The name of the key (must be unique for the user)
          example: API_KEY_1
          type: string
        permissions:
          description: Array of access rights
          items:
            enum:
              - smc
            example: smc
            type: string
          type: array
      required:
        - name
        - login
      type: object
    definitions_accounts_AccountCreateRequest:
      allOf:
        - $ref: '#/components/schemas/definitions_accounts_AccountPropertiesBase'
        - $ref: '#/components/schemas/definitions_accounts_AccountPropertiesPassword'
      type: object
    definitions_accounts_AccountPropertiesBase:
      properties:
        description:
          description: The user's description
          example: some user description
          type: string
        dn:
          description: user's DN
          example: CN=bob,DC=company,DC=world
          type: string
        email:
          description: Account's email
          example: user@email.com
          type: string
        folders:
          description: Array of folder rights
          items:
            example: folder-uuid
            type: string
          type: array
        identifier:
          description: the account's id (different from login if the user is member of a group)
          example: jdoe
          type: string
        kind:
          description: Type of account (user or group)
          example: user
          type: string
        localAuth:
          description: does the user can use the local authentication
          type: boolean
        name:
          description: the user's name
          example: Some Account name
          type: string
        permissions:
          description: Array of access rights
          items:
            enum:
              - smc
              - sns
              - console
              - ssh
              - api
            example: smc
            type: string
          type: array
      type: object
    definitions_accounts_AccountPropertiesOldPassword:
      properties:
        oldPassword:
          description: User current password
          example: $2a$10$HM7zy3pUuoyKwnaFk4A4W.9gLQZ3BGWeJqwdlPiOJN6TayLbSQ1Na
          type: string
      type: object
    definitions_accounts_AccountPropertiesPassword:
      properties:
        password:
          description: User password
          example: $2a$10$HM7zy3pUuoyKwnaFk4A4W.9gLQZ3BGWeJqwdlPiOJN6TayLbSQ1Na
          type: string
      type: object
    definitions_accounts_AccountPropertiesWithoutPassword:
      allOf:
        - $ref: '#/components/schemas/definitions_objects_ObjectUuid'
        - $ref: '#/components/schemas/definitions_accounts_AccountPropertiesBase'
      type: object
    definitions_accounts_AccountUpdateRequest:
      allOf:
        - $ref: '#/components/schemas/definitions_objects_ObjectUuid'
        - $ref: '#/components/schemas/definitions_accounts_AccountPropertiesBase'
        - $ref: '#/components/schemas/definitions_accounts_AccountPropertiesOldPassword'
        - $ref: '#/components/schemas/definitions_accounts_AccountPropertiesPassword'
      type: object
    definitions_accounts_ApiKeyProperties:
      description: The API key public properties
      properties:
        createdAt:
          description: The timestamp when the token was created
          example: "2020-01-01T00:00:00.000Z"
          type: string
        expiredAt:
          description: The timestamp of when the token expires
          example: "2020-01-01T00:00:00.000Z"
          type: string
        login:
          description: The login of the user
          example: jdoe
          type: string
        name:
          description: The name of the token
          example: API_KEY_1
          type: string
        permissions:
          description: Array of access rights
          items:
            enum:
              - smc
            example: smc
            type: string
          type: array
        prefix:
          description: The API key prefix
          example: a025671hps48
          type: string
        revokedAt:
          description: The timestamp of when the key has been revoked
          example: "2020-01-01T00:00:00.000Z"
          type: string
        uuid:
          $ref: '#/components/schemas/definitions_common_Uuid'
      required:
        - uuid
        - name
        - login
        - prefix
        - createdAt
        - expiredAt
        - permissions
      type: object
    definitions_accounts_CreateApiKeyResponse:
      allOf:
        - properties:
            token:
              description: The client token used to access the API.
              example: xxxxxxx:xxxxxxxx
              type: string
          type: object
        - $ref: '#/components/schemas/definitions_accounts_ApiKeyProperties'
    definitions_adminaccount_AdminAccountResponse:
      properties:
        login:
          description: admin's login
          example: admin
          type: string
      type: object
    definitions_algorithms_Algorithm:
      properties:
        isDeprecated:
          type: boolean
        isDrCompatible:
          type: boolean
        isObsolete:
          type: boolean
        isRecommended:
          type: boolean
        name:
          type: string
        ph1:
          type: boolean
        ph2:
          type: boolean
        strengths:
          items:
            type: integer
          type: array
      required:
        - name
        - strengths
        - ph1
        - ph2
      type: object
    definitions_algorithms_AuthAlgorithmsList:
      description: A map of auth algorithms.
      properties:
        result:
          items:
            $ref: '#/components/schemas/definitions_algorithms_Algorithm'
          type: array
        success:
          example: true
          type: boolean
      type: object
    definitions_algorithms_EncAlgorithmsList:
      description: A map of encryption algorithms.
      properties:
        result:
          items:
            $ref: '#/components/schemas/definitions_algorithms_Algorithm'
          type: array
        success:
          example: true
          type: boolean
      type: object
    definitions_appconfig_AppConfigResponse:
      properties:
        result:
          properties:
            FW_PORT:
              example: 1754
              type: number
            INSTALL_CERTIFICATE_MAX_UPLOAD_SIZE:
              example: 10
              type: number
            SNS_CLI_ATTACHMENTS_MAX_UPLOAD_SIZE:
              example: 100
              type: number
            SNS_CLI_OUTPUT_DIR_PATH:
              example: /var/tmp/sns-cli/output
              type: string
            SNS_CLI_SCRIPT_MAX_UPLOAD_SIZE:
              example: 2
              type: number
            UI_MAX_IDLE_DURATION:
              example: 5
              type: number
            VPN_MESH_ROUTE_BASED_MAX_PEERS:
              example: 30
              type: number
          type: object
        success:
          example: true
          type: boolean
      type: object
    definitions_auditlogs_LogsResponse:
      properties:
        lines:
          items:
            description: Audit log entry
            properties:
              action:
                description: action name
                enum:
                  - create
                  - update
                  - delete
                type: string
              actionStatus:
                description: action status
                enum:
                  - success
                  - fail
                type: string
              domain:
                description: domain key
                type: string
              fw:
                description: firewall name
                type: string
              hostname:
                description: host name
                example: smc.host.stormshield.eu
                type: string
              id:
                default: smc
                description: application identified
                type: string
              level:
                default: 30
                description: log level
                type: number
              msg:
                description: Text message containing details about action
                type: string
              name:
                default: audit
                description: log type
                type: string
              objectType:
                description: object type
                type: string
              pid:
                description: process Id
                type: number
              sessionid:
                description: session id string
                type: string
              smcVersion:
                description: SMC version number
                example: 3.6.1
                type: string
              time:
                description: timestamp
                type: string
              user:
                description: user name
                type: string
              v:
                default: 0
                type: number
            type: object
          type: array
      type: object
    definitions_auth-policy_ApiKeyDefaultPeriod:
      properties:
        duration:
          description: Default duration of a new api key
          type: integer
        period:
          description: Duration multiplier
          enum:
            - hours
            - days
            - months
            - years
          type: string
      required:
        - duration
        - period
      type: object
    definitions_auth-policy_ApiKeyPolicy:
      properties:
        apiKeyDefaultPeriod:
          $ref: '#/components/schemas/definitions_auth-policy_ApiKeyDefaultPeriod'
      required:
        - apiKeyDefaultPeriod
      type: object
    definitions_auth-policy_ApiKeyPolicyResult:
      properties:
        result:
          $ref: '#/components/schemas/definitions_auth-policy_ApiKeyPolicy'
      type: object
    definitions_auth-policy_Policy:
      properties:
        enabledAuth:
          description: Is local auth enabled ?
          type: boolean
        mandatoryType:
          description: Users passwords' mandatory character types
          enum:
            - none
            - alphanum
            - alphaandspecial
          example: alphanum
          type: string
        minLength:
          description: Users passwords' minimum length
          example: 8
          type: integer
      required:
        - minLength
        - mandatoryType
      type: object
    definitions_auth-policy_PolicyResult:
      properties:
        result:
          $ref: '#/components/schemas/definitions_auth-policy_Policy'
        success:
          example: true
          type: boolean
      type: object
    definitions_auth_AuthResponse:
      properties:
        currentRevision:
          $ref: '#/components/schemas/definitions_server-state_CurrentRevision'
        permissions:
          $ref: '#/components/schemas/definitions_auth_SessionPermissions'
        serverDate:
          description: server time
          example: Wed May 23 2018 13:34:49 GMT+0545 (+0545)
          type: string
        success:
          example: true
          type: boolean
        user:
          properties:
            identifier:
              description: user identifier (empty for remote users)
              example: admin
              type: string
            localAuth:
              description: whether local authentication is enabled for this user or not
              example: true
              type: boolean
            login:
              description: same as identifier if it exists
              type: string
            name:
              description: user long name
              type: string
            permissions:
              $ref: '#/components/schemas/definitions_auth_SessionPermissions'
            uuid:
              description: user uuid
              type: string
          type: object
        version:
          description: SMC version
          example: 0.0.1
          type: string
      type: object
    definitions_auth_ConflictErrorResponse:
      properties:
        currentAdmin:
          properties:
            connectionTime:
              example: "2023-01-05T11:15:28.227Z"
              type: string
            id:
              example: m9omtmY5xNrxc65h6dna6nEqII3N2g0B
              type: string
            ip:
              example: 192.168.123.1
              type: string
            user:
              example: admin
              type: string
          type: object
        serverDate:
          description: server time
          example: "2023-01-05T11:15:28.227Z"
          type: string
        success:
          default: false
          type: boolean
      type: object
    definitions_auth_SessionPermissions:
      description: session permissions
      items:
        example: smc
        type: string
      type: array
    definitions_autobackup_AutoBackupFirewallResultData:
      properties:
        name:
          description: Firewall\'s name
          example: some-firewall-name
          type: string
        reason:
          description: Reason why the backup has not been successfull. Only if success == false
          example: offline
          type: string
        serverdOutput:
          description: Serverd output. Only if the reason is a serverd error.
          example:
            - 200 code=00100200 msg="Unknown command"
          items:
            type: string
          type: array
        size:
          description: Backup file's size. Only if success == true
          example: 1234
          type: integer
        success:
          description: Whether the backup has been successfull
          type: boolean
        uuid:
          description: Firewall\'s uuid
          example: some-firewall-uuid
          type: string
      required:
        - uuid
        - name
        - success
      type: object
    definitions_autobackup_AutoBackupResult:
      properties:
        duration:
          description: Backup duration (in seconds)
          example: 60
          type: integer
        results:
          items:
            $ref: '#/components/schemas/definitions_autobackup_AutoBackupFirewallResultData'
          type: array
        size:
          description: Backup size (in bytes)
          example: 42
          type: integer
        startDate:
          example: "2016-11-22T15:38:01.844Z"
          format: date
          type: string
      required:
        - startDate
        - duration
        - size
        - results
      type: object
    definitions_backup_BackupDownloadBody:
      properties:
        includeHistory:
          description: Is backup should contain revision history
          example: false
          type: boolean
        password:
          description: Encryption password, leave blank if you don't want to encrypt the archive
          example: Iw76$k6!o#LtLmbs
          type: string
      type: object
    definitions_certificates_Certificate:
      properties:
        bindAddr:
          description: A reference to the firewall interface host object (Firewall_) for the enrollment
          format: uuid
          type: string
        crlBindAddr:
          description: A reference to the firewall interface host object (Firewall_) for the CRL
          format: uuid
          type: string
        crlPeriod:
          description: The period frequency (in seconds) for the CRL
          example: 21600
          type: number
        endDate:
          description: The validity end date
          example: "2017-03-03T08:37:36.000Z"
          format: date-time
          type: string
        hash:
          description: The certificate hash
          example: 42128ad2
          type: string
        issuer:
          description: The certificate issuer
          example: CN=Stormshield Users Authority,O=STORMSHIELD,C=FR
          type: string
        issuerHash:
          description: The certificate issuer hash
          example: RSA-SHA256
          type: string
        keySize:
          description: The certificate issuer keySize
          example: 256
          type: string
        keyType:
          description: The certificate issuer keyType
          example: RSA
          type: string
        name:
          description: The certificate name
          example: certificate-name
          type: string
        signatureAlgorithm:
          description: The certificate signatureAlgorithm
          example: RSA-SHA256
          type: string
        startDate:
          description: The validity start date
          example: "2016-03-03T08:37:36.000Z"
          format: date-time
          type: string
        status:
          description: The certificate status
          enum:
            - EXPIRED
            - NOT_YET_VALID
            - UNKNOWN
            - VALID
            - WILL_EXPIRE_SOON
        subject:
          description: The certificate subject
          example: emailAddress=firstname.lastname@stormshield.eu,CN=Firstname LASTNAME,O=STORMSHIELD,C=FR
          type: string
        tpm:
          description: The certificate TPM status
          enum:
            - none
            - ondisk
            - onchip
          type: string
        type:
          description: The certificate type
          enum:
            - x.509
            - reference
          type: string
        uuid:
          description: The certificate uuid
          example: certificate-uuid
          type: string
      type: object
    definitions_certificates_CertificateCreateScep:
      properties:
        default:
          description: set certificate as default for firewall
          type: boolean
        issuer:
          description: the issuer of SCEP certificate
          type: string
        subject:
          description: the subject of SCEP certificate
          type: string
      required:
        - subject
        - issuer
      type: object
    definitions_certificates_CertificatePropertiesUpdate:
      properties:
        bindAddr:
          description: A reference to the firewall interface host object (Firewall_) for the enrollment
          format: uuid
          type: string
        crlBindAddr:
          description: A reference to the firewall interface host object (Firewall_) for the CRL
          format: uuid
          type: string
        crlPeriod:
          description: The period frequency (in seconds) for the CRL
          example: 21600
          type: number
        default:
          description: set certificate as default for firewall
          type: boolean
        issuer:
          description: the issuer of SCEP certificate
          type: string
        subject:
          description: the subject of SCEP certificate
          type: string
      type: object
    definitions_certificates_CertificateUpload:
      description: upload a certificate's file
      properties:
        action:
          default: import
          description: type of action i.e. import on SMC or install on a firewall.
          enum:
            - import
            - install
          type: string
        certificate:
          description: the certificate file
          format: binary
          type: string
        default:
          description: set certificate as default for firewall
          type: boolean
        password:
          description: the p12 file password if any
          type: string
      required:
        - certificate
      type: object
    definitions_certificates_CertificatesList:
      items:
        $ref: '#/components/schemas/definitions_certificates_Certificate'
      type: array
    definitions_certificates_CertificatesRenewList:
      properties:
        certificates:
          description: certificate uuid list
          items:
            description: certificate uuid
            type: string
          type: array
      type: object
    definitions_certificates_CertificatesRenewRequestResults:
      properties:
        outputResult:
          properties:
            errors:
              description: list of errors on SMC side (bad requests or bad configuration)
              items:
                description: error
                properties:
                  certificateUuid:
                    description: uuid of certificate in error
                    type: string
                  code:
                    enum:
                      - ECERTISSUERMISMATCH
                      - ECERTMISSINGENROLLMENTSERVERURL
                      - ENONMATCHINGCERTTYPE
                      - ENOTFOUND
                      - EMISSINGFIREWALL
                      - EINVALIDVERSION
                      - EUNREACHABLEFIREWALL
                    type: string
                  message:
                    type: string
                type: object
              type: array
            requestResults:
              description: list of request results from SNS
              items:
                description: renew request status
                properties:
                  certificateUuid:
                    description: certificate uuid
                    type: string
                  errorMessage:
                    type: string
                  status:
                    description: transaction status
                    enum:
                      - IN_ERROR
                      - SUCCESS
                    type: string
                type: object
              type: array
          type: object
        result:
          description: certificate uuid list
          items:
            type: string
          type: array
        success:
          description: true if request has been executed
          type: boolean
      type: object
    definitions_certification-authorities_AuthoriesImportedCrl:
      description: CRL for authority
      properties:
        lastUpdate:
          format: date-time
          type: string
        nextUpdate:
          format: date-time
          type: string
        revokedCertificate:
          description: list of revoked certificates
          items:
            properties:
              reason:
                type: number
              revocationDate:
                format: date-time
                type: string
              serialNumber:
                type: string
            type: object
          type: array
      type: object
    definitions_certification-authorities_CertificationAuthoritiesList:
      items:
        $ref: '#/components/schemas/definitions_certification-authorities_CertificationAuthority'
      type: array
    definitions_certification-authorities_CertificationAuthoritiesTree:
      items:
        $ref: '#/components/schemas/definitions_certification-authorities_CertificationAuthorityWithChildren'
      type: array
    definitions_certification-authorities_CertificationAuthority:
      allOf:
        - $ref: '#/components/schemas/definitions_certification-authorities_CertificationAuthorityWithoutUuid'
        - $ref: '#/components/schemas/definitions_objects_ObjectUuid'
    definitions_certification-authorities_CertificationAuthorityWithChildren:
      allOf:
        - $ref: '#/components/schemas/definitions_certification-authorities_CertificationAuthorityWithoutUuid'
        - $ref: '#/components/schemas/definitions_objects_ObjectUuid'
        - properties:
            children:
              items:
                $ref: '#/components/schemas/definitions_certification-authorities_CertificationAuthorityWithChildren'
              type: array
            mtype:
              description: Type of the certificate ("certificate" or "authority")
              enum:
                - certificate
                - authority
              type: string
          type: object
    definitions_certification-authorities_CertificationAuthorityWithoutUuid:
      allOf:
        - $ref: '#/components/schemas/definitions_certification-authorities_CertificationAuthorityWriteableProps'
        - properties:
            endDate:
              description: The end date of the CA's certificate
              format: date
              type: string
            hash:
              description: The hash of the CA's certificate
              example: 66528ad2
              type: string
            importedCrl:
              $ref: '#/components/schemas/definitions_certification-authorities_AuthoriesImportedCrl'
            issuer:
              description: The issuer of the CA's certificate
              example: CN=Company Users Authority,O=COMPANY,C=FR
              type: string
            startDate:
              description: The start date of the CA's certificate
              format: date
              type: string
            status:
              description: Authority current status
              example: VALID
              type: string
            subject:
              description: The subject of the CA's certificate
              example: emailAddress=firstname.lastname@company.com,CN=Firstname LASTNAME,O=COMPANY,C=FR
              type: string
          type: object
    definitions_certification-authorities_CertificationAuthorityWriteableProps:
      properties:
        comment:
          description: The description of the CA
          example: Site 1 CA
          type: string
        crlDistributionPoints:
          description: The list of CRL distribution points for this CA
          items:
            example: https://first.url.eu/certificaterevocationlist.crl
            type: string
          type: array
        enrollment:
          properties:
            estAlias:
              description: Additional path segment if protocol is EST and server provides service for multiple CAs
              example: ecdsa_est
              type: string
            protocol:
              description: The enrollment protocol (SCEP if server URL protocol is HTTP, EST if HTTPS)
              enum:
                - SCEP
                - EST
              readOnly: true
              type: string
            scepMethod:
              enum:
                - get
                - post
              type: string
            serverCaname:
              description: The enrollment server CA name on SNS if protocol is EST; usually a DN if no short name has been defined
              example: CN=ManagementCA O=EJBCA Sample C=SE
              type: string
            serverUrl:
              description: The URL of the enrollment server for this authority
              example: https://testrfc7030.com:8443/
              type: string
          required:
            - serverUrl
          type: object
        name:
          description: The name of the CA
          example: MyCA
          type: string
      type: object
    definitions_cfgcheck_Incoherencies:
      properties:
        result:
          items:
            $ref: '#/components/schemas/definitions_cfgcheck_Incoherency'
          type: array
        sucess:
          type: boolean
      type: object
    definitions_cfgcheck_Incoherency:
      properties:
        fwid:
          description: the fwid of the firewall where the incoherency comes from
          type: string
        incoherentElementType:
          description: the type of the element the incoherency come from
          enum:
            - group
            - rule
          type: string
        involvedItems:
          description: contains all the elements involved in the incoherency
          items:
            $ref: '#/components/schemas/definitions_cfgcheck_InvolvedItem'
          type: array
        level:
          description: criticity level of the incoherency
          enum:
            - warning
            - error
          type: string
        origin:
          $ref: '#/components/schemas/definitions_cfgcheck_InvolvedItem'
        type:
          description: the type of incoherency
          enum:
            - empty-group
            - empty-group-in-rule-fields
            - ip-collision-equals
            - ip-collision-secant
            - ip-collision-contains
            - rule-overlap
            - missing-mac-in-profinet-rule
            - mac-only-host-in-nat-rule
            - mac-only-host-not-supported-in-version
            - mac-only-host-in-router
            - mac-only-host-in-router-in-rule
            - conflicting-config-in-ethernet-rule
            - config-in-ethernet-rule-not-supported-by-license
            - variables-unresolvable-object
            - internal-error
            - network-interface-ipv4-overlap
            - unknown-network-interface
            - unknown-network-interface-address
            - unknown-network-interface-hidden
            - incompatible-network-interface
            - network-interface-stp-incompatibility
            - network-interface-aggregate-vlan-incompatibility
            - incompatible-dr-profile
            - certificate-algorithm-dr-incompatibility
          type: string
        weight:
          description: used to sort incoherencies by levels and domains
          type: integer
      type: object
    definitions_cfgcheck_InvolvedItem:
      properties:
        entityId:
          description: the uuid of the involved item
          type: string
        field:
          description: the field of object that contains sub involved items
          enum:
            - src
            - dst
            - natSrc
            - natDst
            - srcInterface
            - dstInterface
            - srcPort
            - dstPort
            - natSrcPort
            - natDstPort
            - srcGeo
            - dstGeo
            - members
            - primaryRules
            - secondaryRules
            - subFolders
            - firewalls
            - rules
            - action
            - via
            - enforceIPSecForward
            - limit
            - qname
            - ackqname
            - inspectionService
            - natDstForFilterRule
            - sipRedirect
            - forceDscp
            - tosValue
            - router
            - encryptionProfile
          type: string
        fullObj:
          description: full object
          type: object
        objectType:
          description: the type of object
          enum:
            - rule
            - object
            - group
            - folder
            - firewall
            - value
            - interface
            - topology
            - certificate
          type: string
        ruleIndex:
          description: The index of the rule if the entity is a rule
          type: integer
      type: object
    definitions_cfgdiff_CfgDiffResult:
      properties:
        result:
          properties:
            deployableCfgBirthDate:
              description: The date at which the current deployable configuration was generated
              type: string
            diff:
              description: Return from command diff applied on last deployed configuration and currently deployable configuration
              example: |
                diff -r -x slotinfo -x CA.cert.pem -N --suppress-blank-empty --ignore-blank-lines -I '^#' -U 3 --text /tmp/Synapse/sns/sns-2/current-deployed-configuration/usr/Firewall/ConfigFiles/Global/Filter/01 /tmp/Synapse/sns/sns-2/tmpdir/usr/Firewall/ConfigFiles/Global/Filter/01
                --- /tmp/Synapse/sns/sns-2/current-deployed-configuration/usr/Firewall/ConfigFiles/Global/Filter/01	1970-01-01 00:00:00.000000000 +0000
                +++ /tmp/Synapse/sns/sns-2/tmpdir/usr/Firewall/ConfigFiles/Global/Filter/01	2018-05-31 12:36:29.000000000 +0000
                @@ -0,0 +1,10 @@
                +[Filter]
                +separator color="CEE8DF" comment="My SMC (high priority)" collapse="0"
                +separator color="c0c0c0" comment="Some separator" collapse="0"
                +pass from Any to Any
                +separator color="c0c0c0" comment="Separator- rule grouping" collapse="0"
                +off block from Any to Any
                +separator color="5795CA" comment="sns-2" collapse="0"
                +block from Any to Any
                +
                +[NAT]
              type: string
            fileName:
              description: filename for download
              example: sns-name_20010203_040506.diff
              type: string
            lastDeployedCfgBirthDate:
              description: The date when the last deployed configuration was generated
              type: string
            revisionNumber:
              description: Revision number of the last deployed configuration
              example: "00001"
              type: integer
          type: object
        sucess:
          example: true
          type: boolean
      type: object
    definitions_cfgdiff_CfgDiffStatusResult:
      properties:
        result:
          items:
            $ref: '#/components/schemas/definitions_cfgdiff_CfgDiffStatusResultData'
          type: array
        sucess:
          type: boolean
      type: object
    definitions_cfgdiff_CfgDiffStatusResultData:
      properties:
        diffStatus:
          description: the status of the configuration differential
          example: unchanged
          type: string
        uuid:
          description: Firewall uuid
          example: 75532250-c878-42f1-8871-bafa68e944d4
          type: string
      type: object
    definitions_common_ErrorResponse:
      properties:
        errors:
          $ref: '#/components/schemas/definitions_common_ErrorsList'
        success:
          default: false
          description: False in case of error
          enum:
            - false
          type: boolean
      required:
        - success
        - errors
      type: object
    definitions_common_ErrorsList:
      items:
        properties:
          code:
            example: ""
            type: string
          ctx:
            example:
              firewall: some-firewall-uuid
            type: object
          field:
            example: ""
            type: string
          message:
            example: ""
            type: string
        required:
          - code
        type: object
      type: array
    definitions_common_ForbiddenBecauseOfUserScopeResponse:
      properties:
        errors:
          items:
            properties:
              code:
                default: EFORBIDDENINUSERSCOPE
                enum:
                  - EFORBIDDENINUSERSCOPE
                  - EFORBIDDENINUSERSCOPEUSAGE
                type: string
              ctx:
                properties:
                  folders:
                    description: List of folders names
                    example: MySMC, France
                    type: string
                  items:
                    description: List of elements names
                    example: office_network, france_geo
                    type: string
                type: object
              message:
                example: The action is prohibited due to consequences beyond the user's editing scope.
                type: string
            required:
              - code
            type: object
          type: array
        success:
          default: false
          description: False in case of error
          enum:
            - false
          type: boolean
      required:
        - success
        - errors
      type: object
    definitions_common_SuccessResponse:
      properties:
        success:
          default: true
          description: Always set to true on success
          enum:
            - true
          type: boolean
      required:
        - success
      type: object
    definitions_common_Uuid:
      description: An uuid
      example: 75532250-c878-42f1-8871-bafa68e944d4
      type: string
    definitions_config_DRActivation:
      properties:
        result:
          description: DR Mode status
          example: false
          type: boolean
        success:
          description: Action success
          example: true
          type: boolean
      type: object
    definitions_config_Initial:
      properties:
        result:
          properties:
            gateway:
              description: Gateway IP of the initial configuration
              example: 192.168.253.254
              type: string
            ip:
              description: IP of the initial configuration
              example: 192.168.1.10
              type: string
            mask:
              description: IP mask of the initial configuration
              example: 255.255.0.0
              type: string
            status:
              description: initial interface configuration status
              enum:
                - disabled
                - static
                - dhcp
              type: string
          type: object
        success:
          description: Action success
          example: true
          type: boolean
      type: object
    definitions_config_InitialCloudConfiguration:
      properties:
        adminpassword:
          description: SMC administrator password
          example: KqLHdFDbjf$dhgsb
          type: string
        awsInstanceId:
          description: The cloud instance id on which SMC is launching
          example: i-0070c015f673e7159
          type: string
      type: object
    definitions_config_InitialConfiguration:
      properties:
        adminpassword:
          description: SMC administrator password
          type: string
        dns:
          description: DNS address
          example: 127.168.57.1
          type: string
        gateway:
          description: configured gateway for this interface
          example: 192.168.17.56
          type: string
        hostname:
          description: Name of the host
          example: SMC
          type: string
        ip:
          description: interface IPV4 address
          example: 127.0.0.1
          type: string
        keyboardLayout:
          description: Keyboard layout
          example: fr
          type: string
        mask:
          description: the configured IP mask for this interface
          example: 255.255.255.0
          type: string
        status:
          description: initial interface configuration status
          enum:
            - disabled
            - static
            - dhcp
          type: string
      type: object
    definitions_config_InitializedState:
      properties:
        smcOnCloud:
          description: Specify if SMC is running on an cloud environment. If not, it is empty
          enum:
            - ""
            - aws
            - outscale
          type: string
        status:
          description: Whether SMC has been already initialized or not
          type: boolean
      type: object
    definitions_config_NetworkConfiguration:
      properties:
        dns:
          description: DNS address
          example: 127.168.57.1
          type: string
        hostname:
          description: Name of the host
          example: SMC
          type: string
        interfaces:
          description: List of interfaces
          items:
            properties:
              contactInterface:
                description: True if the interface is used to reach the client
                example: true
                type: boolean
              gateway:
                description: configured gateway for this interface (only for disabled and static status)
                example: 192.168.17.56
                type: string
              ipv4Address:
                description: interface ipV4 address (only for disabled and static status)
                example: 127.0.0.1
                type: string
              linkType:
                description: Link type of the interface
                example: ether
                type: string
              macAddress:
                description: Mac address
                example: 00:10:18:4e:5d:32
                type: string
              mask:
                description: the configured ip mask for this interface (only for disabled and static status)
                example: 255.255.255.0
                type: string
              name:
                description: interface name
                example: eth0
                type: string
              status:
                description: interface current configuration status
                enum:
                  - disabled
                  - static
                  - dhcp
                type: string
              up:
                description: physical interface current state (UP = true / DOWN = false)
                example: true
                type: boolean
            type: object
          type: array
      type: object
    definitions_config_NetworkInterfacesListResponse:
      items:
        properties:
          contactInterface:
            description: True if the interface is used to reach the client
            example: true
            type: boolean
          gateway:
            description: configured gateway for this interface (only for disabled and static status)
            example: 192.168.17.56
            type: string
          ipv4Address:
            description: interface ipV4 address (only for disabled and static status)
            example: 127.0.0.1
            type: string
          linkType:
            description: Link type of the interface
            example: ether
            type: string
          macAddress:
            description: Mac address
            example: 00:10:18:4e:5d:32
            type: string
          mask:
            description: the configured ip mask for this interface (only for disabled and static status)
            example: 255.255.255.0
            type: string
          name:
            description: interface name
            example: eth0
            type: string
          status:
            description: interface current configuration status
            enum:
              - disabled
              - static
              - dhcp
            type: string
          up:
            description: physical interface current state (UP = true / DOWN = false)
            example: true
            type: boolean
        type: object
      type: array
    definitions_config_NetworkInterfacesUpdateList:
      items:
        properties:
          gateway:
            description: configured gateway for this interface (only for disabled and static status)
            example: 192.168.17.56
            type: string
          ipv4Address:
            description: interface ipV4 address (only for disabled and static status)
            example: 127.0.0.1
            type: string
          mask:
            description: the configured ip mask for this interface (only for disabled and static status)
            example: 255.255.255.0
            type: string
          name:
            description: interface name
            example: eth0
            type: string
          status:
            description: interface current configuration status
            enum:
              - disabled
              - static
              - dhcp
            type: string
        type: object
      type: array
    definitions_config_PAPIActivation:
      properties:
        result:
          properties:
            isPapiActive:
              description: Public API activation status
              example: true
              type: boolean
          type: object
        success:
          description: Action success
          example: true
          type: boolean
      type: object
    definitions_config_Sls:
      properties:
        result:
          description: IP or Fqdn of the SLS server
          example: www.url-sls.com
          type: string
        success:
          description: Action success
          example: true
          type: boolean
      type: object
    definitions_config_VpnCrlRequired:
      properties:
        result:
          description: VPN CRL REQUIRED status
          example: false
          type: boolean
        success:
          description: Action success
          example: true
          type: boolean
      type: object
    definitions_custom-properties_CustomProperty:
      allOf:
        - $ref: '#/components/schemas/definitions_custom-properties_CustomPropertyWithoutUuid'
        - properties:
            uuid:
              type: string
          required:
            - uuid
          type: object
      description: A custom property
    definitions_custom-properties_CustomPropertyWithoutUuid:
      description: A custom property
      properties:
        name:
          example: myNewCustomProp
          type: string
      required:
        - name
      type: object
    definitions_custom-properties_MultipleCustomPropertiesResponse:
      properties:
        result:
          items:
            $ref: '#/components/schemas/definitions_custom-properties_CustomProperty'
          type: array
        success:
          type: boolean
      type: object
    definitions_custom-properties_SingleCustomPropertyResponse:
      properties:
        result:
          $ref: '#/components/schemas/definitions_custom-properties_CustomProperty'
        success:
          type: boolean
      type: object
    definitions_deploy_DeployBody:
      description: deploy request body
      properties:
        byNames:
          description: if truthy, the target field will be interpreted as an array of firewall names
          type: boolean
        comment:
          description: The comment that will be attached to the deployment
          type: string
        redeploy:
          description: if truthy, it's a redeployment request for one firewall. Else, it's a deployment request
          type: boolean
        target:
          description: can also be "all" to run the deployment on every firewall
          items:
            description: Firewall's UUID (or name if byNames has been set) on which the deployment needs to be performed
            type: string
          type: array
      required:
        - target
    definitions_deploy_DeploymentMonitoringResponse:
      properties:
        date:
          description: Start execution date
          format: date
          type: string
        firewalls:
          items:
            description: Can have more properties which are specific to the firewall and not related to the deployment operation
            properties:
              code:
                description: Current deployment code (similar to state)
                type: string
              name:
                description: Firewall's name
                type: string
              postponed:
                description: true if the target firewall was initially disconnected when this deployment started
                type: boolean
              revision:
                description: Revision of the config that is currently deployed on this firewall
                type: string
              state:
                description: Current deployment state
                type: string
              step:
                description: Current deployment step on this firewall
                enum:
                  - 0
                  - 1
                  - 2
                  - 3
                  - 4
                type: integer
              total:
                description: Total number of deployment steps on this firewall. Usefull to know if the deployment is finished
                enum:
                  - 1
                  - 2
                  - 3
                  - 4
                type: integer
              uuid:
                description: Firewall's UUID
                type: string
            type: object
          type: array
        revision:
          description: the revision number of the deployment
          type: string
        success:
          enum:
            - true
          type: boolean
        user:
          description: Login of the user who launched the deployment operation
          type: string
      type: object
    definitions_deployment-warnings_ConfigEditors:
      items:
        properties:
          editorIdentifier:
            description: The user identifier
            example: user69
            type: string
          editorName:
            description: The user name of the editor. This name can come from Database or from ldap/radius server
            example: John Doe
            type: string
          editorUuid:
            $ref: '#/components/schemas/definitions_common_Uuid'
          isDeleted:
            description: This value is true if the user is no longer present on SMC
            example: false
            type: boolean
        type: object
      type: array
    definitions_encryptionProfiles_EncryptionProfileList:
      items:
        $ref: '#/components/schemas/definitions_encryptionProfiles_EncryptionProfileProperties'
      type: array
    definitions_encryptionProfiles_EncryptionProfileProperties:
      allOf:
        - $ref: '#/components/schemas/definitions_objects_ObjectUuid'
        - $ref: '#/components/schemas/definitions_encryptionProfiles_EncryptionProfilePropertiesWithoutUuid'
        - $ref: '#/components/schemas/definitions_encryptionProfiles_EncryptionProfilePropertiesAdditionalProperties'
    definitions_encryptionProfiles_EncryptionProfilePropertiesAdditionalProperties:
      properties:
        hasDeprecatedAlgorithms:
          description: If true encryption profile has at least one algorithm tagged as deprecated
          example: false
          type: boolean
      required:
        - hasDeprecatedAlgorithms
      type: object
    definitions_encryptionProfiles_EncryptionProfilePropertiesWithoutUuid:
      properties:
        builtin:
          description: If true encryption profile is considered as builtin in SMC, webui uses it to disable some actions
          example: true
          type: boolean
        comment:
          description: Encryption profile's description/comment
          type: string
        name:
          description: Encryption profile's name
          example: newEncProfile
          type: string
        ph1:
          $ref: '#/components/schemas/definitions_encryptionProfiles_Ph1Profile'
        ph2:
          $ref: '#/components/schemas/definitions_encryptionProfiles_Ph2Profile'
      required:
        - name
        - comment
        - ph1
        - ph2
      type: object
    definitions_encryptionProfiles_Ph1Profile:
      properties:
        defaultdh:
          description: Default Diffie-Helman Group
          enum:
            - 1
            - 2
            - 5
            - 14
            - 15
            - 16
            - 19
            - 20
          type: integer
        defaultprf:
          description: Default PRF
          enum:
            - auto
            - SHA256
            - SHA384
            - SHA512
          type: string
        lifetime:
          description: IKE lifetime
          example: 3600
          type: integer
        proposals:
          description: IKE Authentication proposals
          items:
            $ref: '#/components/schemas/definitions_encryptionProfiles_Ph1Proposal'
          type: array
      required:
        - defaultdh
        - defaultprf
        - lifetime
        - proposals
      type: object
    definitions_encryptionProfiles_Ph1Proposal:
      properties:
        auth:
          description: IKE auth algorithm name
          example: sha2_256/256
          type: string
        enc:
          description: IKE enc algorithm name
          example: aes/256
          type: string
      required:
        - auth
        - enc
      type: object
    definitions_encryptionProfiles_Ph2Profile:
      properties:
        auth:
          description: IPSec auth algorithm name
          example:
            - hmac_sha256/256
          items:
            type: string
          type: array
        enc:
          description: IPSec enc algorithm name
          example:
            - aes/256
          items:
            type: string
          type: array
        lifetime:
          description: IPSec lifetime
          example: 3600
          type: integer
        pfs:
          description: IPSec pfs
          enum:
            - 0
            - 1
            - 2
            - 5
            - 14
            - 15
            - 16
          type: integer
      required:
        - pfs
        - lifetime
        - auth
        - enc
      type: object
    definitions_export_FilteredIds:
      description: Array of firewall uuids to filter on
      properties:
        filteredIds:
          example:
            - 75532250-c878-42f1-8871-bafa68e944d4
            - 3eb7081a-59de-48c5-a5aa-136bf98802a9
          items:
            type: string
          type: array
      type: object
    definitions_firewalls_FirewallDynaInfoResponse:
      items:
        description: Status of firewall
        properties:
          cpu:
            description: Firewall's cpu
            example: 2
            type: number
          disk:
            description: Firewall's disk space
            example: 200
            type: number
          ram:
            description: Firewall's ram
            example: 2
            type: number
          timestamp:
            description: Firewall's connection timestamp
            example: "2015-03-17T16:33:01Z"
            format: date
            type: string
        type: object
      type: array
    definitions_firewalls_FirewallHaInfoResponse:
      properties:
        result:
          properties:
            active:
              description: The firewall ha mode is active
              example: true
              type: boolean
            passive:
              description: The firewall ha mode is passive
              example: false
              type: boolean
          type: object
        success:
          example: true
          type: boolean
      type: object
    definitions_firewalls_FirewallImportErrorResponse:
      description: Error while importing firewalls
      properties:
        errors:
          items:
            properties:
              message:
                type: string
            type: object
          type: array
        success:
          example: false
          type: boolean
      type: object
    definitions_firewalls_FirewallMonitorRouteExportResponse:
      properties:
        result:
          items:
            properties:
              activeLastChange:
                description: Date of last active change
                type: string
              firewallName:
                description: Parent firewall name
                example: my_firewall
                type: string
              folderName:
                description: Parent folder name
                example: My SMC
                type: string
              gatewayAddr:
                description: Gateway address
                example: 192.168.1.1
                type: string
              gatewayJitter:
                description: Network jitter compute by SNS in ms
                example: 0
                type: number
              gatewayLatency:
                description: Network latency compute by SNS in ms
                example: 0
                type: number
              gatewayLoss:
                description: Packet loss percentage
                example: 2
                type: number
              gatewayName:
                description: Gateway name
                example: my_gateway
                type: string
              gatewayRouterType:
                description: Gateway name
                example: my_gateway
                type: string
              gatewayType:
                description: PBR or Default route
                example: Default route
                type: string
              gatewayUnreachable:
                description: Unreachable percentage
                example: 0
                type: number
              ipv:
                description: IP version
                example: 4
                type: number
              lastChecked:
                description: Date of last checked
                type: string
              monitor:
                description: SDWAN supervision method
                example: icmp
                type: string
              routerName:
                description: Parent router name
                example: my_router
                type: string
              rtid:
                description: Router ID
                example: 1
                type: number
              sla:
                description: 1 if a sla is assigned, 0 instead
                type: number
              slaJitter:
                description: Network jitter compute by SNS in ms
                example: 0
                type: number
              slaLatency:
                description: Network latency compute by SNS in ms
                example: 0
                type: number
              slaLoss:
                description: Packet loss percentage
                example: 2
                type: number
              slaUnreachable:
                description: Unreachable percentage
                example: 0
                type: number
              state:
                description: Gateway status
                enum:
                  - ACTIVE
                  - AVAILABLE
                  - ACTIVE, DEGRADED
                  - AVAILABLE, DEGRADED
                  - NOT AVAILABLE
                  - NO SUPERVISON DATA
                type: string
              stateLastChange:
                description: Date of last status change
                type: string
              usagePrct:
                description: Packet percentage to pass through this gateway than others gateways
                example: 0
                type: number
            type: object
          type: array
        success:
          example: true
          type: boolean
      type: object
    definitions_firewalls_FirewallMonitorRouteResponse:
      properties:
        result:
          items:
            allOf:
              - $ref: '#/components/schemas/definitions_objects_RouterPropertiesWithoutUuid'
              - properties:
                  _type:
                    description: Indicates items type
                    enum:
                      - gateway
                      - router
                    type: string
                  expanded:
                    description: Indicate if the branch is collapse or not
                    type: boolean
                  folderName:
                    description: Parent folder name
                    example: My SMC
                    type: string
                  gatewayAddr:
                    description: Gateway address
                    example: 192.168.1.1
                    type: string
                  gatewayType:
                    description: Indicate if it is the principal gateway or the failover
                    example: Principal
                    type: string
                  id:
                    description: ID uses to build tree
                    example: ff-00
                    type: string
                  ipv:
                    description: IP version
                    example: 4
                    type: number
                  jitter:
                    description: Network jitter compute by SNS in ms
                    example: 0
                    type: number
                  lastChecked:
                    description: Date of last checked
                    type: string
                  latency:
                    description: Network latency compute by SNS in ms
                    example: 0
                    type: number
                  leaf:
                    description: Technical information uses to build tree
                    type: boolean
                  loaded:
                    description: Technical information uses to build tree
                    type: boolean
                  loss:
                    description: Packet loss percentage
                    example: 2
                    type: number
                  name:
                    description: Firewall name
                    example: FW1
                    type: string
                  parentId:
                    description: Parent ID to build tree
                    type: string
                  quality:
                    description: Gateway quality state
                    example: UNDEF
                    type: string
                  routeType:
                    description: Route type
                    example: PBR
                    type: string
                  rtid:
                    description: Router ID
                    example: 1
                    type: number
                  stateLastChange:
                    description: Date of last status change
                    type: string
                  status:
                    description: Router status
                    enum:
                      - not-available
                      - available
                      - active
                      - active-degraded
                      - available-degraded
                      - no-data
                    type: string
                  unreachable:
                    description: Unreachable percentage
                    example: 0
                    type: number
                  usagePrct:
                    description: Packet percentage to pass through this gateway than others gateways
                    example: 0
                    type: number
                  uuid:
                    description: Firewall UUID
                    example: ff-00
                    type: string
                type: object
          type: array
        success:
          example: true
          type: boolean
        total:
          description: The total count of records known by the server (in case of pagination)
          example: 10
          type: integer
      type: object
    definitions_firewalls_FirewallPropertiesWithStatusInformation:
      allOf:
        - $ref: '#/components/schemas/definitions_firewalls_FirewallPropertiesWithUuid'
        - properties:
            confRevision:
              description: The current confRevision
              example: "00001"
              type: string
            currentDeploymentConfRevision:
              description: The confRevision number being deployed if firewall is in need Reboot
              example: "00002"
              type: string
            endMaintenanceDate:
              description: End of maintenance date
              example: "2042-03-17T00:00:00Z"
              type: string
            ha:
              description: true if the Firewall is in high availability
              example: false
              type: boolean
            healthIndicators:
              description: |
                The health indicators for a firewall.
              properties:
                advancedAntivirus:
                  $ref: '#/components/schemas/definitions_firewalls_HealthIndicator'
                breachFighterSandboxing:
                  $ref: '#/components/schemas/definitions_firewalls_HealthIndicator'
                cert:
                  $ref: '#/components/schemas/definitions_firewalls_HealthIndicator'
                configuration_validation:
                  $ref: '#/components/schemas/definitions_firewalls_HealthIndicator'
                cpu:
                  $ref: '#/components/schemas/definitions_firewalls_HealthIndicator'
                cpu_temp:
                  $ref: '#/components/schemas/definitions_firewalls_HealthIndicator'
                crl:
                  $ref: '#/components/schemas/definitions_firewalls_HealthIndicator'
                deployment_need_reboot:
                  $ref: '#/components/schemas/definitions_firewalls_HealthIndicator'
                disk:
                  $ref: '#/components/schemas/definitions_firewalls_HealthIndicator'
                extendedWebControl:
                  $ref: '#/components/schemas/definitions_firewalls_HealthIndicator'
                fan:
                  $ref: '#/components/schemas/definitions_firewalls_HealthIndicator'
                halink:
                  $ref: '#/components/schemas/definitions_firewalls_HealthIndicator'
                industrial:
                  $ref: '#/components/schemas/definitions_firewalls_HealthIndicator'
                local_modification:
                  $ref: '#/components/schemas/definitions_firewalls_HealthIndicator'
                mem:
                  $ref: '#/components/schemas/definitions_firewalls_HealthIndicator'
                power:
                  $ref: '#/components/schemas/definitions_firewalls_HealthIndicator'
                raid:
                  $ref: '#/components/schemas/definitions_firewalls_HealthIndicator'
                router:
                  $ref: '#/components/schemas/definitions_firewalls_HealthIndicator'
                vulnerabilityManager:
                  $ref: '#/components/schemas/definitions_firewalls_HealthIndicator'
              type: object
            isBaseStation:
              example: false
              type: boolean
            lastConnection:
              description: Firewall's last connexion date
              example: "2015-03-17T16:33:01Z"
              format: date
              type: string
            licenseCapabilities:
              description: Firewall license options
              properties:
                advancedAntivirus:
                  description: End of Advanced Antivirus license validity
                  example: "2042-03-17T00:00:00Z"
                  type: string
                breachFighterSandboxing:
                  description: End of Breach Fighter Sandboxing license validity
                  example: "2042-03-17T00:00:00Z"
                  type: string
                extendedWebControl:
                  description: End of Extended Web Control license validity
                  example: "2042-03-17T00:00:00Z"
                  type: string
                industrial:
                  description: End of Industrial license validity
                  example: "2042-03-17T00:00:00Z"
                  type: string
                vulnerabilityManager:
                  description: End Stormshield Vulnerability Manager license validity
                  example: "2042-03-17T00:00:00Z"
                  type: string
              type: object
            licenseStatus:
              description: |
                The license status for a firewall. It's represented as an object having a status, the maximum number of connnected firewall allowed by the license, and the number of days before the license expiration date.
              properties:
                firewallsMax:
                  description: Maximum number of connected firewalls allowed by the license
                  type: integer
                remainingDays:
                  description: Number of days before the license expiration date
                  type: integer
                status:
                  enum:
                    - LICENSE_IS_OK
                    - LICENSE_TOOEARLY
                    - LICENSE_EXPIRED
                    - LICENSE_WARN
                    - LICENSE_FIREWALL_MAX
                  type: string
              type: object
            networkNeedSync:
              description: Indicates wether SNS network data has to be synchronized
              example: false
              type: boolean
            nsrpcIneligibilityReasons:
              description: |
                Ineligibility reason codes for the execution of CLI SNS scripts inside a firewall:
                  - `unsupported-fw-version` : If the firewall version is below the minimal version for the functionnality (2.4.0)
                  - `disconnected-fw` : If the firewall is unconnected
                  - `is-base-station` : Bases station are not inelibility
              example:
                - unsupported-fw-version
                - disconnected-fw
                - is-base-station
              items:
                enum:
                  - unsupported-fw-version
                  - disconnected-fw
                  - is-base-station
                type: string
              type: array
            serial:
              description: Firewall's serial number
              example: U70SXA02D0010A7
              type: string
            status:
              description: Firewall's status (operational / nonCritical / critical / disconnected / provisioned)
              example: operational
              type: string
            systemNodeName:
              description: The system name of the node
              type: string
            version:
              description: Firewall's version
              example: 2.4.0
              type: string
          type: object
    definitions_firewalls_FirewallPropertiesWithUuid:
      allOf:
        - $ref: '#/components/schemas/definitions_objects_ObjectUuid'
      properties:
        autoSizingCurMem:
          description: The current memory of the virtual machine (only for PAYG)
          example: 1024
          type: integer
        autoSizingModel:
          description: The current model of the virtual machine (only for PAYG)
          example: EVA1
          type: string
        isNetworkEnabled:
          example: false
          type: boolean
        lacp:
          example: false
          type: boolean
        lockPublicIpToContactIp:
          description: When true (default value), the public IP address will always worth the contact IP
          example: true
          type: boolean
        name:
          description: the firewall's name
          example: someFirewallName
          type: string
        parentFolder:
          description: Parent folder's UUID
          example: some-folder-uuid
          type: string
        parentFolderPath:
          description: Parent folder's path
          example: foo/bar/
          type: string
        paygExpiration:
          description: The expiration date of the pay as you go (only for PAYG)
          example: "2018-12-25"
          type: string
        place:
          example: Paris
          type: string
        publicIpAddress:
          description: The public IP address that will be used in configuration deployment
          example: 1.1.1.1
          type: string
        publicIpAddressHost:
          description: The uuid of reserved object or Any object used in VPN topology if firewall is dynamic peer
          example: network-any
          type: string
        refCertificates:
          description: UUIDs list of the installed certificates for this firewall
          items:
            example: some-certificate-uuid-1
            type: string
          type: array
        refCustomProperties:
          description: Custom properties for this firewall
          items:
            properties:
              uuid:
                description: global custom property UUID
                example: prop1
                type: string
              value:
                description: value for this firewall
                example: myValue
                type: string
            type: object
          type: array
        refVariables:
          description: Custom variables for this firewall
          items:
            properties:
              uuid:
                description: global variable UUID
                example: var1
                type: string
              value:
                description: value for this firewall
                example: myValue
                type: string
            type: object
          type: array
        slsIpAddress:
          description: The IP address of the firewall on the SLS server
          example: 2.2.2.2
          type: string
        vpnInterfaceSrc:
          description: The uuid of reserved object or Any object used as vpn interface source
          example: network-any
          type: string
      required:
        - uuid
    definitions_firewalls_FirewallPropertiesWithoutUuid:
      properties:
        folderTargetUuid:
          description: The uuid of a folder
          example: root-folder
          type: string
        isNetworkEnabled:
          example: false
          type: boolean
        lockPublicIpToContactIp:
          description: When true (default value), the public IP address will always worth the contact IP
          example: true
          type: boolean
        name:
          description: the firewall's name or base-station's name
          example: someFirewallName
          type: string
        parentFolderPath:
          description: Parent folder's path
          example: foo/bar/
          type: string
        place:
          example: Paris
          type: string
        publicIpAddress:
          description: The public IP address that will be used in configuration deployment
          example: 1.1.1.1
          type: string
        refCertificates:
          description: UUIDs list of the installed certificates for this firewall
          items:
            example: some-certificate-uuid-1
            type: string
          type: array
        refCustomProperties:
          description: Custom properties for this firewall
          items:
            properties:
              uuid:
                description: global custom property UUID
                example: prop1
                type: string
              value:
                description: value for this firewall
                example: myValue
                type: string
            type: object
          type: array
        refVariables:
          description: Custom variables for this firewall
          items:
            properties:
              uuid:
                description: global variable UUID
                example: var1
                type: string
              value:
                description: value for this firewall
                example: myValue
                type: string
            type: object
          type: array
        vpnDefaultLocalAddress:
          description: The uuid of reserved object or Any object used as vpn interface source
          example: network-any
          type: string
      required:
        - name
      type: object
    definitions_firewalls_FirewallsImportSuccess:
      description: import firewalls success response
      properties:
        result:
          $ref: '#/components/schemas/definitions_firewalls_FirewallsImportSummary'
        success:
          example: true
          type: boolean
      type: object
    definitions_firewalls_FirewallsImportSuccessWithPackGen:
      description: import firewalls' success response with at least one generated package
      properties:
        result:
          $ref: '#/components/schemas/definitions_firewalls_FirewallsImportSummaryWithPackGeneration'
        success:
          example: true
          type: boolean
      type: object
    definitions_firewalls_FirewallsImportSummary:
      description: import summary for firewalls
      properties:
        generate:
          properties:
            error:
              type: integer
            success:
              type: integer
          type: object
        import:
          properties:
            created:
              type: integer
            error:
              type: integer
            updated:
              type: integer
          type: object
        logs:
          items:
            properties:
              ctx:
                properties:
                  lineNumber:
                    type: integer
                type: object
              level:
                enum:
                  - info
                  - warn
                  - error
                type: string
              message:
                type: string
            type: object
          type: array
      type: object
    definitions_firewalls_FirewallsImportSummaryWithPackGeneration:
      allOf:
        - $ref: '#/components/schemas/definitions_firewalls_FirewallsImportSummary'
        - properties:
            packagesArchiveUuid:
              description: ID to the created sub-resource (to retrieve/remove packages)
              example: 1
              type: string
          type: object
      description: import summary for firewall with a specific uuid used to retrieve/remove connecting packages archive
    definitions_firewalls_FirewallsListResponse:
      properties:
        result:
          items:
            $ref: '#/components/schemas/definitions_firewalls_FirewallPropertiesWithStatusInformation'
          type: array
        success:
          type: boolean
      type: object
    definitions_firewalls_HealthIndicator:
      enum:
        - Good
        - Minor
        - Major
        - Unknown
        - N/A
      type: string
    definitions_folders_AccountFoldersProps:
      properties:
        result:
          description: A list of folders uuid.
          items:
            example: UUID1
            type: string
          type: array
        success:
          example: true
          type: boolean
      type: object
    definitions_folders_FolderMember:
      properties:
        children:
          description: Sub-folders list (mandatory, but can be empty)
          items:
            $ref: '#/components/schemas/definitions_folders_FolderMember'
          type: array
        comment:
          description: Folder's description
          example: My new folder where I put firewalls
          type: string
        firewalls:
          description: List of firewall UUIDs contained by this folder
          items:
            example: 75532250-c878-42f1-8871-bafa68e944d4
            type: string
          type: array
        name:
          description: Folder\'s name
          example: My SMC
          type: string
        uuid:
          example: root-folder
          type: string
      required:
        - uuid
        - name
        - children
      type: object
    definitions_folders_FolderProperties:
      allOf:
        - $ref: '#/components/schemas/definitions_objects_ObjectUuid'
        - $ref: '#/components/schemas/definitions_folders_FolderPropertiesWithoutUuid'
    definitions_folders_FolderPropertiesWithoutUuid:
      properties:
        comment:
          description: Folder\'s description
          example: This folder contains all firewalls for France
          type: string
        firewalls:
          description: List of the firewalls contained by this folder
          example:
            - some-fw-uuid-1
            - some-fw-uuid-2
          items:
            type: string
          type: array
        name:
          description: Folder\'s name
          example: France
          type: string
        parentFolder:
          description: Parent folder's UUID
          example: 75532250-c878-42f1-8871-bafa68e944d4
          type: string
      required:
        - parentFolder
        - name
      type: object
    definitions_folders_FoldersListResponse:
      properties:
        result:
          items:
            $ref: '#/components/schemas/definitions_folders_FolderMember'
          type: array
        success:
          type: boolean
      type: object
    definitions_folders_FoldersTreeResponse:
      properties:
        result:
          $ref: '#/components/schemas/definitions_folders_FolderMember'
        success:
          type: boolean
      required:
        - success
        - result
      type: object
    definitions_folders_RawFolderProperties:
      allOf:
        - $ref: '#/components/schemas/definitions_folders_FolderProperties'
        - properties:
            depth:
              description: Folder\'s deepness (0 for the root folder)
              type: integer
            rules:
              description: List of the associated rule's UUID
              example:
                - some-rule-uuid-1
                - some-rule-uuid-2
              items:
                type: string
              type: array
            subFolders:
              description: List of the sub-folder\'s UUID
              example:
                - some-folder-uuid-1
              items:
                type: string
              type: array
      required:
        - uuid
        - name
        - firewalls
        - rules
        - subFolders
        - depth
      type: object
    definitions_ifaces-assignations_IfaceAssignation:
      allOf:
        - $ref: '#/components/schemas/definitions_ifaces-assignations_IfaceAssignationWithoutIface'
        - properties:
            iface:
              example: ab42a927-7477-4b3e-aded-30473d5577e6
              type: string
          required:
            - iface
          type: object
      description: An iface assignation
    definitions_ifaces-assignations_IfaceAssignationWithoutIface:
      description: A custom iface assignation
      properties:
        defaultACKQueue:
          example: ab42a927-7477-4b3e-aded-30473d5577e9
          type: string
        defaultQueue:
          example: ab42a927-7477-4b3e-aded-30473d5577e8
          type: string
        trafficShaper:
          example: ab42a927-7477-4b3e-aded-30473d5577e7
          type: string
      required:
        - trafficShaper
        - defaultQueue
        - defaultACKQueue
      type: object
    definitions_ifaces-assignations_MultipleIfacesAssignationsResponse:
      properties:
        result:
          items:
            $ref: '#/components/schemas/definitions_ifaces-assignations_IfaceAssignation'
          type: array
        success:
          type: boolean
      type: object
    definitions_ifaces-assignations_SingleIfaceAssignationResponse:
      properties:
        result:
          $ref: '#/components/schemas/definitions_ifaces-assignations_IfaceAssignation'
        success:
          type: boolean
      type: object
    definitions_ldap_ldap:
      allOf:
        - properties:
            baseDn:
              example: smc-dn
              type: string
            enabled:
              type: boolean
            host:
              example: 1.1.1.1
              type: string
            hostBackup:
              example: 2.2.2.2
              type: string
            login:
              example: smc-user
              type: string
            password:
              example: smc-password
              type: string
            port:
              example: "69"
              type: integer
            ssl:
              type: boolean
            sslCaCertificate:
              type: boolean
            sslCaFile:
              format: binary
              type: string
            type:
              example: standard
              type: string
          required:
            - type
            - host
            - port
            - baseDn
            - login
            - password
          type: object
      description: Ldap configuration
    definitions_ldap_ldapResponse:
      properties:
        result:
          items:
            $ref: '#/components/schemas/definitions_ldap_ldap'
          type: array
        success:
          type: boolean
      type: object
    definitions_lock_LockResponse:
      properties:
        result:
          properties:
            certificateInstallation:
              example: true
              type: boolean
            deployment:
              example: true
              type: boolean
            locked:
              example: true
              type: boolean
            nsrpcExecution:
              example: true
              type: boolean
          type: object
        success:
          example: true
          type: boolean
      type: object
    definitions_logs_LogsResponse:
      properties:
        lines:
          items:
            description: Log entry
            properties:
              domain:
                description: domain key
                type: string
              hostname:
                description: host name
                type: string
              level:
                description: log level
                type: number
              msg:
                description: Log message
                type: string
              name:
                type: string
              pid:
                description: process Id
                type: number
              time:
                description: timestamp
                type: string
              v:
                type: number
            type: object
          type: array
      type: object
    definitions_misc_ContactAddresses:
      description: list of host/port to contact SMC
      items:
        properties:
          bindaddr:
            description: The bindaddr address (object name)
            example: Any
            type: string
          host:
            description: The SMC server address (ipv4 or fqdn)
            example: 1.2.3.4
            type: string
          port:
            description: The SMC server port
            example: 1234
            type: number
        required:
          - host
          - port
        type: object
      type: array
    definitions_misc_CrlProperty:
      properties:
        lastUpdate:
          description: last update
          example: "2017-08-02T10:07:26Z"
          type: string
        nextUpdate:
          description: next update
          example: "2017-08-02T10:07:26Z"
          type: string
        revokedCertificates:
          description: list of revoked certificates from CRL
          items:
            properties:
              reason:
                description: reason of revocation
                example: 0
                type: integer
              revocationDate:
                description: revocation date of the certificate
                example: "2017-08-02T10:07:22Z"
                type: string
              serialNumber:
                description: serial number of certificate
                example: A9031406
                type: string
            type: object
          type: array
      type: object
    definitions_misc_DefaultImportSummary:
      properties:
        created:
          type: number
        failed:
          type: number
        ignored:
          type: number
        updated:
          type: number
      type: object
    definitions_misc_ImportResponse:
      description: Result of an import
      properties:
        logs:
          description: list of logs
          items:
            properties:
              ctx:
                description: context of the log
                properties:
                  lineContent:
                    description: line extracted from csv file
                    type: object
                  lineNum:
                    description: index of the rule/ruleSet/object in csv file
                    type: number
                  type:
                    description: type of imported csv file
                    enum:
                      - object
                      - rule
                      - ruleSet
                    type: string
                type: object
              level:
                description: log level
                enum:
                  - info
                  - warning
                  - error
                type: string
              message:
                description: log message
                example: The ip address "10.1.2" is invalid
                type: string
            type: object
          type: array
        success:
          example: true
          type: boolean
    definitions_misc_InitializationPackageProperties:
      description: Data to send to create an initialization package
      properties:
        contacts:
          $ref: '#/components/schemas/definitions_misc_ContactAddresses'
        fwVersion:
          description: the firewall target version used for the generation
          example: 3.1.0
          type: string
        gateway:
          description: the gateway IP we want to set on the target firewall
          example: 1.2.3.4
          type: string
        ipSlave:
          description: the IP address we want to set on the target firewall
          example: 1.2.3.4
          type: string
        mask:
          description: the IP mask we want to set on the target firewall
          example: 255.255.0.0
          type: string
        storePublicIpAndPort:
          description: Store SMC contact addresses to automatically fill it in further GUI connecting package wizard
          example: true
          type: boolean
      required:
        - contacts
        - fwVersion
    definitions_misc_ProtocolList:
      items:
        properties:
          ipProto:
            description: list of supported ip protocols for filtering
            items:
              enum:
                - tcp
                - udp
              type: string
            type: array
          name:
            description: protocol name
            example: dicom
            type: string
        type: object
      type: array
    definitions_network-interfaces_AggInterfaceProperties:
      allOf:
        - $ref: '#/components/schemas/definitions_network-interfaces_AggInterfacePropertiesWithoutUuid'
        - $ref: '#/components/schemas/definitions_network-interfaces_NetworkInterfaceCommonPropertiesWithoutUuid'
        - $ref: '#/components/schemas/definitions_network-interfaces_NetworkInterfaceUuid'
    definitions_network-interfaces_AggInterfacePropertiesWithoutUuid:
      properties:
        macAddress:
          description: Mac address of the interface
          type: string
        parentInterface:
          description: The uuid of the parent interface
          type: string
        physicalMacAddress:
          description: Physical MAC address of the interface
          type: string
        protected:
          description: Is the interface protected
          type: boolean
      required:
        - protected
      type: object
    definitions_network-interfaces_AggInterfaceWithChildren:
      allOf:
        - $ref: '#/components/schemas/definitions_network-interfaces_AggInterfaceProperties'
        - properties:
            children:
              items:
                anyOf:
                  - $ref: '#/components/schemas/definitions_network-interfaces_EthernetInterfaceProperties'
                  - $ref: '#/components/schemas/definitions_network-interfaces_VlanInterfaceProperties'
                  - type: object
              type: array
          type: object
    definitions_network-interfaces_BridgeInterfaceProperties:
      allOf:
        - $ref: '#/components/schemas/definitions_network-interfaces_BridgeInterfacePropertiesWithoutUuid'
        - $ref: '#/components/schemas/definitions_network-interfaces_NetworkInterfaceCommonPropertiesWithoutUuid'
        - $ref: '#/components/schemas/definitions_network-interfaces_NetworkInterfaceUuid'
    definitions_network-interfaces_BridgeInterfacePropertiesWithoutUuid:
      properties:
        macAddress:
          description: Mac address of the interface
          type: string
        mstConfigIdFormatSelector:
          description: MSTP format selector
          type: integer
        mstConfigName:
          description: MSTP region name
          type: string
        mstConfigRevision:
          description: MSTP revision number
          type: integer
        mstpInstances:
          description: MSTP instances array of the interface
          items:
            properties:
              priority:
                description: MSTP instance priority
                type: integer
              vlanIds:
                description: List of VLAN IDs of the MSTP instance
                type: string
            type: object
          type: array
        physicalMacAddress:
          description: Physical MAC address of the interface
          type: string
        stpPriority:
          description: Common and Internal Spanning Tree (CIST)
          type: integer
        useStp:
          description: The loop detection type
          type: integer
      type: object
    definitions_network-interfaces_BridgeInterfaceWithChildren:
      allOf:
        - $ref: '#/components/schemas/definitions_network-interfaces_BridgeInterfaceProperties'
        - properties:
            children:
              items:
                anyOf:
                  - $ref: '#/components/schemas/definitions_network-interfaces_EthernetInterfaceProperties'
                  - $ref: '#/components/schemas/definitions_network-interfaces_VlanInterfaceProperties'
                  - $ref: '#/components/schemas/definitions_network-interfaces_AggInterfaceProperties'
                  - type: object
              type: array
          type: object
    definitions_network-interfaces_EthernetInterfaceProperties:
      allOf:
        - $ref: '#/components/schemas/definitions_network-interfaces_EthernetInterfacePropertiesWithoutUuid'
        - $ref: '#/components/schemas/definitions_network-interfaces_NetworkInterfaceCommonPropertiesWithoutUuid'
        - $ref: '#/components/schemas/definitions_network-interfaces_NetworkInterfaceUuid'
    definitions_network-interfaces_EthernetInterfacePropertiesWithoutUuid:
      properties:
        ha:
          description: Is the interface used for the HA link
          type: boolean
        macAddress:
          description: Mac address of the interface
          type: string
        media:
          description: Media type of the interface
          enum:
            - autoselect
            - 10mbhalf
            - 10mbfull
            - 100mbhalf
            - 100mbfull
            - 1gbfull
            - 10gbfull
            - 20gbfull
            - 25gbfull
            - 40gbfull
          example: 40gbfull
          type: string
        parentInterface:
          description: The uuid of the parent interface
          type: string
        physicalMacAddress:
          description: Physical MAC address of the interface
          type: string
        port:
          description: Physical port of the interface
          type: integer
        protected:
          description: Is the interface protected
          type: boolean
      required:
        - media
        - protected
      type: object
    definitions_network-interfaces_EthernetInterfaceWithChildren:
      allOf:
        - $ref: '#/components/schemas/definitions_network-interfaces_EthernetInterfaceProperties'
        - properties:
            children:
              items:
                type: object
              type: array
          type: object
    definitions_network-interfaces_NetworkInterfaceCommonPropertiesWithoutUuid:
      properties:
        aggregateMode:
          description: Allow to use the aggregated interface with a failover mode (master/backup) or not
          enum:
            - lacp
            - failover
          type: string
        comment:
          description: Comment
          type: string
        dhcp4:
          description: Is DHCP activated for IPv4
          type: boolean
        dhcpHostname:
          description: DNS name
          type: string
        dhcpLeaseTime:
          description: Requested lease time (seconds)
          type: integer
        enabled:
          description: Activation state of the interface - must be true to create a bridge
          type: boolean
        failoverMaster:
          description: Define a failover interface which is the master
          type: string
        fastRoute:
          description: 'Routing by interface: keep initial routing, only if parentInterface refers to a bridge interface'
          type: boolean
        forward:
          description: Routing without analysis, only if parentInterface refers to a bridge interface
          properties:
            appleTalk:
              type: boolean
            ipv6:
              type: boolean
            ipx:
              type: boolean
            netBios:
              type: boolean
            pppoe:
              type: boolean
          type: object
        fwid:
          description: The id of the firewall it belongs to
          example: sns-uuid-1
          type: string
        interfaceType:
          description: Type of the interface
          enum:
            - Aggregate
            - Ethernet
            - VLAN
            - Bridge
          example: VLAN
          type: string
        ipv4Addresses:
          description: IPv4 addresses array of the interface
          items:
            properties:
              address:
                description: IPv4 address without mask
                type: string
              comment:
                description: Comment for the IPv4 address
                type: string
              mask:
                description: Mask in CIDR or IP address format
                type: string
            type: object
          type: array
        keepVlanId:
          description: 'Routing by interface: keep VLAN IDs, only if parentInterface refers to a bridge interface'
          type: boolean
        mtu:
          description: Maximum Transmission Unit of the interface
          type: integer
        name:
          description: Name of the interface
          type: string
        physicalName:
          description: The interface's physical name
          type: string
        requestDns:
          description: Request domain name servers from the DHCP server and create host objects
          type: boolean
      required:
        - name
        - fwid
        - interfaceType
        - enabled
        - dhcp4
        - ipv4Addresses
      type: object
    definitions_network-interfaces_NetworkInterfaceUuid:
      properties:
        uuid:
          description: NetworkInterface uuid
          example: 75532250-c878-42f1-8871-bafa68e944d4
          type: string
      required:
        - uuid
      type: object
    definitions_network-interfaces_NetworkInterfacesListResponse:
      properties:
        result:
          items:
            anyOf:
              - $ref: '#/components/schemas/definitions_network-interfaces_EthernetInterfaceProperties'
              - $ref: '#/components/schemas/definitions_network-interfaces_VlanInterfaceProperties'
              - $ref: '#/components/schemas/definitions_network-interfaces_AggInterfaceProperties'
              - $ref: '#/components/schemas/definitions_network-interfaces_BridgeInterfaceProperties'
              - $ref: '#/components/schemas/definitions_network-interfaces_VirtualInterfaceProperties'
              - type: object
          type: array
        success:
          example: true
          type: boolean
        total:
          example: 5
          type: number
      type: object
    definitions_network-interfaces_NetworkInterfacesTree:
      items:
        anyOf:
          - $ref: '#/components/schemas/definitions_network-interfaces_EthernetInterfaceWithChildren'
          - $ref: '#/components/schemas/definitions_network-interfaces_VlanInterfaceWithChildren'
          - $ref: '#/components/schemas/definitions_network-interfaces_AggInterfaceWithChildren'
          - $ref: '#/components/schemas/definitions_network-interfaces_BridgeInterfaceWithChildren'
          - type: object
      type: array
    definitions_network-interfaces_VirtualInterfaceProperties:
      allOf:
        - $ref: '#/components/schemas/definitions_network-interfaces_VirtualInterfacePropertiesWithoutUuid'
        - $ref: '#/components/schemas/definitions_network-interfaces_NetworkInterfaceUuid'
    definitions_network-interfaces_VirtualInterfacePropertiesWithoutUuid:
      properties:
        comment:
          description: Comment
          type: string
        enabled:
          description: Activation state of the virtual interface
          type: boolean
        fwid:
          description: The id of the firewall it belongs to
          example: sns-uuid-1
          type: string
        interfaceType:
          default: VTI
          description: Type of the interface
          type: string
        ipv4Address:
          description: IPV4 address of the virtual interface
          type: string
        mask:
          description: Mask address of the virtual interface
          type: string
        mtu:
          default: 1500
          description: Maximum Transmission Unit of the interface
          type: integer
        name:
          description: Name of the virtual interface
          type: string
        peerName:
          type: string
        topologyName:
          type: integer
      type: object
    definitions_network-interfaces_VlanInterfaceProperties:
      allOf:
        - $ref: '#/components/schemas/definitions_network-interfaces_VlanInterfacePropertiesWithoutUuid'
        - $ref: '#/components/schemas/definitions_network-interfaces_NetworkInterfaceCommonPropertiesWithoutUuid'
        - $ref: '#/components/schemas/definitions_network-interfaces_NetworkInterfaceUuid'
    definitions_network-interfaces_VlanInterfacePropertiesWithoutUuid:
      properties:
        parentInterface:
          description: The uuid of the parent interface
          type: string
        physical:
          description: The uuid of the ethernet parent interface
          type: string
        priority:
          description: The priority of the vlan (CoS)
          type: integer
        protected:
          description: Is the interface protected
          type: boolean
        vlanId:
          description: The ID of the vlan
          type: integer
      required:
        - vlanId
        - priority
        - physical
        - protected
      type: object
    definitions_network-interfaces_VlanInterfaceWithChildren:
      allOf:
        - $ref: '#/components/schemas/definitions_network-interfaces_VlanInterfaceProperties'
        - properties:
            children:
              items:
                type: object
              type: array
          type: object
    definitions_nsrpc_NsrpcAttachmentResponse:
      properties:
        result:
          description: Firewall's attachment files
          items:
            type: string
          type: array
        success:
          example: true
          type: boolean
      type: object
    definitions_nsrpc_NsrpcDeleteResponse:
      properties:
        message:
          example: file.script deleted
          type: string
        success:
          example: true
          type: boolean
      type: object
    definitions_nsrpc_NsrpcExecuteBody:
      description: nsrpc execute body
      properties:
        byNames:
          description: if truthy, the target field will be interpreted as an array of firewall names
          type: boolean
        target:
          description: can also be "all" to let the script be run on each firewall
          example:
            - sns-1
          items:
            description: Firewall's UUID (or name if byNames has been set) on which the script needs to be executed
            type: string
          type: array
      required:
        - target
    definitions_nsrpc_NsrpcListResponse:
      properties:
        result:
          properties:
            content:
              example:
                - firewallsInError: []
                  name: script1.script
                - firewallsInError: []
                  name: script2.script
                - firewallsInError:
                    - sns-uuid-1
                  name: script3.script
              items:
                properties:
                  firewallsInError:
                    description: Firewall's UUIDs array that has encountered an error during preprocessing
                    example:
                      - sns-uuid-1
                      - sns-uuid-2
                    items:
                      type: string
                    type: array
                  name:
                    example: manual-firewall-backup.script
                    type: string
                type: object
              type: array
          type: object
        success:
          example: true
          type: boolean
      type: object
    definitions_nsrpc_NsrpcResponse:
      properties:
        conflicts:
          example: file.script, file2.script, file3.script
          type: string
        scriptPath:
          example: /data/users/nsrpc-scripts/myScript.script
          type: string
        success:
          example: true
          type: boolean
      type: object
    definitions_nsrpc_NsrpcScheduleBody:
      description: nsrpc scheduling request body
      properties:
        byNames:
          description: if truthy, the target field will be interpreted as an array of firewall names
          type: boolean
        schedule:
          description: script's execution date
          example: "2020-03-21T14:20:23.928Z"
          type: string
        target:
          description: can also be "all" to let the script be run on each firewall
          example:
            - sns-1
          items:
            description: Firewall's UUID on which the script needs to be executed
            type: string
          type: array
      required:
        - target
    definitions_nsrpc_NsrpcScriptContentResponse:
      properties:
        content:
          description: The nsrpcScript content preprocessed for this firewall
          type: string
        errors:
          description: Only present if there are some errors during preprocessing
          items:
            properties:
              code:
                example: NO_VALUE
                type: string
              line:
                description: Line number on which the error occurs
                type: integer
              msg:
                example: 'Line 1: No value for variable "CUSTOM_var1"'
                type: string
              vars:
                items:
                  example: CUSTOM_var2
                  type: string
                type: array
            type: object
          type: array
        success:
          type: boolean
      type: object
    definitions_nsrpc_NsrpcStateExecutionResponse:
      properties:
        date:
          description: Start execution date
          format: date
          type: string
        firewalls:
          items:
            description: Can have more properties which are specific to the firewall and not related to NSRPC script execution
            properties:
              code:
                description: Current execution code (similar to state)
                type: string
              fwid:
                description: Firewall's UUID
                type: string
              name:
                description: Firewall's name
                type: string
              state:
                description: Current execution state
                type: string
              step:
                description: Current execution step on this firewall
                enum:
                  - 0
                  - 1
                  - 2
                  - 3
                type: integer
              total:
                description: Total number of execution steps on this firewall. Usefull to know if the execution is finished
                enum:
                  - 1
                  - 2
                  - 3
                type: integer
            type: object
          type: array
        success:
          enum:
            - true
          type: boolean
        user:
          description: Login of the user who launched the nsrpc execution
          type: string
      type: object
    definitions_objects_CheckUsageResponse:
      properties:
        result:
          items:
            description: Object describing an object, a firewall, an encryption profile, variable, certificate or a certificate authority
            properties:
              _type:
                description: |
                  When possible, most specific type (such as type "host", "port" for object) for configuration element using the source element
                type: string
              index:
                description: |
                  When possible (e.g. for rule element), rule index related to configuration element using the source element
                type: number
              priority:
                description: |
                  When possible (e.g. for rule element), rule priority related to configuration element using the source element
                type: number
              sourceElementType:
                description: |
                  Source configuration element type (object, firewall, certificate, etc) that is checked by the check-usage feature. Most of time it is the target element choose by the user, except for VTI topology.
                type: string
              sourceElementUuid:
                description: Source configuration element UUID that is checked by the check-usage feature.
                type: string
              usedByElementType:
                description: Configuration element type using the source element
                type: string
              usedByElementUuid:
                description: Configuration element UUID using the source element
                type: string
            type: object
          type: array
        success:
          type: boolean
      type: object
    definitions_objects_FqdnPropertiesWithoutUuid:
      allOf:
        - $ref: '#/components/schemas/definitions_objects_ObjectPropertiesWithoutUuid'
        - properties:
            _type:
              description: Object type
              example: fqdn
              type: string
            ipv4Address:
              description: IpV4 address
              example: 127.0.0.1
              type: string
            ipv6Address:
              description: IpV6 address
              example: ::1
              type: string
          type: object
    definitions_objects_GroupPropertiesWithoutUuid:
      allOf:
        - $ref: '#/components/schemas/definitions_objects_ObjectPropertiesWithoutUuid'
        - properties:
            _type:
              description: Object type
              example: group
              type: string
            members:
              description: List of group members uuid
              items:
                type: string
              type: array
            type:
              description: Group type
              enum:
                - object
                - service
                - geo
              type: string
          type: object
    definitions_objects_HostPropertiesWithoutUuid:
      allOf:
        - $ref: '#/components/schemas/definitions_objects_ObjectPropertiesWithoutUuid'
        - properties:
            _type:
              description: Object type
              example: host
              type: string
            ipv4Address:
              description: IpV4 address
              example: 127.0.0.1
              type: string
            ipv6Address:
              description: IpV6 address
              example: ::1
              type: string
            macAddress:
              description: Mac address
              example: 00:10:18:4e:5d:32
              type: string
            resolutionType:
              description: Resolution type
              enum:
                - IP_ADDRESS
                - NAME
              type: string
          type: object
    definitions_objects_IpRangePropertiesWithoutUuid:
      allOf:
        - $ref: '#/components/schemas/definitions_objects_ObjectPropertiesWithoutUuid'
        - properties:
            _type:
              description: Object type
              example: add-range
              type: string
            ipv4AddressEnd:
              description: IpV4 end address
              example: 127.0.0.1
              type: string
            ipv4AddressStart:
              description: IpV4 start address
              example: 127.0.0.1
              type: string
            ipv6AddressEnd:
              description: IpV6 end address
              example: ::1
              type: string
            ipv6AddressStart:
              description: IpV6 start address
              example: ::1
              type: string
            macAddressEnd:
              description: mac end address
              example: "00:00:00:00:00:01"
              type: string
            macAddressStart:
              description: mac start address
              example: "00:00:00:00:00:01"
              type: string
          type: object
    definitions_objects_NetworkPropertiesWithoutUuid:
      allOf:
        - $ref: '#/components/schemas/definitions_objects_ObjectPropertiesWithoutUuid'
        - properties:
            _type:
              description: Object type
              example: network
              type: string
            ipv4Address:
              description: IpV4 address with prefix
              example: 127.0.0.0/8
              type: string
            ipv6Address:
              description: IpV6 address with prefix
              example: dead:beef::/32
              type: string
          type: object
    definitions_objects_ObjectProperties:
      allOf:
        - $ref: '#/components/schemas/definitions_objects_ObjectPropertiesWithoutUuid'
        - $ref: '#/components/schemas/definitions_objects_ObjectUuid'
    definitions_objects_ObjectPropertiesWithoutUuid:
      discriminator:
        propertyName: _type
      properties:
        _type:
          description: Object type
          example: host
          type: string
        comment:
          description: Object description/comment
          example: My object
          type: string
        deployment:
          description: Deployment mode
          properties:
            force:
              items:
                type: string
              type: array
            mode:
              enum:
                - DEFAULT
                - ALL
              type: string
          type: object
        name:
          description: Object name
          example: some-object-name
          type: string
      required:
        - name
        - _type
      type: object
    definitions_objects_ObjectUuid:
      properties:
        uuid:
          description: Object uuid
          example: 75532250-c878-42f1-8871-bafa68e944d4
          type: string
      required:
        - uuid
      type: object
    definitions_objects_ObjectsListResponse:
      properties:
        result:
          items:
            $ref: '#/components/schemas/definitions_objects_ObjectProperties'
          type: array
        success:
          type: boolean
      type: object
    definitions_objects_ObjectsProperties:
      discriminator:
        mapping:
          add-range: '#/IpRangePropertiesWithoutUuid'
          fqdn: '#/FqdnPropertiesWithoutUuid'
          group: '#/GroupPropertiesWithoutUuid'
          host: '#/HostPropertiesWithoutUuid'
          network: '#/NetworkPropertiesWithoutUuid'
          port: '#/PortPropertiesWithoutUuid'
          protocol: '#/ProtocolPropertiesWithoutUuid'
          router: '#/RouterPropertiesWithoutUuid'
          sla: '#/SlaPropertiesWithoutUuid'
          time: '#/TimePropertiesWithoutUuid'
        propertyName: _type
      oneOf:
        - $ref: '#/components/schemas/definitions_objects_FqdnPropertiesWithoutUuid'
        - $ref: '#/components/schemas/definitions_objects_GroupPropertiesWithoutUuid'
        - $ref: '#/components/schemas/definitions_objects_HostPropertiesWithoutUuid'
        - $ref: '#/components/schemas/definitions_objects_IpRangePropertiesWithoutUuid'
        - $ref: '#/components/schemas/definitions_objects_NetworkPropertiesWithoutUuid'
        - $ref: '#/components/schemas/definitions_objects_PortPropertiesWithoutUuid'
        - $ref: '#/components/schemas/definitions_objects_ProtocolPropertiesWithoutUuid'
        - $ref: '#/components/schemas/definitions_objects_TimePropertiesWithoutUuid'
        - $ref: '#/components/schemas/definitions_objects_SlaPropertiesWithoutUuid'
        - $ref: '#/components/schemas/definitions_objects_RouterPropertiesWithoutUuid'
    definitions_objects_PortPropertiesWithoutUuid:
      allOf:
        - $ref: '#/components/schemas/definitions_objects_ObjectPropertiesWithoutUuid'
        - properties:
            _type:
              description: Object type
              example: port
              type: string
            protocol:
              description: protocol
              enum:
                - tcp
                - udp
                - any
              type: string
            range:
              description: port range of values
              properties:
                end:
                  description: port range end
                  example: 4242
                  type: integer
                start:
                  description: port range start
                  example: 42
                  type: integer
              type: object
            value:
              description: port value
              example: 42
              type: integer
          type: object
    definitions_objects_ProtocolPropertiesWithoutUuid:
      allOf:
        - $ref: '#/components/schemas/definitions_objects_ObjectPropertiesWithoutUuid'
        - properties:
            _type:
              description: Object type
              example: protocol
              type: string
            number:
              description: protocol value
              example: 42
              type: integer
          type: object
    definitions_objects_RouterGatewayProperties:
      properties:
        comment:
          description: comment
          example: some comment
          type: string
        testing:
          description: gateway testing way
          enum:
            - none
            - directly
            - host_or_group_uuid
          type: string
        uuid:
          description: Host uuid
          example: some-host-uuid
          type: string
        weight:
          description: weight
          example: 1
          type: integer
      required:
        - uuid
        - testing
        - weight
      type: object
    definitions_objects_RouterPropertiesWithoutUuid:
      allOf:
        - $ref: '#/components/schemas/definitions_objects_ObjectPropertiesWithoutUuid'
        - properties:
            _type:
              description: Object type
              example: router
              type: string
            activateAllBackup:
              description: activate all backups
              type: boolean
            backups:
              description: list of backup gateways
              items:
                $ref: '#/components/schemas/definitions_objects_RouterGatewayProperties'
              type: array
            customGatewayThreshold:
              description: custom gateway threshold
              example: 2
              type: integer
            frequency:
              description: Delay in seconds between two successive complete tests
              example: 15
              type: integer
            gatewayThreshold:
              description: gateway threshold
              enum:
                - all
                - one
                - custom
              type: string
            loadBalancing:
              description: load balancing mode
              enum:
                - none
                - connhash
                - srchash
              type: string
            monitor:
              description: Monitor method
              enum:
                - tcp_probe
                - icmp
              type: string
            onFailPolicy:
              description: on fail policy
              enum:
                - Pass
                - Block
              type: string
            port:
              description: Port object uuid. Mandatory if monitor is tcp_probe
              example: some-port-uuid
              type: string
            principals:
              description: list of principal gateways
              items:
                $ref: '#/components/schemas/definitions_objects_RouterGatewayProperties'
              type: array
            sla:
              description: SLA object uuid
              example: some-sla-uuid
              type: string
            tries:
              description: Make at most this number of tests
              example: 3
              type: integer
            wait:
              description: Wait this long for the ICMP reply
              example: 2
              type: integer
          required:
            - gatewayThreshold
            - loadBalancing
            - onFailPolicy
            - principals
          type: object
    definitions_objects_SlaPropertiesWithoutUuid:
      allOf:
        - $ref: '#/components/schemas/definitions_objects_ObjectPropertiesWithoutUuid'
        - properties:
            _type:
              description: Object type
              example: sla
              type: string
            maxJitter:
              description: Max jitter in ms. Value can be in range 0 to 200.
              example: 200
              type: integer
            maxLatency:
              description: Max packet latency in ms. Value can be in range 0 to 60000.
              example: 500
              type: integer
            maxLoss:
              description: Max packet loss in percent.
              example: 10.5
              format: float
              type: number
            maxUnreachable:
              description: Max gateway unreachable rate in percent.
              example: 50
              type: integer
          type: object
    definitions_objects_TimePropertiesWithoutUuid:
      allOf:
        - $ref: '#/components/schemas/definitions_objects_ObjectPropertiesWithoutUuid'
        - properties:
            _type:
              description: Object type
              example: time
              type: string
            periods:
              description: list of periods
              items:
                description: period between two dates
                properties:
                  end:
                    description: end of period (ISO date format, in UTC)
                    example: "2018-01-01T01:01:01.000Z"
                    type: string
                  start:
                    description: start of period (ISO date format, in UTC)
                    example: "2015-01-01T01:01:01.000Z"
                    type: string
                type: object
              type: array
            timeSlots:
              description: list of time slots
              items:
                description: time slot
                properties:
                  end:
                    description: end of time slot (format hh:mm)
                    example: "00:43"
                    type: string
                  start:
                    description: start of time slot (format hh:mm)
                    example: "00:42"
                    type: string
                type: object
              type: array
            weekDays:
              description: list of week days
              items:
                description: week day
                enum:
                  - 1
                  - 2
                  - 3
                  - 4
                  - 5
                  - 6
                  - 7
                type: integer
              type: array
            yearDays:
              description: list of year days
              items:
                description: year day
                properties:
                  end:
                    description: end of year day (format MM-DD)
                    example: 05-15
                    type: string
                  start:
                    description: start of year day (format MM-DD)
                    example: 01-31
                    type: string
                type: object
              type: array
          type: object
    definitions_proxy_ProxyBodySessionId:
      description: Session Id
      type: string
    definitions_proxy_ProxyCommandResponse:
      properties:
        code:
          description: Result code
          example: 100
          type: integer
          xml:
            attribute: true
        id:
          description: Command id
          example: CONFIG SECURITYINSPECTION CONFIG ALARM LIST index=1 extended=1
          type: string
          xml:
            attribute: true
        msg:
          description: Result message
          example: OK
          type: string
          xml:
            attribute: true
        serverd:
          items:
            $ref: '#/components/schemas/definitions_proxy_ProxyNwsResponse'
          type: array
      type: object
      xml:
        name: nws
    definitions_proxy_ProxyNwsResponse:
      properties:
        code:
          description: Result code
          example: 100
          type: integer
          xml:
            attribute: true
        msg:
          description: Result message
          example: OK
          type: string
          xml:
            attribute: true
      type: object
      xml:
        name: nws
    definitions_proxy_ProxySessionObject:
      properties:
        action_succeded:
          description: Action succeded
          example: 156
          type: integer
        action_waiting:
          description: Action waiting
          example: 1
          type: integer
        app:
          description: App name
          example: CLI
          type: string
        dl_crc:
          description: Download crc
          example: 0
          type: integer
        dl_wait:
          description: Is there a download waiting ?
          example: 0
          type: integer
        id:
          description: Session id
          example: 7ee0bf1e-55ad-11e7-99f9-080027d73006
          type: string
          xml:
            attribute: true
        login:
          description: User login
          example: smc-admin
          type: string
        slot:
          description: Slot
          example: 0
          type: integer
          xml:
            attribute: true
        state:
          description: State
          example: 2
          type: integer
        tm_creation:
          description: Time creation
          example: "2017-06-20T11:42:10Z"
          type: string
        tm_lastaction:
          description: Time last action
          example: "2017-06-20T11:54:04Z"
          type: string
        ul_rest:
          description: Upload rest
          example: 0
          type: integer
        ul_size:
          description: Upload size
          example: 941
          type: integer
        ul_wait:
          description: Is there an upload waiting ?
          example: 1
          type: integer
      type: object
      xml:
        name: session
    definitions_proxy_ProxyStatResponse:
      properties:
        code:
          description: Result code
          example: 100
          type: integer
          xml:
            attribute: true
        msg:
          description: Result message
          example: OK
          type: string
          xml:
            attribute: true
        sessions:
          items:
            $ref: '#/components/schemas/definitions_proxy_ProxySessionObject'
          type: array
      type: object
      xml:
        name: nws
    definitions_proxy_ProxyUploadField:
      description: File
      format: binary
      type: string
    definitions_proxy_ProxyUserLoginResponse:
      properties:
        client_address:
          description: firewall IP address
          example: 192.168.56.1
          type: string
        code:
          description: Result code
          example: 100
          type: integer
          xml:
            attribute: true
        command:
          description: command number
          type: integer
        connection_if:
          description: connection if
          example: undetermined
          type: string
        fwadmin:
          description: admin mode
          example: proxy
          type: string
        level:
          description: list of user's rights
          example: modify,mon_write,base,contentfilter
          type: string
        msg:
          description: Result message
          example: OK
          type: string
          xml:
            attribute: true
        need_reboot:
          description: Reboot needed ?
          example: 0
          type: integer
        prefs:
          items:
            $ref: '#/components/schemas/definitions_proxy_ProxyUserPreferences'
          type: array
        protocol:
          description: protocol number
          type: integer
        serial:
          description: firewall's serial number
          example: V50XXA05G7654A9
          type: string
        sessionid:
          description: Session Id
          example: beef8a83-550d-11e7-99f9-080027d73006
          type: string
        sessionlevel:
          description: list of session's rights
          example: base,contentfilter
          type: string
      type: object
      xml:
        name: nws
    definitions_proxy_ProxyUserPreferences:
      items:
        $ref: '#/components/schemas/definitions_proxy_ProxyUserPreferencesKeys'
      properties:
        title:
          description: Section name
          example: Configuration.SecurityPolicy
          type: string
          xml:
            attribute: true
      type: array
      xml:
        name: section
    definitions_proxy_ProxyUserPreferencesKeys:
      properties:
        name:
          description: Key name
          example: globalFiltering
          type: string
          xml:
            attribute: true
        value:
          description: value (1 or 0)
          type: integer
          xml:
            attribute: true
      type: object
      xml:
        name: key
    definitions_queue_MultipleQueuesResponse:
      properties:
        result:
          items:
            $ref: '#/components/schemas/definitions_queue_Queue'
          type: array
        success:
          type: boolean
      type: object
    definitions_queue_Queue:
      allOf:
        - $ref: '#/components/schemas/definitions_queue_QueueWithoutUuid'
        - properties:
            uuid:
              type: string
          required:
            - uuid
          type: object
      description: A queue
    definitions_queue_QueueWithoutUuid:
      description: A custom queue
      properties:
        comment:
          example: someComment
          type: string
        maxBandwidth:
          example: 1000
          maximum: 9.99999999e+08
          minimum: 0
          type: number
        maxReverseBandwidth:
          example: 1000
          maximum: 9.99999999e+08
          minimum: 0
          type: number
        minBandwidth:
          example: 10
          maximum: 9.99999999e+08
          minimum: 0
          type: number
        minReverseBandwidth:
          example: 10
          maximum: 9.99999999e+08
          minimum: 0
          type: number
        name:
          example: myNewQueue
          type: string
        priority:
          maximum: 7
          minimum: 0
          type: number
        type:
          enum:
            - PRIQ
            - CBQ
            - MONQ
          example: CBQ
          type: string
      required:
        - name
        - type
      type: object
    definitions_queue_SingleQueueResponse:
      properties:
        result:
          $ref: '#/components/schemas/definitions_queue_Queue'
        success:
          type: boolean
      type: object
    definitions_radius_radius:
      allOf:
        - properties:
            backupHost:
              example: 2.2.2.2
              type: string
            backupPort:
              example: "6969"
              type: integer
            backupPreSharedKey:
              example: smc-key-2
              type: string
            enabled:
              type: boolean
            host:
              example: 1.1.1.1
              type: string
            port:
              example: "69"
              type: integer
            preSharedKey:
              example: smc-key
              type: string
          required:
            - host
            - port
            - preSharedKey
          type: object
      description: Radius configuration
    definitions_radius_radiusPostResponse:
      properties:
        result:
          items:
            anyOf:
              - properties:
                  enabled:
                    type: boolean
                  host:
                    example: 1.1.1.1
                    type: string
                  port:
                    example: "69"
                    type: integer
                  preSharedKey:
                    example: smc-key
                    type: string
                type: object
              - properties:
                  enabled:
                    type: boolean
                  host:
                    example: 2.2.2.2
                    type: string
                  port:
                    example: "6969"
                    type: integer
                  preSharedKey:
                    example: smc-key2
                    type: string
                type: object
          type: array
        success:
          type: boolean
      type: object
    definitions_radius_radiusResponse:
      properties:
        result:
          items:
            $ref: '#/components/schemas/definitions_radius_radius'
          type: array
        success:
          type: boolean
      type: object
    definitions_routing_RouteAddUpdateBody:
      allOf:
        - properties:
            uuid:
              description: route uuid
              type: string
          type: object
        - $ref: '#/components/schemas/definitions_routing_RouteProperties'
      description: Route add/update body information
      type: object
    definitions_routing_RouteInfo:
      allOf:
        - properties:
            fwid:
              description: Firewall uuid
              type: string
            uuid:
              description: Route uuid
              type: string
          type: object
        - $ref: '#/components/schemas/definitions_routing_RouteProperties'
      description: Route information
      type: object
    definitions_routing_RouteProperties:
      properties:
        addNetwork:
          description: Add IPv4 networks distributed via dynamic routing to the table of protected networks. Only for dynamic routeType
          type: boolean
        bird:
          description: Bird config file content
          type: string
        comment:
          description: Host  or router uuid
          type: string
        destination:
          description: Host or network or group uuid
          type: string
        enabled:
          description: If the route is activated or not
          type: boolean
        gateway:
          description: Host or router uuid
          type: string
        iface:
          description: interface uuid
          type: string
        restart:
          description: Restart dynamic routing when the firewall becomes active (high availability). Only for dynamic routeType
          type: boolean
        routeType:
          description: Route type
          enum:
            - static
            - return
            - dynamic
            - default
          type: string
      type: object
    definitions_routing_Routing:
      properties:
        result:
          description: Routes list
          items:
            $ref: '#/components/schemas/definitions_routing_RouteInfo'
          type: array
        success:
          example: true
          type: boolean
      type: object
    definitions_rule-sets_ImportResult:
      allOf:
        - $ref: '#/components/schemas/definitions_misc_ImportResponse'
        - properties:
            importSummary:
              properties:
                ruleset:
                  $ref: '#/components/schemas/definitions_rule-sets_RuleSetImportSummary'
              type: object
          type: object
      description: Information about the import
    definitions_rule-sets_MultipleRuleSetsResponse:
      properties:
        result:
          items:
            $ref: '#/components/schemas/definitions_rule-sets_RuleSet'
          type: array
        success:
          type: boolean
      type: object
    definitions_rule-sets_RuleSet:
      allOf:
        - $ref: '#/components/schemas/definitions_rule-sets_RuleSetWithoutUuid'
        - properties:
            uuid:
              type: string
          required:
            - uuid
          type: object
      description: A custom rule set
    definitions_rule-sets_RuleSetImportSummary:
      allOf:
        - description: Summary of rule sets import
        - $ref: '#/components/schemas/definitions_misc_DefaultImportSummary'
    definitions_rule-sets_RuleSetWithoutUuid:
      description: A custom rule set
      properties:
        firewalls:
          description: List of assigned firewall's UUID
          example:
            - some-fw-uuid-1
            - some-fw-uuid-2
          items:
            type: string
          type: array
        name:
          example: myNewVar
          type: string
        rulesType:
          description: rules type
          enum:
            - filter
            - nat
          type: string
      required:
        - name
        - rulesType
      type: object
    definitions_rule-sets_SingleRuleSetResponse:
      properties:
        result:
          $ref: '#/components/schemas/definitions_rule-sets_RuleSet'
        success:
          type: boolean
      type: object
    definitions_rules_BulkMoveToParentRequest:
      description: rules to move
      items:
        $ref: '#/components/schemas/definitions_rules_MoveToParentRequest'
      type: array
    definitions_rules_BulkMoveToParentResponse:
      properties:
        result:
          items:
            $ref: '#/components/schemas/definitions_rules_RefsParentResult'
          type: array
        success:
          type: boolean
      type: object
    definitions_rules_BulkRuleDeleteResponse:
      properties:
        success:
          type: boolean
      type: object
    definitions_rules_BulkRuleParentProperties:
      allOf:
        - $ref: '#/components/schemas/definitions_rules_RuleParentProperties'
        - $ref: '#/components/schemas/definitions_objects_ObjectUuid'
      description: Use for rule update cause we don't allow parent folder modification for now
    definitions_rules_MoveToParentRequest:
      properties:
        uuid:
          description: rule uuid to be moved
          type: string
      type: object
    definitions_rules_ParentType:
      enum:
        - firewall
        - folder-primary
        - folder-secondary
        - rule-set
      type: string
    definitions_rules_RefsParentResponse:
      properties:
        result:
          description: All the rule uuid contained by the parent
          items:
            $ref: '#/components/schemas/definitions_rules_RefsParentResult'
          type: array
        success:
          type: boolean
      type: object
    definitions_rules_RefsParentResult:
      properties:
        uuid:
          $ref: '#/components/schemas/definitions_common_Uuid'
      required:
        - uuid
      type: object
    definitions_rules_RuleAddRequestBody:
      allOf:
        - $ref: '#/components/schemas/definitions_rules_RulePropertiesWithoutUuid'
        - $ref: '#/components/schemas/definitions_rules_RuleParentProperties'
    definitions_rules_RuleAddResponse:
      properties:
        result:
          $ref: '#/components/schemas/definitions_rules_RuleProperties'
        success:
          type: boolean
      type: object
    definitions_rules_RuleBulkAddRequestBody:
      items:
        $ref: '#/components/schemas/definitions_rules_RuleAddRequestBody'
      type: array
    definitions_rules_RuleBulkAddResponse:
      properties:
        result:
          items:
            $ref: '#/components/schemas/definitions_rules_RuleProperties'
          type: array
        success:
          type: boolean
      type: object
    definitions_rules_RuleDeleteResponse:
      properties:
        success:
          type: boolean
      type: object
    definitions_rules_RuleGetResponse:
      properties:
        result:
          $ref: '#/components/schemas/definitions_rules_RuleProperties'
        success:
          type: boolean
      type: object
    definitions_rules_RuleIndex:
      minimum: 0
      type: integer
    definitions_rules_RuleParentProperties:
      properties:
        parent:
          description: Parent uuid
          example: 75532250-c878-42f1-8871-bafa68e944d4
          type: string
        parentType:
          $ref: '#/components/schemas/definitions_rules_ParentType'
      required:
        - parent
        - parentType
      type: object
    definitions_rules_RuleProperties:
      allOf:
        - $ref: '#/components/schemas/definitions_rules_RulePropertiesWithoutParent'
        - $ref: '#/components/schemas/definitions_rules_RuleParentProperties'
    definitions_rules_RulePropertiesWithoutParent:
      allOf:
        - $ref: '#/components/schemas/definitions_rules_RulePropertiesWithoutUuid'
        - $ref: '#/components/schemas/definitions_objects_ObjectUuid'
      description: Use for rule update cause we don't allow parent folder modification for now
    definitions_rules_RulePropertiesWithoutUuid:
      properties:
        ackqid:
          description: a QoS ACK queue id
          type: string
        ackqname:
          description: a QoS ACK queue name
          type: string
        action:
          description: The action of the rule
          enum:
            - block
            - decrypt
            - deleg
            - log
            - pass
            - reset
            - nat
          example: pass
          type: string
        beforeVpn:
          description: activate rule even if it comes from or goes to ipsec tunnel
          type: boolean
        collapsed:
          description: (Rule separator only) indicates if the rule separator is collapsed or expanded
          type: boolean
        color:
          description: (Rule separator only) color of the separator in hexa format
          example: c0d1e2
          type: string
        count:
          description: should we activate packet counter for this rule
          type: boolean
        dscpValue:
          description: QoS DSCP value
          maximum: 63
          minimum: 0
          type: integer
        dst:
          description: Array of object uuids for rule destinations
          items:
            example: d176f167-9e94-459c-8b39-ef7f2907d264
            type: string
          type: array
        dstGeo:
          description: Array of string of destination geo objects or geo groups
          example:
            - af
            - eu:fr
            - some-group-geo-uuid
          items:
            type: string
          type: array
        dstHostRep:
          description: Hosts reputation score for destination
          maximum: 65535
          minimum: 0
          type: integer
        dstHostRepOperator:
          description: operator to apply on dstHostRep
          enum:
            - lt
            - gt
          type: string
        dstInterface:
          description: destination interface
          example: bridge1
          type: string
        dstIpRep:
          description: Array of string of public IP addresses reputation
          enum:
            - anonymizer
            - botnet
            - malware
            - phishing
            - scanner
            - spam
            - tor or exit node
            - bad
          example:
            - spam
            - botnet
          items:
            type: string
          type: array
        dstOperator:
          description: operator to apply on dst
          enum:
            - =
            - '!'
          type: string
        dstPort:
          description: an array of port/port groups uuids to set the destination port section of a rule
          items:
            example: d176f167-9e94-459c-8b39-ef7f2907d264
            type: string
          type: array
        dstPortOperator:
          description: operator to apply on dstPort
          enum:
            - =
            - '!='
            - gt
            - lt
          type: string
        enforceIPSecForward:
          description: Force source packets in IPSec
          type: boolean
        enforceIPSecReverse:
          description: Force return packets in IPSec
          type: boolean
        etherProto:
          description: the ethernet protocol to match
          enum:
            - profinet-rt
          type: string
        fairness:
          description: the QoS fairness strategy
          enum:
            - user
            - host
            - state
          type: string
        forceDscp:
          description: QoS DSCP forced
          type: boolean
        icmpRateLimit:
          description: QoS maximum number of ICMP connections per second
          maximum: 2.147483647e+09
          minimum: 0
          type: integer
        icmpValue:
          description: the icmp "action" to match
          enum:
            - network_unreachable
            - host_unreachable
            - protocol_unreachable
            - port_unreachable
            - fragmentation_needed
            - source_route_failed
            - dest_network_unknown
            - dest_host_unknown
            - dest_network_prohibited
            - host_network_prohibited
            - network_unreachable_for_tos
            - host_unreachable_for_tos
            - comm_prohibited_by_filtering
            - host_precedence_violation
            - precedence_cutoff_in_effect
            - redirect_for_network
            - redirect_for_host
            - redirect_for_tos_and_network
            - redirect_for_tos_and_host
            - echo_request
            - router_advertisement
            - router_selection
            - ttl_eq0_during_transit
            - ttl_eq0_during_reassembly
            - bad_IP_header
            - required_option_missing
            - timestamp_request
            - address_mask_request
            - no_route_to_destination
            - communication_administratively_prohibited
            - beyond_scope_of_source_address
            - address_unreachable
            - source_address_failed_ingress_egress_policy
            - reject_route_to_destination
            - packet_too_big
            - hop_limit_exceeded_in_transit
            - fragment_reassembly_time_exceeded
            - erroneous_header_field_encountered
            - unrecognized_next_header_type_encountered
            - unrecognized_ipv6_option_encountered
            - multicast_listener_query
            - multicast_listener_report
            - multicast_listener_done
            - router_solicitation
            - redirect_message
            - router_renumbering_command
            - router_renumbering_result
            - sequence_number_reset
            - node_information_query_ipv6
            - node_information_query_r_noop
            - node_information_query_ipv4
            - node_information_response_successful
            - node_information_response_refused
            - node_information_response_unknown
            - inverse_neighbor_discovery_solicitation
            - inverse_neighbor_discovery_advertisement
            - version_2_multicast_listener_report
            - home_agent_address_discovery_request
            - home_agent_address_discovery_reply
            - mobile_prefix_solicitation
            - mobile_prefix_advertisement
            - multicast_router_advertisement
            - multicast_router_solicitation
            - multicast_router_termination
            - fmipv6_messages
          type: string
        inspectionAntispam:
          description: enable Antispam inspection
          type: boolean
        inspectionAntivirus:
          description: enable Antivirus inspection
          type: boolean
        inspectionConfig:
          description: config to use for ids or ips
          maximum: 9
          minimum: 0
          type: integer
        inspectionFtpFiltering:
          description: enable FtpFiltering inspection
          type: boolean
        inspectionLevel:
          description: Set the inspection Level of the rule
          enum:
            - ids
            - ips
            - firewall
          example: ids
          type: string
        inspectionMailFiltering:
          description: use given MailFiltering policy
          maximum: 9
          minimum: 0
          type: integer
        inspectionSandboxing:
          description: enable Sandboxing inspection
          type: boolean
        inspectionService:
          description: specify inspection Service if any
          enum:
            - httpproxy
            - webportal
          type: string
        inspectionServiceException:
          description: inspection service exceptions for webportal, should be names of url group objects
          example:
            - auth_bypass
            - guest_services
          items:
            type: string
          type: array
        inspectionSslFiltering:
          description: use given SslFiltering policy
          maximum: 9
          minimum: 0
          type: integer
        inspectionUrlFiltering:
          description: use given UrlFiltering policy
          maximum: 9
          minimum: 0
          type: integer
        ipProto:
          description: the ip protocol to match
          enum:
            - icmpv6
            - vpn-ah
            - vpn-esp
            - gre
            - udp
            - tcp
            - igmp
            - icmp
            - ggp
            - ipencap
            - egp
            - igp
            - hmp
            - rdp
            - ipv6encap
            - rsvp
            - swipe
            - mobile
            - ipv6
            - eigrp
            - ospf
            - ipip
            - etherip
            - encap
            - pim
            - ipcomp
            - vrrp
            - l2tp
            - sctp
          type: string
        ipState:
          description: keep state for ipproto
          type: boolean
        limit:
          description: QoS limits
          enum:
            - none
            - protect
            - alarm
          type: string
        log:
          description: how we should log the matching of this rule
          enum:
            - log
            - log level minor
            - log level major
          example: log level minor
          type: string
        logToDisk:
          description: should we log to Disk?
          type: boolean
        logToIpfix:
          description: should we log to Ipfix?
          type: boolean
        logToSyslog:
          description: should we log to Syslog?
          type: boolean
        name:
          description: Rule name
          example: Some Rule name
          type: string
        natChooseSrcPortRandomly:
          description: Choose random translated source port
          type: boolean
        natDst:
          description: Uuid of an object to set the NAT dst property
          example: d176f167-9e94-459c-8b39-ef7f2907d264
          type: string
        natDstARP:
          description: enable arp publication
          type: boolean
        natDstBalancingType:
          description: load balancing to apply on natDst
          enum:
            - roundrobin
            - srchash
            - connhash
            - random
          type: string
        natDstBetweenPorts:
          description: load balancing to apply on natDst port
          enum:
            - roundrobin
            - srchash
            - connhash
            - random
          type: string
        natDstPort:
          description: uuid of a port to set the NAT destination port section of a rule
          example: d176f167-9e94-459c-8b39-ef7f2907d264
          type: string
        natDstPortOperator:
          description: operator to apply on natDstPort
          enum:
            - =
            - '!='
            - gt
            - lt
          type: string
        natSrc:
          description: Uuid of an object to set the NAT src property
          example: d176f167-9e94-459c-8b39-ef7f2907d264
          type: string
        natSrcBalancingType:
          description: load balancing to apply on natSrc
          enum:
            - roundrobin
            - srchash
            - connhash
            - random
          type: string
        natSrcPort:
          description: Uuid of port/port group to set the NAT source port section of a rule
          example: d176f167-9e94-459c-8b39-ef7f2907d264
          type: string
        natSrcPortOperator:
          description: operator to apply on natSrcPort
          enum:
            - =
            - '!='
            - gt
            - lt
          type: string
        noHASync:
          description: This connexion is synchronized by HA
          type: boolean
        proto:
          description: the applicative protocols to detect
          enum:
            - bgp
            - bittorrent
            - bt-sync
            - citrix-ica
            - citrix-proxy
            - cotp
            - datahub
            - dcerpc
            - dcv
            - dhcp
            - dicom
            - dnp3
            - dns
            - edonkey
            - enip
            - ftp
            - genbroker
            - git
            - gntp
            - gnutella
            - h245
            - h323
            - hicp
            - hl7
            - hpdataprotector
            - http
            - http-websocket
            - icmp
            - idrivesync
            - igmp
            - imap4
            - ip
            - irc
            - kaspersky-ksn
            - ldap_tcp
            - mgcp
            - modbus
            - ms-sql
            - msn
            - mysql
            - nb-cifs
            - nb-dgm
            - nb-epmap
            - nb-ns
            - nb-ssn
            - netb
            - nntp
            - ntp
            - opcua
            - openvpn
            - oracle-tns
            - oscar
            - p2p_dht
            - pgsql
            - pop3
            - proxy
            - qqim
            - quake3
            - radius
            - radmin
            - rdp
            - realwin
            - rip
            - rtcp
            - rtp
            - rtp_rtcp
            - rtsp
            - s7
            - sip
            - skype
            - smtp
            - snmp
            - ssh
            - ssl
            - steam
            - svn
            - tcpudp
            - teamspeak
            - teamviewer
            - telnet
            - teredo
            - tftp
            - upnp-ssdp
            - utp
            - vmware
            - vnc
            - xarrow
            - xmpp
            - ymsg
          type: string
        qid:
          description: a QoS queue id
          type: string
        qname:
          description: a QoS queue name
          type: string
        reqRateLimit:
          description: QoS maximum number of application requests per second
          maximum: 2.147483647e+09
          minimum: 0
          type: integer
        router:
          description: where to route trafic matching this rule. This should be an object name
          example: main_firewall
          type: string
        schedule:
          description: uuid of the time to schedule the rule
          type: string
        sctpRateLimit:
          description: QoS maximum number of SCTP connections per second
          maximum: 2.147483647e+09
          minimum: 0
          type: integer
        sep:
          description: indicates if the rule is a separator
          type: boolean
        sipRedirect:
          description: enable sip redirect
          type: boolean
        src:
          description: Array of object uuids for rule sources
          items:
            example: d176f167-9e94-459c-8b39-ef7f2907d264
            type: string
          type: array
        srcAuthMethod:
          description: authentication method used by the user to login
          enum:
            - AGENT-AD
            - AGENT-GUARD
            - GUEST
            - IPSEC
            - KERBEROS
            - OPENVPN
            - PLAIN
            - RADIUS
            - SPNEGO
            - SPONSOR
            - SSL
            - VOUCHER
          type: string
        srcGeo:
          description: Array of string of source geo objects or geo groups
          example:
            - af
            - eu:fr
            - some-group-geo-uuid
          items:
            type: string
          type: array
        srcHostRep:
          description: Hosts reputation score for source
          maximum: 65535
          minimum: 0
          type: integer
        srcHostRepOperator:
          description: operator to apply on srcHostRep
          enum:
            - lt
            - gt
          type: string
        srcInterface:
          description: name of the source interface
          example: bridge
          type: string
        srcIpRep:
          description: Array of string of public IP addresses reputation
          enum:
            - anonymizer
            - botnet
            - malware
            - phishing
            - scanner
            - spam
            - tor or exit node
            - bad
            - exploit
            - suspect
          example:
            - spam
            - botnet
          items:
            type: string
          type: array
        srcOperator:
          description: operator to apply on src
          enum:
            - =
            - '!'
          type: string
        srcPort:
          description: Uuid of port/port group to set the source port section of a rule
          example: d176f167-9e94-459c-8b39-ef7f2907d264
          type: string
        srcPortOperator:
          description: operator to apply on srcPort
          enum:
            - =
            - '!='
            - gt
            - lt
          type: string
        srcUser:
          description: trafic from user
          example: paul
          type: string
        srcUserDomain:
          description: domain to use to look for user
          example: stormshield.eu
          type: string
        srcUserOperator:
          description: operator to apply on srcUser
          enum:
            - =
            - '!'
          type: string
        srcUserType:
          description: user type
          enum:
            - unknown
            - any
            - anyNonLdap
            - anyGuest
            - anySponsored
            - anyVoucher
            - user
            - group
          example: group
          type: string
        status:
          description: enable or disable a rule
          enum:
            - "on"
            - "off"
          example: "on"
          type: string
        tcpRateLimit:
          description: QoS maximum number of TCP connections per second
          maximum: 2.147483647e+09
          minimum: 1
          type: integer
        tosValue:
          description: trafic DSCP value
          maximum: 63
          minimum: 0
          type: integer
        udpRateLimit:
          description: QoS maximum number of UDP connections per second
          maximum: 2.147483647e+09
          minimum: 0
          type: integer
        via:
          description: trafic came via
          enum:
            - httpproxy
            - sslproxy
            - ipsec
            - vpnssl
          type: string
      required:
        - action
        - status
        - src
        - dst
      type: object
    definitions_rules_RuleUpdateResponse:
      properties:
        result:
          $ref: '#/components/schemas/definitions_rules_RulePropertiesWithoutParent'
        success:
          type: boolean
      type: object
    definitions_rules_RulesFetchListResponse:
      properties:
        result:
          properties:
            objects:
              items:
                $ref: '#/components/schemas/definitions_objects_ObjectProperties'
              type: array
            rules:
              items:
                $ref: '#/components/schemas/definitions_rules_RuleProperties'
              type: array
          type: object
        success:
          type: boolean
      type: object
    definitions_rules_RulesImportListResponse:
      properties:
        result:
          allOf:
            - $ref: '#/components/schemas/definitions_misc_ImportResponse'
            - $ref: '#/components/schemas/definitions_rules_RulesImportSummary'
        success:
          type: boolean
      type: object
    definitions_rules_RulesImportSummary:
      properties:
        createdRulesUuid:
          items:
            description: Uuid of created rule
            type: string
          type: array
        object:
          allOf:
            - description: Counts of imported objects or errors
            - $ref: '#/components/schemas/definitions_misc_DefaultImportSummary'
        rule:
          description: Counts of imported rules or errors
          properties:
            created:
              type: number
            failed:
              type: number
            filterRuleCreated:
              type: number
            filterRuleFailed:
              type: number
            natRuleCreated:
              type: number
            natRuleFailed:
              type: number
          type: object
      type: object
    definitions_rules_RulesListResponse:
      properties:
        result:
          items:
            $ref: '#/components/schemas/definitions_rules_RuleProperties'
          type: array
        success:
          type: boolean
      type: object
    definitions_server-state_CurrentRevision:
      properties:
        isLast:
          type: boolean
        revision:
          description: revision number
          example: 2
          type: string
      type: object
    definitions_snsdiff_SnsDiffResult:
      properties:
        result:
          properties:
            diff:
              description: Return from command diff applied on last deployed configuration and SNS local configuration
              example: |
                diff -r -x slotinfo -x CA.cert.pem -N --suppress-blank-empty --ignore-blank-lines -I '^#' -U 3 --text /tmp/sns/data/snsconfigurations/sns-uuid-2/current-deployed-configuration/usr/Firewall/ConfigFiles/Global/Filter/01 /tmp/sns/data/snsconfigurations/sns-uuid-2/tmpdir/usr/Firewall/ConfigFiles/Global/Filter/01
                --- /tmp/sns/data/snsconfigurations/sns-uuid-2/current-deployed-configuration/usr/Firewall/ConfigFiles/Global/Filter/01    2021-03-02 11:10:29.738762057 +0100
                +++ /tmp/sns/data/snsconfigurations/sns-uuid-2/tmpdir/usr/Firewall/ConfigFiles/Global/Filter/01    2021-03-02 11:10:29.730762083 +0100
                @@ -4,5 +4,7 @@
                 pass from Any to Any rulename "some-rul"
                 separator color="c0c0c0" comment="Separator- rule grouping" collapse="1"
                 off block from Any to Any rulename "78c099de"
                +separator color="5795CA" comment="sns-2" collapse="1"
                +separator color="c0c0c0" comment="Separator- rule grouping" collapse="1"

                [NAT]
              type: string
            fileName:
              description: filename for download
              example: sns-name_20010203_040506.diff
              type: string
            lastDeployedCfgBirthDate:
              description: The date when the last deployed configuration was generated
              type: string
            revisionNumber:
              description: Revision number of the last deployed configuration
              example: "00001"
              type: integer
          type: object
        sucess:
          example: true
          type: boolean
      type: object
    definitions_topologies_AddressPoolReservationInTopology:
      properties:
        ipv4Address:
          description: IPv4 address of the reservation, with CIDR - usually /31
          type: string
        mask:
          description: Mask address of the reservation
          type: string
        peerHost:
          description: Remote host object's name
          example: VTI_on_localFw_with_remoteFw_in_topologyName
          type: string
        peerHostComment:
          description: Remote host object's comment
          type: string
        remote:
          allOf:
            - $ref: '#/components/schemas/definitions_common_Uuid'
            - description: Remote peer UUID
        remoteVTI:
          description: Remote VTI system object's name
          example: Firewall_VTI_2de6aa53
          type: string
        vtiComment:
          description: VTI's comment
          type: string
        vtiName:
          description: VTI's name
          example: VTI_2de6aa53
          type: string
      required:
        - remote
        - ipv4Address
      type: object
    definitions_topologies_DefaultAddressPool:
      properties:
        address:
          type: string
      required:
        - address
      type: object
    definitions_topologies_TopologiesListResponse:
      properties:
        result:
          items:
            $ref: '#/components/schemas/definitions_topologies_TopologyPropertiesWithUuid'
          type: array
        success:
          type: boolean
      type: object
    definitions_topologies_TopologyPeerProperties:
      allOf:
        - $ref: '#/components/schemas/definitions_topologies_TopologyPeerPropertiesWithoutReadOnly'
        - properties:
            reservations:
              description: List of peer's reservations, if route-based
              items:
                $ref: '#/components/schemas/definitions_topologies_AddressPoolReservationInTopology'
              type: array
          type: object
    definitions_topologies_TopologyPeerPropertiesWithoutReadOnly:
      properties:
        endpoints:
          description: List of traffic endpoints, if policy-based
          items:
            description: Object UUID (Network, Host or Group)
            type: string
          type: array
        publicIpAddressHost:
          description: undefined for firewall default, object uuid if overriden, or "any" if peer is dynamic
          type: string
        uuid:
          description: Peer UUID (Firewall or Host)
          type: string
        vpnLocalAddress:
          description: undefined for firewall default, object uuid if overriden
          type: string
      required:
        - uuid
        - publicIpAddressHost
        - vpnLocalAddress
      type: object
    definitions_topologies_TopologyPropertiesWithUuid:
      allOf:
        - $ref: '#/components/schemas/definitions_objects_ObjectUuid'
        - $ref: '#/components/schemas/definitions_topologies_TopologyPropertiesWithoutUuid'
        - properties:
            nbTunnels:
              description: Number of tunnels in topology
              example: 42
              readOnly: true
              type: number
            peers:
              description: List of topology peers
              items:
                $ref: '#/components/schemas/definitions_topologies_TopologyPeerProperties'
              type: array
          type: object
      required:
        - uuid
        - name
        - encryptionProfile
        - dpdMode
        - ikeVersion
        - peers
        - enabled
    definitions_topologies_TopologyPropertiesWithoutUuid:
      properties:
        addressPool:
          default: 172.25.0.0/16
          description: IPv4 address with CIDR of the chosen address pool, if route-based
          type: string
        authorities:
          description: Associated certificate authority UUID (Required if no psk)
          example:
            - some-uuid
            - some-other-uuid
          items:
            type: string
          type: array
        center:
          description: UUID of the peer that will be the center of the topology, if shape is star
          type: string
        dpdMode:
          description: Dead Peer Detection mode
          enum:
            - "off"
            - passive
            - low
            - high
          example: passive
          type: string
        enabled:
          description: True if the topology is enabled, false otherwise
          type: boolean
        encryptionProfile:
          description: Associated encryption profile UUID
          example: d176f167-9e94-459c-8b39-ef7f2907d264
          type: string
        fragmentSize:
          default: 1280
          description: The fragment size
          example: 1280
          maximum: 2.147483647e+09
          minimum: 512
          type: integer
        ikeDscp:
          description: The IKE dscp value to apply to the topology IKE traffic. Goes from 0 to 63 and is optional.
          example: 42
          type: number
        ikeVersion:
          description: IKE version
          enum:
            - 1
            - 2
          example: 2
          type: number
        name:
          description: Topology name
          example: some-topology
          type: string
        peers:
          description: List of topology peers
          items:
            $ref: '#/components/schemas/definitions_topologies_TopologyPeerPropertiesWithoutReadOnly'
          type: array
        pmtud:
          default: 0
          description: Path MTU Discovery (0 = "Disabled", 1 = "Always add the DF flag", 2 = "Keep the DF flag")
          enum:
            - 0
            - 1
            - 2
          example: 0
          type: integer
        psk:
          description: Topology PSK (Required if no authorities)
          example: my password
          type: string
        responderOnly:
          description: ONLY in the case of a star topology, whether the center will be set as responder-only, so that it will not initiate VPN tunnels
          type: boolean
        shape:
          default: mesh
          description: Topology shape
          enum:
            - mesh
            - star
          type: string
        type:
          default: policy
          description: Topology type
          enum:
            - policy
            - route
          type: string
      required:
        - name
        - encryptionProfile
        - dpdMode
        - ikeVersion
        - peers
        - enabled
      type: object
    definitions_traffic-shaper_MultipleTrafficShapersResponse:
      properties:
        result:
          items:
            $ref: '#/components/schemas/definitions_traffic-shaper_TrafficShaper'
          type: array
        success:
          type: boolean
      type: object
    definitions_traffic-shaper_SingleTrafficShaperResponse:
      properties:
        result:
          $ref: '#/components/schemas/definitions_traffic-shaper_TrafficShaper'
        success:
          type: boolean
      type: object
    definitions_traffic-shaper_TrafficShaper:
      allOf:
        - $ref: '#/components/schemas/definitions_traffic-shaper_TrafficShaperWithoutUuid'
        - properties:
            uuid:
              type: string
          required:
            - uuid
          type: object
      description: A traffic shaper
    definitions_traffic-shaper_TrafficShaperWithoutUuid:
      description: A custom traffic shaper
      properties:
        incomingBandwidth:
          example: 10
          maximum: 9.99999999e+08
          minimum: 0
          type: number
        name:
          example: myNewTraffic
          type: string
        outgoingBandwidth:
          example: 10
          maximum: 9.99999999e+08
          minimum: 0
          type: number
      required:
        - name
        - outgoingBandwidth
        - incomingBandwidth
      type: object
    definitions_tunnels_TunnelEndpoint:
      properties:
        detectedPublicIpAddress:
          description: IP address used by Firewall on this tunnel endpoint
          example: null, 1.2.3.4
          type: string
        detectedVpnLocalAddressName:
          description: Interface used for this tunnel endpoint or null when tunnel has never been up
          example: null, Firewall_out
          type: string
        endpoint:
          description: endpoint object
          example: some-network-name
          type: string
        gateway:
          description: endpoint gateway
          example: some-firewall-name
          type: string
        publicIpAddress:
          description: IP address used for this tunnel endpoint (comes from firewall or topology endpoint's configuration)
          example: 1.2.3.4
          type: string
        vpnLocalAddressName:
          description: Interface configured for this tunnel endpoint (comes from firewall or topology endpoint's configuration)
          example: Any, Firewall_out, ...
          type: string
      type: object
    definitions_tunnels_TunnelProperties:
      properties:
        left:
          allOf:
            - $ref: '#/components/schemas/definitions_tunnels_TunnelEndpoint'
          description: tunnel's left side couple gateway-objects
          type: object
        name:
          description: topology's name
          example: topology-name
          type: string
        right:
          allOf:
            - $ref: '#/components/schemas/definitions_tunnels_TunnelEndpoint'
          description: tunnel's right side couple  gateway-objects
          type: object
        rulename:
          description: link's digest according to VPN config rulename token
          example: 8de805f1ad829d4bf4f21a6380434ea4
          type: string
        shape:
          description: topology's shape
          example: mesh
          type: string
        status:
          description: Tunnel's status
          properties:
            left:
              enum:
                - mature
                - dead
                - unknown
              example: mature
              type: string
            right:
              enum:
                - mature
                - dead
                - unknown
              example: dead
              type: string
            state:
              enum:
                - up
                - down
                - unknown
              example: down
              type: string
          type: object
        type:
          description: topology's type
          example: policy
          type: string
        uuid:
          description: topology's UUID
          example: topology-uuid
          type: string
      required:
        - uuid
        - name
        - rulename
        - type
        - shape
        - left
        - right
        - status
      type: object
    definitions_tunnels_TunnelsListResponse:
      properties:
        result:
          items:
            $ref: '#/components/schemas/definitions_tunnels_TunnelProperties'
          type: array
        success:
          type: boolean
      type: object
    definitions_unifiedconfig_UnifiedConfigResponse:
      properties:
        _certificates:
          type: object
        _firewalls:
          type: object
        _folders:
          type: object
        _metainfos:
          type: object
        _objects:
          type: object
        _preferences:
          type: object
        _rules:
          type: object
        _variables:
          type: object
        autobackup:
          type: boolean
        eventBus:
          type: object
        vpn:
          type: object
      type: object
    definitions_variables_MultipleVariablesResponse:
      properties:
        result:
          items:
            $ref: '#/components/schemas/definitions_variables_Variable'
          type: array
        success:
          type: boolean
      type: object
    definitions_variables_SingleVariableResponse:
      properties:
        result:
          $ref: '#/components/schemas/definitions_variables_Variable'
        success:
          type: boolean
      type: object
    definitions_variables_Variable:
      allOf:
        - $ref: '#/components/schemas/definitions_variables_VariableWithoutUuid'
        - properties:
            uuid:
              type: string
          required:
            - uuid
          type: object
      description: A custom variable
    definitions_variables_VariableWithoutUuid:
      description: A custom variable
      properties:
        comment:
          example: created from Swagger
          type: string
        name:
          example: myNewVar
          type: string
      required:
        - name
      type: object
    definitions_variables_VariablesImportListResponse:
      properties:
        result:
          allOf:
            - $ref: '#/components/schemas/definitions_misc_ImportResponse'
            - $ref: '#/components/schemas/definitions_variables_VariablesImportSummary'
        success:
          type: boolean
      type: object
    definitions_variables_VariablesImportSummary:
      properties:
        importSummary:
          properties:
            created:
              type: integer
            defined:
              type: integer
            error:
              type: integer
            undefined:
              type: integer
            updated:
              type: integer
          type: object
      type: object
  securitySchemes:
    apiKey:
      scheme: bearer
      type: http
security:
  - apiKey: []
